<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[2021开年大吉]]></title>
    <url>%2F2021-01-30%2F2021-first-blog%2F</url>
    <content type="text"><![CDATA[如题 祝大家新年快乐！]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[直面现实]]></title>
    <url>%2F2020-10-03%2Fface-a-fact%2F</url>
    <content type="text"><![CDATA[很久没有写东西，原因有很多，有些东西记在了日记本，有些情绪撒在了微博，有些积攒起来。 不吐不快。 忘记和释怀是一件很难的事情，越是投入的多，越是难以做到。沉浸在对过去的想象和回忆，是一种逃避。 还是毕业那段时间，经历了一些变故，人在处理这些情绪的时候会很自觉的把东西联系到一起，打包处理。这些东西会堵住你的血管，让你的身体开始出现各种问题。如果你对着一切有意识还好说，倘若一直处于这种无状态的情况，就很难说。 工作之后，时间会变得很快，一眨眼，又年长了一岁，这时候已经没有了当初长大一岁的欢愉。 工作之后的自信，更难了，现实褪去包装，摆在你面前的是钢筋水泥，你要自己通过想象将其替换为别墅大厦。有时候你甚至要通过自欺来恢复自信。又或者是，接受平凡而普通的自己，开始好好扮演自己的角色。]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>逃避</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我们爱的人]]></title>
    <url>%2F2020-05-16%2Fpeople-we-love%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>思考</tag>
        <tag>人生</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[状态不好]]></title>
    <url>%2F2020-02-03%2Fsomething-wrong%2F</url>
    <content type="text"><![CDATA[没有人喜欢挫折，更别说一直是挫折。 为什么总是怀念学校的日子，因为那时候简单，心情很好打理，每年考试过关，开开心心，就万事大吉，一年算是过去了。工作之后，有很多压力，来自工作、生活、家庭等等，作为一个比较随遇而安且比较懒的人，实在是不喜欢频繁的变动。 高压政策，加上一些奇奇怪怪的规则，会让人透不过去，总感觉不舒服。一开始选择这里肯定是为了钱，但事实上我暂时没那么缺钱，也没有那么强的赚钱动力，尤其是目前没有时间花钱的情况下。 目前看，工作似乎没有带来很多认同感或者幸福感。 有个朋友说的很对，一个想法一旦发了芽，就会不断不断的长大，最好的办法就是去实现它，不管结局如何。]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>烦恼</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019 年度总结：为什么活着？]]></title>
    <url>%2F2019-12-25%2F2019-summary%2F</url>
    <content type="text"><![CDATA[年终总结，已经成了一件很有仪式感的事情，每次开始写的时候才会发觉，呀，原来这一年发生了这么多事。要提前说的是，因为一直在修改，拼命塞进任何想到的东西，所以越写越长，非常建议你提前扫一眼再决定有没有必要读下去，毕竟时间是宝贵的。 首先简单总结下这一年，大学毕业，进到一家高工作强度的公司，正式开始“社畜”生涯。因为地域迁徙，所以几乎是“重启”了朋友圈，在一个新的地方，结交新的朋友，和以往完全不一样的单休生活，总体上来说，我还算适应的不错。工作上而言，我个人觉得还不错，虽然我是本科，在算法这一行里并不多见，但是并没有感受到什么掣肘的地方，有之前的不了解东西，一定是尽最大努力弄懂弄明白，所以工作上的压力基本也还好。同事之间合作也比较顺利，有一些私下关系也很好。怎么写着写着有点像 PR 文，总是就是还不错啦，唯一的小问题大概就是单休了，还是失去了很多自由支配的时间。 起标题是一件很头疼的事情，小时候写作文起，我就习惯先写完文章，然后再写标题，在我看来，归纳相比扩写，要简单的多。再后来，写的东西总是很发散，没有中心，这样的文章，语文老师不会喜欢，换一个人也不愿意读，读来读去不知道在讲什么，所以我开始预先定好一些条条框框，先写小标题，在小范围内发散，整体上再加以修饰点缀，总算不至于结构散乱，这样就算别人读起来还是很乱，回头瞅一瞅标题，啊，原来他想说这个。所以这篇文章也是，如果你觉得太长，大可以快速翻下去，看完小标题就知道我写的是什么了。 花很多时间记下这些东西，很大程度是希望将来有地方回忆，都说互联网时代的记忆很短，讯息的时效性很强，人们忘得很快，很久以前一起网上冲浪的朋友，不再联系之后，再看到账号就会觉得陌生。但是另一方面，也是好事，我们可以记录的载体更多，方式也更多，传播的成本也更小，可以有更多的机会把自己的想法分享给更多人。 这一年花了很多时间和自己相处，简单来说就是了解自己，通过剖析自己来解释自己的行为。这样的结果就是，越来越喜欢和自己玩，嗨，你可真臭屁！ 像我这样的年纪，一人吃饱全家不愁，最容易迷惘，也容易想多。想做的事情太多，能做的事情又太少，想法和行动不匹配，就会顺拐，走起路来，虽然不会摔跤，但怎么看都怪怪的。老一辈人，很少追问为什么，例如为什么活着这种深奥的话题，但这并不代表他们没有答案，你随便问一个老辈的，他多半会首先错愕，然后毫无犹豫说出一个简单的由头，然后再感慨一句，“人就活一辈子，怎么都是活，想那么多干啥”。他们不问，但是心里有答案。我一直在问，但心里没底，活着的意义是？ 0、前言小时候的主要记录方式是相机，家里的相机记录下我的很多成长瞬间，翻看那些老照片的时候，当时的场景都会一下子浮现到眼前，就像去储物箱翻到小时候的玩具一样。相比玩具、日记本之类的实物，科技的发展让我们有了更多更方便的记录生活的方式，不断进化的手机让我们有更多更加高清的照片、视频，云盘带来更便捷的存储方式。 无数的经验证明，在晚上写出来的东西，都会带着黑夜的矫情，一定也只适合在晚上读，生活在白天的人看了，首先要起一身疙瘩，也很难理解个中情绪——包括早上醒来的我。 19 年是很难熬的一年，发生了很多很多的时候，有些事情可以跟人倾诉，有些只能埋在心底。 这是正式工作的第一年，也算是一个小的转折点。就像每一次升学一样，移动到一个新的区间，以往的追求都很简单，开心地度过这个区间，然后去到下一个。 如果要说成长，这一年称得上翻天覆地的，至少我自己这样觉得。可以成长的地方有这么多，大概也是因为之前有太多地方要成长。 19 年实在有太多东西想写，想抓住。不过我也慢慢发现，一个人能记住的东西，实在是很少，只能是不断做减法，只记住那些真正在意的东西，记不住的东西，忘了就忘了吧。 一、毕业毕业前，父亲生了病，一度在 ICU 住了很久，那段时间实在难熬，心里只有害怕。我妈问，小儿，你爸要是挺不过去，可咋办啊，说完就哭的稀里糊涂。我也不知道，如果我爸真没了，真不知道生活该怎么继续。那时候真感觉，天塌了，世界变成了白色，除此之外的一切事都不重要。 当然，结果没有那么坏，父亲挺了过来，不然我也不会如此坦然的坐在这里，写我的什么狗屁总结。这件事之后，父亲老了很多，我也仿佛“老”了很多，在生死面前，还有什么是不可以看淡的呢。那时候就在想，将来一定要让父母过得好，不，不是将来，是从那时候开始。 我不是爱哭的人，但是好几次，我坐在寝室，想到父亲辛苦了大半辈子，只是为了这个家，到头来还要经受这么大的折磨，眼泪止不住地往下流，实在忍不住，跑到卫生间捂着嘴哭到浑身颤抖。我真的没有任何准备，从小到大没有经历过这么大的挫折。 我一般不藏东西，有情绪都会讲出来，但这件事一直憋在心里，毕业那会每天还是一样乐呵呵，做一些毕业生该做的事情，和好朋友一起追忆，一起吹牛，快要离校的那段时候，说的最多的大概是，“以后估计见得少，保重”。毕业季，饭局多，虽然吆喝几声就是一群人，酒量大概也是那时候练出来的。 憋着不倾诉，大概是觉得，毕业本身已经足够悲伤了，如果还要加上我这些悲痛的事情，大概整个毕业季都会是灰色吧，也会影响到别人，你出现的场合，都要给你同情，那该多尴尬。 最开始的时候，只能喝两瓶瓶酒，后来可以喝四瓶五瓶六瓶，再后来啤酒就醉不了了，当然，现在酒量又退步了，喝两瓶就会飘，哈哈。 要知道，没有什么，比你和一群要好的朋友在一起，吃饭喝酒聊天吹牛怀旧更开心的事情了，再多的烦恼也会暂时忘掉，当你醉醺醺的回到宿舍，往床上那么一躺，就什么都记不起来了。有朋友还以为我是因为失恋才酗酒，哈哈，并不是，那只是雪崩里的一朵小雪花。 照理说，这样的毕业季应该是由苦和泪组成的，但我不是那样脆弱的人，毕竟一向自诩“乐天派”，所以那时候总是想着法的逃避，去跑步，下雨的时候光着脚在信操跑步，去坐大循环，坐完一整圈再回到信部，去东湖跳水，我一个两次溺水差点挂掉的人，在东湖里和一群抱着篮球的大爷扑腾扑腾，要么就打游戏，通宵打，打完睡到自然醒。总之尽量避免思考，避免独处。 每个人毕业之后都会怀念，我猜，我怀念的会更早一点。你毕业了，去了另一个城市，带着原来的苦，之前的朋友却散落天涯，想想就知道有多惨，这样推算，就算一度抑郁甚至偶尔生出戾气也不奇怪吧？ 我无数次庆幸，在珞珈山有那么棒的一群人，让我在那样苦涩的日子里还可以开怀大笑，我在 19 年的最后一天，记下对远方你们的思念，希望未来可以多见见。 上面这句，晚上写的，太**矫情了，也懒得删了，毕业之后，很想念武汉，在外面听见武汉话，兴奋程度不亚于听见家乡话，很亲切。 二、乱想第一章似乎写的有些过分压抑，各位看官大不必啊，如果我有写得感人的话，哈哈哈哈哈哈。可能是因为写的时候又进到了当时的那种情绪，加上晚上跟爸妈打了电话，把当时的境遇写的过分惨了些。事实要好很多，那时候还是有很多欢乐。 经历了大大小小一些事情之后，也会去反思自己之前的一些行为，差不多等于胡思乱想吧，就自己在那里瞎琢磨，倒也琢磨出来一些东西。 1.珍惜，更加珍惜以前觉得理所应当的东西。我以为自己会成熟的更慢一些，可以多当几年孩子，但是上帝似乎有意在我 2.感恩，感恩这种东西，就像很多水到渠成获得的本能一样，当你到了一定的年纪，会自然而然的懂事，开始感恩。小时候我跟父母在一起的时间不多，有一次和家里闹脾气吵架，甚至还说过，“养我是你们应尽的责任，是法律规定的，大不了长大了我再还给你们”这样的傻气话。 3.不较真，很多时候都不能较真，有些东西，凑合着能行，就凑合呗。很多地方都能体现我作为一个处女座的特点吧，尤其是之前，要求比较高，有时候甚至有点钻牛角尖，这一点在我小学的时候就有老师反馈过，是我的数学老师，应该姓姜。 4.修饰，以前觉得，你的本性是这样，心里如果想，就如何表达如果做事就好了，但实际上人们不喜欢这样的人。你内心是个散漫懒惰的人，如果你好不遮掩的表现出来，没有多少人觉得你很真实，只是会说，恩，我不喜欢这样的。所以这时候修饰就显得很重要，适当的修饰，绝对是利大于弊的。 5.公平，我是那种很典型的对陌生人很客气，对熟人尤其是好朋友、亲人一点都不客气的人。这会导致很多问题，比如“总是把最坏的一面展现给最亲的人”，这一点也不好，而且就算你要展现，也不要全部丢给一个人，这样对人家也不公平对吧？你受了委屈，可以憋着泪对陌生人彬彬有礼有说有笑，回家却要一副臭脸甩给亲人，这是凭什么？以后见到这种人，见一次打一次，包括我自己。 6.和解，认识自己是一个怎么样的人，然后理解自己，认可自己，这其实很难。我应该算是个完美主义者，但我自己跟完美搭不上边，如果让我一天到晚我自己，八九不离十会疯掉。所以要原谅自己，想要有八块腹肌，就去健身，工作太累没法坚持下去，那就算了吧，有时间就去，毕竟你不是什么超人。身边有那么多人都比你优秀，是不是要开始自我否定进而自闭呢？那也不必，偶尔运用阿 Q 精神，“自我胜利”，不见得是坏事。你努力想要办好一件事，付出了很多很多，最终还是黄了，是不是要开始自我怀疑了呢？我是不是不太行？你爱好那么多，有几个做到极致呢？爱好多也是优点嘛。 有一段时间，不知道吃错了什么药产生了一种错觉，“我很优秀，我要每件事都很优秀，我要对自己高标准严要求”。这是一件很扯的事情，换句话就是“产生了和能力不相匹配的野心”，会很累。 和解，在我这里大概意味着允许自己犯错，允许自己达不到预期，允许自己是菜鸡，适当为自己开脱，这样才是游戏人生，才会有更多快乐嘛。 7.主要矛盾，做事的时候分清主次，扮演好自己的角色，解决主要矛盾。解决问题，是一种很重要的能力。有一段时间切到了一个新的系统做算法开发，有很多工程问题，我会很关心一些细枝末节的东西，什么都想自己搞清楚，mentor 就说这些东西，你可以关心，但是首先要保证的是算法方便的进度，工程方面的问题，抛给对应的同学协助解决。 这是一个很实用的建议，之后很多情况下，解问题的思路开阔很多。其实不仅仅是这一方面，例如做事的时候因为某些东西卡住了，首先弄清楚为什么卡住，然后看这件事的某些部分是不是可以并行，是不是可以通过某些方式绕过去，尽量不要等，等是一件代价很高的事情。尽量想办法，快速验证。 8.负反馈调节：“在一个系统中，系统本身的工作效果，反过来又作为信息调节该系统的工作，这种调节方式叫做反馈调节 （生物学）”，人只有犯错，并且付出相应的代价，才会变聪明，才会真正印象深刻，之后想尽一切办法避免同样的错，不然的话，任凭老人们、前任们如何说教，也无济于事。人有时候跟神经网络有点像，初始化的时候有好有坏，确定了目标函数，然后就各凭本事，可劲优化，有些东西会让你收敛的更快，有些让你收敛的更好，有些会让你“学坏”。 君子不夺人所好，打击黄牛党。 三、工作1.工作思考工作方便的东西，也有很多可以写，如果要论素材，一定是最多的，我有一个备忘录文件夹专门用来记载工作心得，但是便于分享再加上具有普适性的实在不多，这里仅凭印象，记录其中的一部分。 1）细心对于代码尤其是线上代码，常怀敬畏之心 2.目标明确：记清楚自己的核心 3.高效率： 4.及时反馈，主动交流，让同事知道你的最新进展。 5.终身学习：这个概念 6.校验给自己的输入，不信任外界信息，写好自己的“保护代码”。这里其实不仅仅是代码，别人提供给你的信息、数据和结论等等，统统需要自己去校验，尤其是在一个各方便基础设施都不是很完善的公司。你需要自己去检查每一步，确保没有问题，而不是想当然。 同样的，自己要努力成为一个靠谱的人，确保对外的输出是正确的，如果输出了错误信息，及时修正。 7.认可工作：必须得承认，工作是很重要的一部分，虽然不能让工作占据了大部分时间，但你觉得忽略不了工作，你需要工作中的自我认可和他人认可，需要接受游戏规则，然后追逐奖励，不然你一点也不开心。 工作当中如果能够一直有成果，也是一件很快乐的事情，就算有一些困难也可以克服，所以说还是需要有激励自己的东西。 8.自主：有些工作需要抢着做， 多与人沟通交流，多跟人请教，不要埋头一通瞎忙活。 做事情目的性和计划性很重要，首先搞清楚要什么，然后分清楚主次，再就是要有计划性，分层分批去解决问题。 这半年工作方面的文章写的最多，想要做一个索引便于查阅，想想太麻烦还是算了，感兴趣的自己去翻翻看吧。 信息不对称，选择的时候容易想当然，出现偏差，最好的办法就是自己去体验。再有就是多读书，多与人交流，避免一个人瞎想，很多时候自己一个人想到的自以为很棒的 idea，其实有可能是别人早就熟知甚至已经落地的点。 专注：一心多用，不一定是好事。 2.评论1）人工智能这个词经过这几年的洗礼，含义已经变得丰富多彩。这个小行业的飞速发展，我们这些身在其中的，体会应该最深。它的影响力，已经开始在社会的边边角角开始体现。当然，这里我无意鼓吹，也无意贬低，就事论事聊一聊自己的感受。 现在人都喜欢鼓吹新概念，好像不管什么东西，只要是新的，就是牛*的，身边也不乏无脑鼓吹什么区块链人工智能的“人物”，当然有些确实厉害，有些就呵呵。我虽然是菜鸡吧，但因为去公司实习的早，所以比较实在，结果导向，白猫黑猫，抓住老鼠就是好猫。 首先是直观上的收益，人工智能在很多情况和机器学习是差不多的， 2）产品经理可以有追求，但多数情况下都是抄就完事了，这绝没有任何歧视这个群体的意思，抄的有模有样，甚至还能推陈出新，那便是本事。 当然，多数只会抄。 就我自己而言，很多时候都会有处女座的典型特点，注重细节体验追求完美，在公司就经常提各种 bug 和优化点，希望那些同事不要烦我哈哈哈哈哈。大学的时候，和朋友一起写游戏的时候，是一段非常美好的经历，希望以后也有机会，再来做自己的产品，这也曾经是某一段时间的理想。 这个群体，似乎很喜欢方法论，当然也许是我的一些误解，这一点是很多技术同学看不到的点，跳出来聊产品，讲一些实际存在但之前没人说过没人发现的话，这也很厉害，有时候听到这样的点，会觉得豁然开朗，但是听多了也就那样。 四、生活给自己留更多的时间，主动做一些有意思的事情，体验更多的未知内容。 1.游泳健身工作以来，健身的口号一直喊得很响，事实上执行的也不错，工作之后长时间坐在电脑桌前，缺乏运动，就总想着找机会动一动。 最开始是跑步，绕着苏州河跑步，后来天冷了，就去健身房里练，接着觉得健身房太累，有些项目掌握的不好，还会很痛，就开始游泳，目前保持一周至少一次。 2.书和电影这一年在读书上还是花了很多时间，尤其是临近毕业那会，最是放松，读书也无需带着目的性，放肆随意去读，很畅快。 这一年使用最多的是微信读书，APP 的年终记录里的时间应该比我实际的要多。微信读书这个软件，延续了微信系列的一些优点，例如简洁等等，是不可多得的好产品，但可能因为急于做社交、做互动，也做了很多不好的尝试（或者说我不喜欢），例如【故事】，这是一个很重要的底部 Tab，但是浓浓的头条加 UC 加朋友圈爆款文，每次都会觉得拉低了本身的档次。那些朋友圈爆款文，我如果想看，为什么不在朋友圈就点开呢？既然是读书的地方，就该有取舍，一味求流量，只会显得格格不入，当然，这只是一厢情愿的想法，为了恰饭，情怀简直是第一个应该舍弃的。 （写完之后几天又打开微信阅读，在设置里面看到“关闭故事的文章推荐”，关闭之后清爽太多，好评！） 这一年读的书不多，这里记一下印象比较深的几本书。 《》 3.音乐聊到音乐，其实有点像小时候去小伙伴家玩，到了地方一定是把家里的玩具全部拿出来，然后一一介绍给对方。 音乐不像电影，每年都会遇到很多很好很喜欢的，电影看四到五遍，就算是珍爱之极，喜欢的歌却可以一直听一整年。 没有什么最喜欢的歌手，如果一定要说毫无疑问是陈奕迅。说到这其实不太理解一些饭圈文化，也不是很理解那些疯狂追星的朋友，喜欢一个歌手，认真听他的歌，有机会去听演唱会难道不够吗？干嘛要搞出那么多幺蛾子呢？你喜欢的是那个真实的他么，也许是被包装好或是你一厢情愿的寄托。eason 的演唱会全部在香港，一来工作了实在没有时间，二来今年香港形势不太好，后来的演唱会好像都取消了。 周杰伦自然是一代人的回忆，今年也出了几首新歌，依然很好听，周董的歌，是在任何场合任何心境下都可以听的。 实际上我没有之前音乐付费的习惯，当然这并不好，今年只为两个歌手充过钱，Taylor 和朴树。有些歌充了会员才能听嘛，想听的时候就会充一下会员，然后听一整天，这时候就像和阔别很久的老朋友重逢，心情非常棒。 这一年对于网易云的推荐是很失望的，几乎没有在推荐的歌曲里找到几首喜欢的歌，所以后来都懒得听日推，大概是期许过高，自己实际。 今天特意没有带充电器，就是担心写的太久，100% 的电量到 1% ，键盘敲击之间，记下了 2019 年的一部分，结果终于还是没有写完，拖到了第二天。 不久前刚看了一部电影《地久天长》，里面有一对夫妻，失去孩子之后又在计划生育时期因为被迫堕胎失去了生育能力，夫妻二人觉得自己活着就是为了等待死亡。 平时留给写东西的时间太少，想写、想表达和想要表现的东西又太多，所以每次写完都不是很满意。 还有很多时候，一瞬间想要记下的东西，总是转瞬就消失，虽然不像那些名人作家，或者是伟大科学家，有一些惊世骇俗的想法，丢掉的想法没那么“值钱”，抓不住的时候还是会觉得可惜。 4.视频、直播五、期待往年我一般会给自己定一些容易衡量的目标，期待下一年可以完成，今年不太一样，就像今年的第一条朋友圈：“希望20年大家都平平安安健健康康快快乐乐！”，再简单不过的愿望，但又很难。需要许愿的东西，往往不是通过努力就能得到的，总是带着一点玄学色彩，需要上天的眷顾。 希望新的一年通过自身努力，内心更加强大，可以直面更多困难，不轻易求饶逃避，也要更勇敢一点，敢于表达。 对于未来，其实暂时没有明确的计划，很多时候还会觉得迷茫，希望明年可以看得更清楚。 六、结语如果说起行文的技巧，无论是在哪里学到的几乎都忘得感觉，只记得要真实，有感情，这样的基础上，再加上一些文学技法的修饰，让表述更加吸引人，就再好不过了。 睡前看到何同学的微博，聊了聊自己的经历，我的理解大概是，坚持也许就能成功。 还有一件很巧的事情，在熬夜写这篇文章的时候，刚好收到一位读者的赞赏，更觉得有写下去的动力，征得本人同意之后也分享给大家，认可绝对是最好的鼓励。 活着嘛，最重要开心，随遇而安，有想法的时候就去施展野心，去努力去拼，懒洋洋的时候就蜷起来，做一个废人，间歇性努力，没什么不好。一切全看您怎么想。您开心了，您乐意往前冲了，就撒丫子跑完事了，您失意了，您累了，您找一地跟鸵鸟一样把脑袋埋起来，怎么着都行，就是别跟自个过不去就行。]]></content>
      <categories>
        <category>年度总结</category>
      </categories>
      <tags>
        <tag>年度总结</tag>
        <tag>责任</tag>
        <tag>当担</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019-notes-2]]></title>
    <url>%2F2019-12-15%2F2019-notes-2%2F</url>
    <content type="text"><![CDATA[我们的时间总是有限的，以前是，现在工作之后更是，所以对我而言，目前最珍贵的东西是时间。要把时间花在最重要、最喜欢的事情上。 坦白讲，之前一直以为自己忘不了一些过去的事情，仔细分辨可以发现，其实是因为对现在的生活不满意，或者说现在没有生活，这样就只能求生活了。我们的父辈，也都是这样过来的，更加艰苦的事情，他们未曾退缩过。 时间少，并不意味着生活服务的降级，反而是要做减法，“水落而水出”，就像大浪淘沙一样，这个年纪的人，会有很多想法，时间只能给到最需要的那部分。 睡眠简直不要太重要，前阵子有段时间睡的很晚，整个人不在状态，思考的速度都会慢下来，脑子昏昏的。大写的时候，有足够的时间可以补觉，所以总是肆无忌惮的看各种电影，毕业之后只能克制，尽量挑选口碑不错的电影，当然这样会错过很多好的作品。也要感谢豆瓣，为后来人提供了一些参考，至少过滤了一些严重不及格的“产品”。 每个人大概都会有迷茫的事情，例如为什么努力，为什么活着，这其实是个一直在想的东西，有时候洒脱一点其实很简单，但是如果认真一点来思考就会找不到答案。说起来有点好笑，当初选计算机专业是因为读了一本《乔布斯传记》，觉得很有意思，颇有点雷军当年在图书馆读《硅谷之火》的意思，但说句实话，乔布斯跟计算机专业，其实没有那么强的相关性，我也不是想学什么计算机，只是一时热血想成为乔布斯那样瞩目、传奇的一个人。 也许如果我在那时候读到另外一本很会吹嘘的书，就会选了另外一条道路，同样可以美名其曰因某某而选择了这条道路。但实际上，读计算机专业和成为第二个乔布斯并没有很强的关联性，或者说，成为第二个某某牛B的人，和读该牛B的人的专业，并没有什么必然关系。 《蛙》 莫言的小说，确实很喜欢，高中有本语文课外读物，各种名家的好文章喜欢在上课的时候读，就着老师的讲课声音，看书效率很高，一节课能看几十页。莫言的书，故事性很强，让你愿意竖起耳朵听。 我理解，《蛙》主要在围绕计划生育，围绕着姑姑，讲那个时代的故事。有句话叫做，文人是时代的记录者，是历史的良心。每每看到那些，记录着一个个时代的作品，心理都会由衷生出一种感激，感谢前人的记录，让后人得以超越时空，了解过去。 《奇葩说》 最近娱乐时间，看《奇葩说》比较多，大学的时候虽然在辩论队，其实没怎么认真打过比赛，也不是很懂辩论的意义。当做综艺节目看辩论的时候，似乎才体会到一二。辩论是就一个有争议的事情进行讨论，每个人不管你真实的想法是什么，都要按照你的持方去思考，辩论的过程也不仅仅关乎输赢，重要的时候每个人在整个过程中深入的思考一些辩题，尝试透过现象看本质，无论是讲故事打感情牌唤起人共鸣，还是严丝合缝讲逻辑摆事实，场上的人如何想不了解，作为场下观众，能在其中有感触有思考，就是一次很棒的辩论了。 再有就是，辩论的双方各自有不同的观点，延续到生活中任何一处都是如此，意见看法不同，还是可以面对面的讲清楚，听听不同的声音，接受并允许世界上有不同的声音。 《骡子》 新看了一部电影《骡子》，剧情简单到几乎一句话就能讲完，一个人一辈子醉心事业忽略了家人，等到成为一个70岁的老人的时候，才开始后悔这一切并尝试弥补。当然，这其中还有很多情节和故事，我一向不喜欢用几句话概括一部书或者一部电影，除非真的很烂。 大家越来越知道，人不再只有一个形象，人本身是复杂的，在不同的阶段，不同的时间节点，想到的看到的和做的事情都完全不一样，所以理解每一个人都要用动态的眼光去看待。人是这样，很多别的事情也一样，尤其是好的电影，里面的内容很多，不同的人，接收到的信息也完全不一样，专业的影评，了解相关事情的人，第一次接触的观众，等等。让不同的人，知识文化背景相差甚远，仍然可以产生共鸣，就是所谓的佳作了。 《圆桌派》 有两集印象比较深，有一集请了姜文， 还有一集请了 《孤独的美食家》 《庆余年》 这部剧跟朋友安利过，最近也一直在追。其实小说很早之前看过，猫腻的书也看过几本，但都是囫囵吞枣，图个过瘾。 当年看小说很痴迷，过年那天晚上家里人一起看春晚，我抱着一本小说在看，把我爸一顿批，“书也有三六九等，你这看的是最下等的书”，想想也有道理，虽感到羞愧，但一时面子上挂不住，还是要继续看，但后来还是慢慢抛弃不再看那些没有多少意义的“爽文”。 就像《庆余年》和猫腻，当年看的时候觉得不起眼，觉得自己和作者以及书中作者都是屌丝，大家臭味相投，一起凑个热闹，可现在看来，猫腻以及有好几部书翻拍成电视剧，俨然是成功人士，而当年看书的我们，多数还是屌丝。所以改编翻拍的时候，很多不合时宜的自然删掉，有些人物刻画不细的地方，也慢慢补上去，总的来说是个不错的作品。 想家 工作之后，家里的一切都变得很美好，经常想念家里的糍粑挂面，腊肉炒 蒜苔，胡萝卜炖猪蹄，青菜滑肉汤，水煮荷包蛋，等等等等。 鲁迅有百草园 注：封面图是《庆余年》海报。]]></content>
  </entry>
  <entry>
    <title><![CDATA[随手记]]></title>
    <url>%2F2019-12-14%2F2019-notes-1%2F</url>
    <content type="text"><![CDATA[聊聊妥协、动力、独处、讲究和拖延症。 妥协长大就是不断妥协嘛，一开始是跟别人妥协，后面是跟自己妥协。 说一千道一万，咱就是一普通人，偶尔也会做做梦，在象牙塔的时候大家都是做梦，梦游的人碰到一起就会聊一些比较虚的东西，“啊，你看，他这个梦做得不错，要多学习”，出来以后，烈日灼烤，朋友也少了很多，自由自配时间少了很多，快乐自然也少了很多。 因为你要工作嘛，你总不能天天做梦，总是聊一些甜甜的东西，工作是很苦逼的，这没有人反驳吧？除了你老板。 以前觉得，哎，写代码我还挺喜欢，我做的是喜欢的工作，我真棒。是，这观点没错，关键要看度，一周七天，你六天放假，一天工作，这叫“爱好与工作齐飞”，反过来就只能叫“你和你的工作在天上飞”，工作五天也一样，不特指单休。就跟最近《奇葩说》的辩题一样，伴侣的梦想是当个咸鱼，说的就是最近的我。 看过一个鸡汤故事，不知真假，是说有一种老鼠，喜欢囤积食物，在野外食物不足的时候如此，在实验室食物充足人工喂养的条件下也如此，跟我有点像。我就特别喜欢思考，希望瞎想瞎琢磨，给自己找焦虑，俗话说叫没事找事，吃饱了撑的。怎么说呢，具体而言，就是说我，喜欢居安思危，不安分，想得多。刚一工作想着买房的事情，我一想到要工作好多年，头都快秃了，还得把钱交给那些炒房子的，才能有个自己的栖居之所，就觉得气愤，没错，是真实的气愤。 现在的社会是有问题的，很多年轻人，如果没有点魄力和家庭条件，是不足以谈幸福的，你别扯那些小确幸，简简单单一个房子就能压死一堆人。最主要吧，我是觉得不值得，不是说真的就买不起，其实也买不起。魔都这房价，啧啧。但是你想想，干嘛啊，每天累个半死，就为了一个破房子，一旦背上房贷就被套牢，你根本不敢张牙舞爪，活不出自己的性格，小人物的心酸啊。 我看过很多好电影，拍过去一代人几代人的生活，小人物的难处，人生的浮沉、挣扎和努力，真实，发人深省，但是很少看到有拍的特别真实的，反应现代年轻人困境的电影，如果有，请推荐给我，谢谢。人要的不只是活着，存在感、幸福感，这些都是一个有些有肉有情绪的人需要的。 前几天看到一篇文章，在上班没来得急看，说是国家发文，要鼓励带薪出游，好嘛，我举双手赞同。消除贫困是国家大计，这不用提，但是年轻人的生活质量，尤其是在一线城市的年轻人，该如何保障，想来绝不是咱在家蒙头想能解决的，一定是需要党和国家的支持，帮助改善，破除困境。 现在无论谈什么都讲究一个相对，讲究一个动态发展，有个词叫幸存者偏差，用在这里貌似不太恰当，这种情况下可能应该叫“不幸者偏差”，在我这样一个“不幸的人”眼里，可能只看到自己所处的群体面临的问题，外面仍然有很多问题亟需解决，而很多问题往往不是某一个个体，能够简单突破现在的社会体系和价值观可以做到的。 当然，咱还是热爱生活，热爱生命，向往美好，只是希望，美好的东西更多一些。 动力我一直是个缺乏动力的人，做事往往需要激励和看到实时效果，一旦缺少反馈，就会动力缺失。 比如最近一段时间，就严重缺乏生活动力，一时间不知道为了啥奋斗，这也很常见，过一阵子就好了，实在不行咱是 90 后嘛，最擅长的就是撂挑子环游世界，手动滑稽。 希望尽快找到生活源动力，享受到生活，早睡早起。 独处小时候一个人在家，晚上天黑之前门锁一定会再三检查，害怕啊，外面有风吹草动都会紧张，每年猫发情的时节更是恐怖，那种像极了小孩哭的声音，在空旷的夜晚几乎是钻到你脑子里，蒙在被窝里都不难躲避，所以很长一段时间睡觉绝不关灯。 有时候，上了床一时又睡不着，就想了很多打发时间的方式。 第一个就是收拾房间，虽然平时大大咧咧，东西乱丢乱放，但是本质还是个处女座，喜欢那种要命的整洁。所以不收拾则以，收拾起来就是大费周折，收拾一圈，也就困得差不多，倒床便睡了。就单拿抽屉来讲，抽屉里的东西，一定要分门别类，按照特定的规则分类摆放，所以每次一定是全部倒出来，像玩扑克牌一样，按照类别摆放整齐，然后再放回抽屉。 可惜的是，我擅于归类，但绝不擅长长久保持，不出一周时间，定又乱了起来。这一点，到现在也是如此。这里我愿意甩锅到母亲那里，母亲在家的时候，对我百依百顺，几乎要宠坏，宛如“公子哥”，直到现在，我的衣服、鞋子和随身物品，都是母亲在归置，我一概不需要操心。 所以说，基础的生活技能我一定是有的，洗衣做饭之类的简单事情自然不在话下，各种脏活累活也从不挑剔，但母亲在的时候，就好像摇身一变成了“智障儿童”，衣来伸手饭来张口，绝无切换延时，几乎是从进到家门的一刹那就完成了身份转变。以前只是享受着这种待遇，似乎从没有仔细考虑过。 其二是看书，无论什么书，只要是书就拿来翻，不为学知识，只是打发时间、解解闷。家里的书也不少，一楼二楼散落放着，先是抓着一楼的书看，拿到手之后随便翻到一页开始看，等到随便打开一本书，随便翻开一页，发现已经看过之后，就到二楼去翻书。父母在书这一点上，意见高度一致，除非绝无用处，不然绝不会卖掉。小学到高中的课本、练习册，几乎一应俱全，当然，可惜的是他们没有我处女座的优点，很多书只是随意的堆在墙角，跟我上学时候的书混在一起，并没有很好地分类。每次去找书都很头疼，随便抽出一本，伸长手敲掉书皮上落的灰，大吹几口气捧着去楼下。 挑书是个看运气的活，有时候选到一本不错的散文集，可以反复读好几遍，有些书不行，读起来没劲，比如不知道哪来来的武侠杂志，要么是故事乱写一气，读完云里雾里，要么就是故事还行，可惜是连载文，像我这样的懒人，绝无可能去每期追寻。 古人讲君子慎独，意在防微杜渐，没有人监督的时候，个人的缺陷、不好的地方，会暴露的更明显，所以尽量避免这种情况。慎独是为了避免做错事，我的慎独是不愿意一个人。每个人都会认识你的某一面，只有你认识自己的所有面，最知道自己的缺陷面，了解自己的无趣面，总之一切不完美的地方。独立面对自己，是件很容易焦虑的事情。 小时候一个人，打发时间一般是通过归置物品和看各种乱七八糟的书，现如今似乎还没有找到独处时候的消遣手段，这里我绝不愿讲一些做作的话，音乐读书写字为了陶冶情操等等，多数也是消遣，静心，不至于焦虑。 讲究语文上的讲究。 现在人们都不喜欢讲究，打字快错字多，偶尔有手误自然可以理解，但是有些明显的语法错误，每次看到都想凑到面前手把手纠正，我这该死的处女座。 举几个常见的例子，“您们”，“您”本身就是“你们”的意思，每次看到“您们”都想跳出来指正，又怕有人说你这人怎么认死理，我爸就是不知道人情世故的“反面典型”，我不能像他一样。 再比如这一句，“前面的同学已经说得很好了，我这里就不再过多赘述”，“过多赘述”，听起来没什么毛病，实际上是成分赘余，听起来就很奇怪。还有一个很普遍的东西，“的”、“得”和“地”，这几个词，大家都是混着用，包括我，其实严格讲不行。这里搬运一下知乎帖子： 还有一个我自己的例子：每年过年都会贴春联，虽说我们家仪式感一向不强，但是面对这件事，从未都是打起十二分精神。一般都是母亲买春联，我和哥负责贴，贴春联嘛，就是体力活，闭着眼睛贴就完事了。有一年打发我去买春联，回来贴的时候有一副小春联，写四个字“百无禁忌”，我差点随手贴在了厨房，后来被家里人叫住，说这个一般是往年贴在牛栏猪圈之类的地方。如果这里没有留心，可是要闹大笑话。 这些多数都是高考语文的前几道选择题，大概是考试考多了，对这些尤其敏感，更不用那些用错成语、乱用标点符号的，听到后简单想跳起来说你这里用错啦，来来来我给你纠个错。 当然啦，这些都是吃饱了之后才考虑的事情，生活有保障，活得开心之后，才想着活得更好的事情，也不需要事事较真，虽然你名字里带了一个“真”字。 拖延症拖延症这件事情，在写东西上面表现的尤其明显，慢慢也想开了，拖延就拖延呗，总比没有好。 前段时候QQ邮箱出了个“写给一年后的你”活动，当时毫不犹豫写了“希望你快乐”，19年快结束了，也就这样了，只能寄希望于20年会过得更自由，更开心。 还有一点，之前东西发到一时博客网站的时候，写什么都可以随时发上去，后来用公众号之后反而很少发，总是想，这些东西写出来叫大家看到是否合适呢，又加上负面情绪居多，纠结之后往往作罢，所以越来越少。 其实还有很多东西想写出来，有些已经落到文字，有些还在脑子里，有些一闪而过没有记下，表达始终是人的刚需。 最近写自己，都是阴暗、消极面，写出来之后是畅快的，毕竟现实生活中我以开朗性格为人熟知，大家都不愿意别人觉得自己是个消极沉沦的人——至少我不希望。前段时间出去玩，一群陌生人面前的自我介绍是：“我可能天生是个悲观消极的人，但是后天努力克服了这些不好的情绪”。 文中图片：https://www.zhihu.com/question/23579160]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小米手表初体验]]></title>
    <url>%2F2019-11-14%2Fxiaomi-watch-1%2F</url>
    <content type="text"><![CDATA[写在最前面：目前来看，iOS + 小米手表 = 阉割版 = 大号贵版手环，由于暂时有没有配套的小米穿戴 APP（还在开发中？），所以 iOS 用户慎重入手。 你可能会问，iOS 用户为什么不用 iWatch，那个体验肯定最好啊，但咱毕竟是年轻人嘛，穷！ 所以退而求其次，选择“为发烧而生”的小米，苹果家的东西，溢价实在太高，不划算，不能惯着。 首先是外观，这个肯定是最重要的，结论是还不错？比手环大很多的屏幕也让通知之类的文本信息看起来更舒服，虽然实际没有人用手环看通知。 接着聊聊最重要的系统，因为没有完整的APP，暂时只有一个基础版的Wear OS，简陋到只能换换表盘这样。 看起来不支持企业级的WiFi]]></content>
      <categories>
        <category>科技</category>
      </categories>
      <tags>
        <tag>小米</tag>
        <tag>手表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[写在正式工作半年之际]]></title>
    <url>%2F2019-10-31%2Fsummary-of-last-4-months%2F</url>
    <content type="text"><![CDATA[封面图是一次下班，猜测是一个小姑娘拉着路边执勤警察求合影。感觉 写在前面：本来是上个月开始动笔的，一拖快一个月，今天就整理一下发出来，也算告一段落，不然总想往里面加点东西。 刚来公司的时候，leader 和我聊职业规划的事情，其中提到最重要的是要我以后多问为什么，几个月之后回过头来看，确实非常有道理。无论是技术，还是业务，多问一个为什么，都可以避免很多潜在的问题，帮助自己跳过一些踩到的坑。 工作之前写代码很多时候是从 0 到 1，自己从头开始写，什么地方都很熟悉，工作之后经常要接受别人的项目，或者在别人的基础上迭代，有些地方。 技术还是要抓紧时间学，目前来看，日益增长的业务需求和缓慢增长的技术实力是主要矛盾，黄老板在“画饼大会”上也提到，要让自己成长的速度跟上公司发展的速度——当然他当时是对管理层说的。 最重要是搞清楚目标，工作的根本目标还是线上指标产出，时刻记清楚这一点可以少走弯路，经常跳出手头的事情，多思考，有时候走了弯路，走了很久还没有意识到，要给自己思考的时间，冥想也是不错的方法，看看有哪些地方可以做得更好。 划分工作边界，搞清楚，哪些是自己要做的，哪些是需要别人协助解决的，搞清楚主要矛盾和次要矛盾，好钢用在刀刃上，主要精力放在最关键的地方。 靠谱，做事的时候带着脑子，就像下象棋，凡事多想几步，在这一点上，我一向不是很擅长，所以下棋经常输。 深度学习，虽说是玄学，总也有一些规律可循，努力打好基础，找找规律。算法岗，目前还是实验科学，合理的实验记录很重要。 一个听来的笑话：在相亲届，程序员就像大学食堂里面的饭，虽然不好吃，但是如果你来晚了，还真没有了。 一切事情都需要 double check，刚来的时候习惯假定一切都是正确的，自己是在一些正确的基础上做一些后续工作，但事实是需要先 check 接受东西存在的历史问题，弄清楚每一个流程，fix 一些遗留问题之后确定一个 baseline，然后再开始迭代。还有就是要对自己的产出、结论负责，做事认真。 沟通真的真的很重要，一方面了解真正的需求是什么，确保自己没有闭着眼睛跑偏，另一方面也搞清楚问题在哪，有问题一直闷头自己搞，耽误时间且效率低。 我司很多地方基础设施比较差，手工的成分很多，有时候很头疼，需要手动 check 的点比较多。leader 说阿里的观点是大材小用：“招最优秀的人，做最细致的事情”，所以阿里经常会出现好几个人同时做一件事的情况，我司还比较粗糙，很多地方人手不足，只能一方面提高效率，倒逼自己。 不要怕犯错，只有犯了错，才会意识到哪些地方有坑，下次避开这些地方，当然，也要不断减少犯错。 积极培养独立思考的能力，自己给自己安排事情，有自己的主见，不要盲目亦步亦趋。 关注最核心的部分，尤其是接触新的事物，但也要抓好细节！不知道在细节上吃过多少亏，细节的地方没有抓紧，出错的时候后悔莫及。 做好项目排期，因为我司培养体系的匮乏，很多大公司比较看重的流程统统没有，直接开始干活，所以很多规范化的东西比较欠缺，合理的规划对于自己，对于依赖自己的项目，都比较重要。 接受失败，接受进度不符合预期。我绝对属于要强的那一批人，一开始误导误撞，做了一些成果出来，后来慢慢要做一些更深入的东西，甚至于独立去推动一些事情的时候，还是会暴露一些问题，把控的不好，一个月结束，看起来做了踩了很多坑也做了很多事情，但是在线上指标上没有直接收益，一度觉得很失落，积极性也不足。站起身子想一想还是要接受一些简单的小失败，毕竟不是每一次尝试都会有正向的收益，时间还长。 刚来我司的时候，周末的时间还是多姿多彩，活力四射，最近事情莫名其妙的很多，还永远做不完，对自己也是极大的考验。 但是总归我还是一个对技术充满热情的小小程序员，依旧认为学习新东西是一种快乐，也希望自己不忘当初选择这个行业的初心。 当然，最重要的一点是，要把工作和生活分开，健身、美食、电影、游戏和其他的所有或好或坏的兴趣爱好，还是要花时间享受，不能一口气全部扑在工作上。 最后再聊聊一些工作以外的事情，一直很感兴趣的爵士，踌躇良久还是觉得这个作息再去学舞蹈就是自己搞自己，再有就是摄影，刚开始，还是没有时间，总觉得取不到好的景。电影和书因为门槛低，再加上宅本身低便利性，反而看得更多。下班路上有一个小广场，很多人在那里玩滑板，很是心动，等最近这段时间忙完试试看。至于说吃的，必须说来了这边真的委屈了自己的胃，我司的盒饭，谁吃谁知道，难吃到飞起，只能周末去“今天吃顿好的”。 工作之后，一下子就很喜欢怀念，经常会回忆起小时候的事情，姥姥家的红薯地和屋后的大水库，母亲做的滑肉和荷包蛋，家门口的竹林和池塘旁边的大桃树。不仅喜欢回忆，还有很多表达和记录的欲望，记录自己身边的事情，记录身边的人，简而言之当个业余作家，哈哈，也许我该去投稿。 一直断断续续在备忘录里记录着这些，也许有一天，我会出一本没人会买的书，就叫《阿真小时候》，里面没有顺序，按照回忆来写，一件事、一个人就可以写一篇，册子里不需要照片，读到文字就可以在脑海里想象出画面，你们一定会被我逗笑。 对了，忘记说了，我换了一个公众号来写东西，两个都是自己之前申请的，【一时博客】不能留言，所以换到这边，欢迎关注，不定期更新。]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[写作杂谈]]></title>
    <url>%2F2019-10-19%2Fabout-writing%2F</url>
    <content type="text"><![CDATA[对于作家，我有一种说不清的情感，也是最近才发现，我从出生到现在，似乎从未实际见过什么作家，未能有机会当面请教一些一直以来的疑惑，也许有一天我应该找几位专业人士，仔细请教。大学读了计算机，跟这类文科专业更是背道而驰，也没能接触到相关的内容。 对于写东西这件事，我的热情从未削减过，总是断断续续在写，但是我有一个坏毛病，喜欢删东西，写完的东西隔一阵子就会删掉，好在现在克服了这个问题。人做任何事情，都需要激励，没有外部或内在的激励，很难坚持，也很难真正有所成，而我又一向羞于向人提起这件事，如果有人当面问到，更是要急忙扯几句有的没的糊弄过去，避免尴尬，所以一直当作一个隐秘的爱好。 喜欢写东西的原因很简单，它可以表达，可以记录。前者是情感的宣泄，后者是对事实的刻画。随着年纪增长，想记住的东西越来越多，记住的东西越来越少，这时候写作就成了好帮手，它能让时间变慢，让过去变得清晰。如果有一天什么也没有发生，你会怀疑这样的一天是不是存在，你会疑惑是不是有人悄悄换走了你的生命。 写作这件事情很难，首先是文笔，文笔这种东西，在我看来，只有多读书，多与人交流，多了解这个世界，多锻炼，才有好的文笔，才有机会写出不一样的东西。用文字表达自己，这不难，念过书的人基本都可以，但是有些人写的内容你愿意看，你乐意看，看完还想和作者说一句对对对，甚至说说自己的感受，有的你觉得就是写得好，写的真诚，作者是带着感情、带着情绪在写这些，把自己心里的话写出来，看这些文字的时候仿佛是面对面，一个人再给你讲故事，还要给你招呼茶水，叫你听的更舒服些，听到精彩的地方，你忍不住合掌：“嗨，可不是吗！怎么能够这样呢？世上真有这样的事情吗？我之前可从未听说过。你说的这个我知道，可我之前从未注意过”。 再有就是风格，你的文字是否有自己独特的风格，辨识度高，让人印象深刻。有些书、电影，看到一半，你会自然猜想，这是不是谁谁谁的作品，去查一查，果不其然，大概是就是这个意思。也有人不愿意一直是一个路子，喜欢风格多变，不断突破自己，尝试新的东西，这种人是幸福的，不断体验未知的事物，绝对是人生一大快事。 写东西，总是要言之有物，有些人看见好风景可以吟诗作对，到了名胜古迹可以凭古吊今，而有的人只会说一句真好。抒发情感的方式，高下立判。但只要能感受到美，那就是值得的，最怕你已经麻木，无论是景、人，都无动于衷，接受不到美的信号，美对于你而言，已经失去了意义，人生在世的快乐就少了一大半。 人类的历史已经很久很久，从古到今，不知道多少人，写过不知多少文章，提笔开题的时候，难免出现想法重复，立足点冲突，甚至思想一致的情况，这就要求不断推陈出新，写出自己的观点，否则只是拾人牙慧，一味堆砌，后人读了也觉得乏味，所以要求你脑袋灵光，思维活跃。无论什么事情，聪明的人，总是可以做出不一样的东西来。就我本人的情况来看，从小母亲就用笨鸟先飞的故事教育我，也算养成了完事提前计划的习惯。当然，我很长一段时间里，我并不认为自己是那只笨鸟，但还是习惯了先飞。 很多作家，让我佩服的地方在于，敢于写最真实的自己，敢于刻画、对话最真实的自己，敢说真话。人总是各种原因会思前顾后，记得有位作家写自己身边的一个人，后来原型人物找上门理论说，“为什么把我写成这样？你得给我改回来”。我也有这样的困惑，有时候不敢写，或者是加工后再写。有些作家、编剧会把人物加以割裂、糅合，来自不同人物原型的特点，糅合成为一个复杂真实的人物。避免了一味纪实，又有文学加工。 写好别人不容易，写自己更不容易。敢于面对最真实的自己，是一种极大的勇气，拿笔记下最真实的自己，就是更难得可贵的事情了。对自己进行拷问，对自己的所作所为、言行举止进行审视，要知道，从古至今，认识自己本身就是一个极其困难的过程。有些人靠镜子认识自己，有些人靠朋友了解自己，有些人靠自省认识自己，每一种维度，都是一个自我，外在、朋友眼里的自己、内心世界，都是自己，但大家往往不能综合好这些个维度。就像每个青春期开始照镜子的少年，都会希望自己能够更加完美些，甚至有些人因为不满意自己的某些方面，拒绝照镜子、不敢照镜子。 对于作品而言，欣赏是自己的事情，对于一些刚开始接触的人，可能需要有一些引导，例如赏析，但是文章的创作和文学批评的再创作，其实几乎是独立开的。写书的人，当时如何想，和看书的人如何想，是割裂开的事情。很多时候人们会问作者，某某事情是我理解的样子吗？某某和某某到底有没有感情呢？作者的回答往往是，你觉得有，便是有，也有作者说，某某事情是我理解的样子，你理解的不对。但实际上，当你的作品问世，你的作品就不再是自己的“私有财产”，而是所有人都可以通过自己的理解、想象进行“再创作”的基础。 大家总说，为自己而活，不要为别人活，这太难办到了，我也曾这样想过，但是我的性格，似乎注定做不到，也许有一天我会真正想明白这一点，可以抛下一切，去做一些真正有意思、有意义的事情——对于我这样一个平凡的个体而言。 我很认同一种观点，人生是一场大型的游戏，你是唯一的主角，对于每个人而言都是如此，只是某个人扮演的角色不太一样，当你生命结束的那一刻，这个世界对你来说，就算是谢幕了，这场游戏也结束了。 当然，这样讲并没有任何鼓励轻视人生，轻视生命的意思，反而应该更加珍惜这唯一的生命，用游戏的心态，选择自己扮演的角色，用心体会这场游戏。 人类无时不刻不在思考生命的意义。有些人很快找到自己追求的目标，将自己的一生投入到他认定的这件事当中，这种人值得敬佩，我也很羡慕，但是到目前为止，我还没有找到一个能够让我愿意奋斗一辈子的事情。我相信，一定也有很多人，终其一生也没有找到自己的所谓目标，甚至有些从未思考过这个问题。我是谁？我在哪？我要到哪里去？这些问题对于他们并不重要，依靠一些技艺和本能，也可以过的很好。也许偶尔也会想要探究这些问题的答案，但是转眼就迫于生活压力，说一句想那么多干什么，要么因为别的原因不再深究。 思考人生的意义，思考了没有答案，思考了有答案，没有思考没有答案，没有思考有答案，这四种情况，究竟哪一种好，哪一种坏，哪里又有什么标准答案呢？ 从小到大，我们会接受一套社会普适的价值观，告诉我们要好好学习，懂得礼义廉耻，要努力赚钱，长大了做有用的人，等等等等，这样一套东西，已经浸染到了每一个角落，社会也确实因为这样的正能量有意义的东西，变得更好。但有时候也会有一些不太好的地方，就好像给了我们一套衡量标准，例如衡量一个人是否成功，我们会不自觉的用这个人的财产、创造的价值、知名度等等去评价。一旦有了标准，有了比较，就会出现分级，出现不同级别之间的挣扎。 小时候成绩不好，你会因为这一套标准觉得自己做的不好心情不好，长大了“混的不好”，你会觉得不开心不得志。更好的教育会告诉你多样性的存在，你会有很多别的事情做得比别人好。人生的价值也不仅仅在这些地方，但是当你抱着这样的心态重新出发，会发现好像自己成了阿Q。“众人独醉我独醒”的豪气在这个时代已经不复存在，一滴墨水滴进杯子可以很快染色，一瓶墨水倒进大海又会怎样呢？还是要跟着规则，做一些既定的事情。 到现在这个年纪，还是会觉得自己一直在随波逐流，到了一个年纪段，参照身边人做的事情，做一些看起来理所因当的事情。就像工作，身边的同学，毕业后大部分无非就是工作、读研、出国和一些别的等等，随便从其中挑了一个看起来比较不错的就开始了社会生活，发现并不 OK，生活太苦。 你喜欢浪漫自由，一间房子就可以让无数年轻人的志向湮灭，终身背上房贷。就像很多媒体说的一样，都说大家相较父辈生活质量提高了，但好像他们那一代人，盖一栋楼房还没那么难，至少有所居。现在一个个社会精英们，却要花费自己的大好时光在一间房子上面，可怜。可怜的人里，也有我，每每想到这一点，都觉得无趣。 但是跳出来有那么简单吗？早已经身为棋子，被下到了这盘大棋里。 工作并不有意思，会有很多负面情绪，也许之后还会有更多，我的路是不是已经固定了呢？努力工作，结婚生子，养家糊口，成为一个苦闷无趣的中年人，这些过于长远的担忧，偶尔也就困惑着我，而且这种时候，你会产生一种无力感，你无力改变，无法逃脱。 但生活还要继续，知道这些会怎样呢？并不会怎样，依旧被生活毒打，但是也许，可以借此，写一本《生活毒打笔记》。]]></content>
      <categories>
        <category>写作</category>
      </categories>
      <tags>
        <tag>写作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[村子里的童年]]></title>
    <url>%2F2019-10-19%2Fsummer-in-grandma-home%2F</url>
    <content type="text"><![CDATA[那一年我八岁，成了别人口中的“留守儿童”。 仔细回想起自己的童年，发现印象深刻的事情，几乎全都是痛苦的事情。脏兮兮看着就像巫婆的、一点不疼自己的奶奶。我不喜欢奶奶，因为 她不喜欢我；我不喜欢姥姥，因为我不熟悉她。我想念陪我长大的母亲，但她用一个小小的幌子哄骗了八岁的我。 八岁的我站在凳子上自己炒菜，来往路过的行人看见了都夸赞我，过年父母回到家里，别人将这种荣誉送给他们，他们谦虚的让给我，说这孩子独立，懂事的早。很多年之后我才知道，我本可以不需要那么懂事，也不需要那份夸奖。 有记忆以来，对姥姥家的第一个印象应该是响彻整晚的哭闹。 每年正月，大姨三姨四姨和老姨（母亲排行老二），大舅老舅，无一例外都是要去姥姥家拜年的，通常来说，这也是整个大家庭一年一度的团结日子，平日里没有大事是断然不能聚的这么齐的。所以一到姥姥家，母亲就忙着姐妹兄弟们叙旧话家常，同时加入做午饭的队伍，我自然被搁在一边，自己玩耍。 几个姨家的小孩，那时候好像还不太熟，小孩子嘛，没那么快玩到一起，就自告奋勇去厨房削皮，削什么东西忘记了，只记得那个削皮刀很蠢，怎么都不得法，姥姥削得好好的，换我来就是不行，只能放弃，抱怨一声不如我家的好用。白天自己玩一玩就过去了，转眼到了晚上，我好像突然意识到这不是在自己家，仔细想想，那极有可能是我有记忆以后第一次在别人家里住，小孩子表达对陌生环境抗拒的方式很简单，那就是哭了，哭天喊地，连姥姥都忍不住说，这小家伙现在就这么能折腾，将来还了得？ 现在的情况看，姥姥的话没说错。 上面说的应该是冬天 ，而且只是冬天里的一天，对姥姥家更多的印象还是夏天。 我妈不知道什么情况，想到暑假把我送到姥姥家去，而且一送就是一个暑假，这在当时的我看来就是个愚蠢决定，因为那时候我跟姥姥姥爷并不熟，也并不喜欢那里，但是我搜肠刮肚也没想起来当时为什么没有拒绝或者反对，大概是因为小时候我是出了名的乖孩子，习惯性服从，也许有些长大后才认识我的人并不相信这一点，但我以老家客厅上的十数张奖状发誓：这是真的。 暑假那会，我家的水梨刚好熟了，提前几天摘了果子，挑了一些个头大、卖相好的装到一起。大舅来接我，用摩托车把梨和我一起接到了姥姥家。路上并不顺利，一个上坡的时候，扎了一颗钉子爆了胎，折腾了一会，叫了修车师傅补好车胎之后才到家。大舅用他特有的带着浓厚鼻音的腔调半开玩笑说，你家这点梨吃得不容易呀哈哈哈。 那时候我初开始懂事，懂得尴尬，却不太能分辨玩笑和非玩笑，这是最尴尬的阶段，别人讲一句什么都要想一想，虽然也想不明白什么，后来很久之后才明白，其实我根本不需要想——我毕竟还是个孩子，没人希望从我那里得到什么回应，大人们讲的话，多半都是在逗你。 仔细想想，也许起因是母亲觉得在家里当临时老师薪水太少，准备出去和父亲汇合，一起谋出路。所以那年暑假有一天突然问我，老儿你爱看电视吗？我头都没转就说喜欢。接着母亲又说那你想不想一天到晚看电视？我站着大桌子旁拿着遥控器还是点头。接着母亲就拉着我跟我商量说，妈妈明天要走了可不可以？让奶奶过来给你做饭，你以后每天电视想看多久就看多久。我可能是稍微想了下就说好啊。 毕竟在那之前，我每天只能看一到两个小时的电视，而且电视台的选择权完全在我妈手里，上学回来，要先写完作业，然后出去玩到天黑回来吃饭，吃完饭一起看新闻联播，再看一到两集电视连续剧，最晚只会到焦点访谈。接着和母亲一起在凉席上算数、学语文之类的。当然我必须得承认，母亲在教育这方面，绝对是有心得，至少当时的我一直是非常有兴趣、有动力的，也是非常热爱的。 所以我听到说可以一直看电视就非常开心，根本没有去想母亲说的要走了是什么意思，或者代表着什么。听到我没意见甚至还有点开心，母亲好像有一种“计谋得逞”的笑容，也许是带有一丝愧疚的欣慰。 第二天早上醒了之后，发现母亲不在床上，去客厅、厨房都找了看不见人，那时候我好像才真正意识到，母亲说的每天想看多久电视就看多久是什么意思。人生中第一次因为想念一个人而不是别的什么情绪、发了疯一样哭着跑着喊：“妈~ 妈，你在哪啊，你回来啊，妈~”，这种伤心我现在还能体会到，虽然那时候我才 8 岁。大概是中午的时候，我哭累了，奶奶来了，现在想想，当时的我有点像败军撤退时候被放弃的伤员，奶奶的到来更像是“接收旧部”。 奶奶有一部诺基亚，这边我和父母联系的唯一途径了。奇怪的是，我应该很想他们，却很少主动打电话，大概是因为电话在奶奶手里，而那个时候的我，并不喜欢她。 奶妈是那种看起来就很邋遢的人，过于肥胖的身体，看上去显得笨重，衣角油的发亮，沉着脸，相信我第一眼上去你就知道不是个好惹的角色。 爷爷去世的早，家里对于他唯一葆有的记忆是一种他推着旧式自行车的老照片，可惜的是因为家里的几次搬迁，旧照片也不见踪迹，于是连这样一张照片也只存在于回忆中。 有时候也想问父亲关于爷爷的事，但是那他时候也很小，只记得爷爷很严厉，别的也是说不上来。我还小的时候，从没想过和奶奶聊这些，长大后回去问起奶奶，似乎也没有得到什么答案。 只从只言片语中知道，他们算是“师生恋”，年龄跨度还比较大，当然，爷爷去世是因为疾病，去世的时候还很年轻。 父亲、老爹和姑姑是奶奶一手拉扯大，所以实际上奶奶年轻时候很辛苦。如果父亲早点跟我讲这些，也许我会对奶奶多几分尊敬，小时候跟她一起生活的时候也不会那么强扭。 其实说起来，我和奶奶不和，是有母亲的原因的——也许我写到这里，父亲又要和母亲吵一顿，他们总是喜欢抓着这个问题不放。母亲和奶奶的关系，一直没有那么好，或者说，奶奶和两位儿媳的关系，一直没那么好。如果是以前的我，也许还会补一句，“她本来就惹人厌”。 至于为什么婆媳关系不好，也许是因为奶奶不喜欢我，至于为什么，并不清楚，不过有从母亲那听来的例子可循。小时候我被放在门口的藤椅里，也许是没人看，小孩子就开始大哭，相传奶奶路过看着我哭，径直走了过去，连抱都不抱一下。 有时候我会想，如果我母亲当初选择出门，我现在一定是个妈宝男。小的时候，就像每一个母亲一样，她把我保护的太好了，家里的时候不用说，一切起居都有母亲照看，去了学校，母亲也是学校的代课老师，甚至于还是我幼儿班的启蒙老师。 时时刻刻都能感受到这种爱的存在。冬天上学，我起得晚，母亲有时候赶时间就拿沸腾的开水冲上两个鸡蛋，再加上糖，作为早餐，后来我才之后，这种吃法并不多见，也不是所有人都能喝得下去，近些年反倒有些人长尝试起这种吃法，说是健康营养。 我妈那时候也是这样觉得，一直吹嘘我的身体好，从来没打过针，就是因为每天早上喝两个鸡蛋。其实很多时候，我也会很费解，母亲的节约似乎是天生的，例如我每天的两个鸡蛋一定会保证，我喝不下的，才是母亲的早餐。所以有时候我喝的很快，几乎一口气喝完一整碗的时候，母亲会跟我抢着碗给我留点给我留点，那时候我听到这样的话，喝的更是起劲。 那时候方便面还是一种很不错的面食，早上煮两袋泡面，加两个荷包蛋，再放点青菜，简直就是人间美味，回想起来，好像也是我吃完了面，母亲喝面条，捞剩下的碎面。 在学校吃午饭的时候，老师们都在一起，其中我的数学老师姜老师问，曹真，你知道为什么你妈把肉给你吃，自己不吃吗？我说“我妈不喜欢吃肉，她跟我讲的”。同在一起的老师们哄的一下就笑开了，那也是我第一次开始思考，母亲说的不爱吃肉，是不是还有别的含义。 母亲的个性和姥姥是分不开的，姥姥个子瘦小，精明能干，笑起来特别和蔼好看。小时候暑假刚去姥姥家的时候，虽然不熟悉，但是每次姥姥一笑，都会觉得很温暖。 中国人是羞于表达情感的，尤其在言语上羞于表达。母亲曾经说奶奶不喜欢我，所以我下意识里觉得姥姥姥爷也许也并不喜欢我，我从未问过他们，也从未想过问，所以当我一个人被接去姥姥家过暑假的时候，就像是一个 8 岁的林黛玉，进到了贾府，处处小心。 当然，后来和奶奶的相处经历告诉我，她绝对是爱她的每一个孙子的，自然也包括我，甚至于快到了她生命终点的那段时间，她变得尤其依赖我，仿佛成了她最宠爱的那个孙子。那个记忆里一开始凶巴巴的老太婆，最终变得越来越老，老的开始需要拄着拐杖，老的开始盼着我每个月回家，老的我稍微走开就大声叫我的名字。 奶奶是那年正月初一去世的，想起来似乎已经过了很久很久，久到记不得当时有没有哭，如果我哭了，一定哭的很厉害。 我不会经常想起这个老太太，但是有几个场景，却一直印象深刻。一个是第一次被奶奶打，那时候我还和奶奶在闹别扭，那天下着大雨，家里的水稻需要用塑料布遮盖，我一直在屋里看电视，不愿意出来，后来被扯着教训了一顿。还有奶奶做的黑暗料理，熬腊菜，腊菜是用一些肉汤加上咸菜，反复的熬煮，老一辈的偶尔会有人喜欢，我从来没吃过。奶奶有两道菜，是我很喜欢的，不过也都是很简单的菜。一个是蒜苔炒肉，一个是鱼丸，似乎只有奶奶做得出那种味道，前者是提前炒好，带到学校里吃，后者是冬天的时候，用一个旧式小土罐，小小火煮出来的鱼丸，至于为什么小小火，大概是因为奶奶不会烧火，所以做什么菜都是火很小。这两道菜，这辈子再没有机会吃到那种味道了。]]></content>
      <categories>
        <category>回忆</category>
      </categories>
      <tags>
        <tag>回忆</tag>
        <tag>夏天</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决 macOS 10.15 根目录只读问题]]></title>
    <url>%2F2019-10-07%2Fmacos-catalina-root-dir-read-only%2F</url>
    <content type="text"><![CDATA[写在最前面，本人以惨痛教训告诉你，工作机不要乱升级，尤其是 10.15 这种级别的大更新。 如果是自己的日用机并且你喜欢折腾，欢迎体验新的 macos Catalina。 之前一篇文章也提到：iOS 13 和 macOS Catalina 初体验，新版本的 macOS 有很多很棒的地方，但是同样存在很多坑，虽然有些我并不认为是系统本身的问题。 其中最重要的是，macOS 10.15 中根目录变成了只读，原来很多喜欢往根目录 / 下面写东西的软件都会失效，对我来说，可能问题更严重一些。 背景故事： 我遇到了同样的问题…… 一开始我是认可这种改动的，而且认为毕竟大家都是最终要升级的，总归要改的对吧？抱着这种念头用 Windows 开发了一周，最后顶不住了开始找解救方案。 解决方案： 1.关闭SIP 2.执行 sudo mount -uw / 3.根目录下新建文件夹并赋权 sudo mkdir /xxx，sudo chmod 777 /xxx 所以这种东西为什么要写死在代码呢？感谢 v 站。 参考链接 升级 macOS 10.15 之后根目录只读，公司项目打不开了，求助 555 mac os 升级 catalina 之后，没有办法在根目录新建文件，导致依赖 Cat 的 Java 项目无法启动 Mac开启关闭SIP 系统完整性保护]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自言自语]]></title>
    <url>%2F2019-10-03%2Fa-few-words-to-myself%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[工作笔记（4）]]></title>
    <url>%2F2019-09-25%2Fwork-notes-4%2F</url>
    <content type="text"><![CDATA[今天，10月19号，来公司加了一会班，首先对于加班我的态度是可耻，代表效率低，做事上面出了一些问题。当然，这次事出有因，老大催着要上线，我对上线向来谨慎，更何况是刚刚接手新场景，担心有一些坑没有理清楚。 不要被打断，不要自己打断自己，也不要让别人打断自己。 遇到bug、不太好解的事情，尤其比较复杂的时候，试试先画一个数据流图 or 思维导图，列出关键节点，排查问题，这个过程可以参考小黄鸭 debug 方法。 工作的研究的区别，也许你可以研究半年然后发一篇 paper 全年不愁吃喝，当然这是我的猜测，但是我们工作党不同，尤其一个月评一次绩效的公司，每个月都要有产出，不然，绩效就要难看了。与之对应的，就是压力所在了。 遇事不决写 wiki，梳理思路，整理进度。]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>工作</tag>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[体验 | iOS 13 和 macOS Catalina 初体验]]></title>
    <url>%2F2019-09-22%2Fios-13-and-macos-catalina%2F</url>
    <content type="text"><![CDATA[9 月 20 号苹果正式推送了 iOS 13，作为专业小白鼠，一定要先上手试一试，其实很早之前就拿 iPad 试水装过 beta 版本，但是没怎么用过。 作为单休的孩子，唯一的一天假期还下了雨，就开开心心的宅了一天，顺便体验了一下最新的 macOS Canalita。 不过要先讲清楚，本篇并非专业评测，只是作为用户的一点感受，所以如果有技术性错误还请轻喷，因为懒截图都取自苹果官网，文末有链接。 总体体验上来讲，苹果越来越重视软件，尤其是内置软件的体验，例如提醒事项、备忘录、屏幕使用时长和 Sidecar 分屏功能等等，完全可以替代之前使用的一些第三方软件。 1.macOS Catalina先说下命名，Catalina Island（卡特琳娜岛）依然是美国加州的一个地名，延续了之前的命名方式，系统升级之后，自带的动态壁纸也有更新，还是一如既往的吸引人，有机会一定要去看一看。 Catalina 壁纸 说到壁纸，不得不提最近看的一部电影《徒手攀岩 Free Solo》，电影里主角一直想要征服的正是酋长岩（El Capitan），也是苹果的系统版本名之一。 EI Caption 壁纸 电影剧照 电影剧照 1.有些软件不支持新系统这个影响还比较大，所以放在第一条。 目前遇到的有，网易有道词典、Foxmail，两个重度使用软件打不开了很尴尬，这个需要自己评估一下。 2.更好的 Handoff 体验查了一下中文翻译叫接力，开启方式在设置 -&gt; 通用 -&gt; 允许 mac 和 iCloud 设备之间使用接力。我也算是这个功能的重度使用者，在手机上复制几行文本，然后直接粘贴到电脑上去。之前用的时候偶尔会卡顿几秒，现在完全不会，当然也可能是之前的打卡方式有问题，非常流畅。 设置界面 3.提醒事项和备忘录在此之前我使用过各种提醒软件，例如番茄土豆，todoist 等，就是因为自带的提醒事项太鸡肋，现在的提醒事项，嗯，真香。 至于备忘录，还是一如既往的好用，最早我是 Evernote 的付费用户，笔记 3000+，后来看到贾老师用备忘录做项目记录，就完全转到了备忘录，目前笔记也已经 1000+。 iOS 13 提醒事项 iOS 13 备忘录 4.Sidecar 分屏功能这个功能是指，你可以用 iPad 连接 Mac，作为一个扩展屏，印象中这个之前有一个专门的收费 APP 可以做到，现在系统默认提供了这项功能，虽然听起来很酷，但是貌似没有想到应用的场景。iPad 难道不是用来看剧的吗？ 🐶滑稽 iPadOS 会在 9 月 25 号推送。 Sidecar 演示 5.屏幕使用时间这个功能我之前也是通过使用第三方软件记录的，总是担心隐私问题，说得好像现在就不用担心一样（ 这个在 iOS 上很早就有了，只是移植到 Mac 上面来，现在看库克好像很喜欢这样？把 Mac 的 docker 移到 iPad 上面就可以叫iPad OS 了，创新啥的，跟我没啥关系，发布会随便一点新改动，都叫 the most brilliant ever，反正只要出了新 iPhone 你们还是要乖乖掏钱。 路径：系统偏好设置 -&gt; 屏幕使用时长 ![image-20190922073058766](https://tva1.sinaimg.cn/large/006y8mN6gy1g77y9e1vmjj30u50u0n8o.jpg 屏幕使用时间 2.iOS 13更新还比较多，列一下对我来说体验很棒的几点： 1.支持深色模型目前来看，还只有系统原生应用支持，一些第三方应用支持的还比较少，比如支付宝。比如微信，当然微信不支持夜间模式是张小龙的想法。 2.新的原生 APP难道是我喜新厌旧，感觉新界面更好看？ 3.照片编辑可能是因为直男平时不怎么 p 图，新的图片编辑功能让我有点困惑，不知道咋用，还得学习学习。 3.4.AirPods这个也不错，还没体验。 3.iPhone 11 Pro 体验在拼多多上下单买的手机，20 号下单，22 号到手。 1.手机有点大用了很久的 6s，基本操作都是一只手，现在用下拉操作的时候，一只手有点不方便，可能是我手小。。。 2.视频功能自己拍了一些普通的视频，没有感受到明显差别 3.夜景这个真的要吹一波，有点超出想象，虽然不知道怎么做到的。下班之后随手拍了几张照片，如下： 图一是公司楼下，貌似能看到两颗星星。 等绿灯的时候拍的一张照片 4.参考 https://www.apple.com/cn/macos/catalina/ https://www.apple.com/cn/ios/ios-13/ https://www.apple.com/ipados/ 《徒手攀岩》https://movie.douban.com/subject/30167509/]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>ios</tag>
        <tag>macOS</tag>
        <tag>iPhone</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[推荐系统工作笔记（3）]]></title>
    <url>%2F2019-09-18%2Fwork-note-3%2F</url>
    <content type="text"><![CDATA[之前的公众号一时博客断断续续写了几篇文章，今天上去看，关注人数刚好到了 500 人，公众号后台偶尔也会有人留言交流，但是因为不经常上线，往往看到的时候消息已经过期无法回复，所以想到启用这个很早就申请的公众号，方便读者大大留言交流，今后也会在这里记录一些推荐算法相关的问题。 今天终于腾出时间（放弃躺尸的快乐时光），来记录最近的一些思考。 正式工作已经差不多两个月，基本了解了推荐系统的整套流程，当然，因为场景的特殊性，目前重点关注排序（rank）阶段。 刚开始工作的这段时间，基本都是以完成交代的任务为主，大方向由mentor确定，细节部分也会有自己的思考和实践，也有了一定的产出，这个过程当中也在不断的思考，算法工程师究竟意味着什么？ 前几天开会的时候，听到一句“工程的同学往往做的是确定的事情，算法的同学往往做的是不确定的事情”，感觉很有道理。 记录一下自己对于推荐算法工程师日常的理解： 1.对于业务的把握能力，这一点尤为重要 快速熟悉业务的背景，了解业务的核心数据，明确优化指标。 场景的特殊性：不同场景在推荐上也有不同的侧重点和优化点，例如有不断下滑的传统推荐场景，也有基于主商品的推荐，基于店铺的推荐等等，场景的不同，也就意味着除了核心特征之外，场景特征的不同。 整体数据流程：在线请求、召回、排序、日志落地、离线样本构建、模型训练等。 整体数据观：以电商场景为例，常见的 uv 数量，uv 点击数，场景商品价格、销量、ctr 的分布情况等等，核心数据指标一定要很清楚。 2.良好的工程能力：快速迭代、快速试错，保证代码的正确性，合理优化，保证线上响应速度。 3.对于算法的灵活运用：正确理解不同的算法和模型，在不同的场景下合理使用。目前来看，一般的算法演进流程都是 LR -&gt; XGBoost -&gt; DeepFM 等，阿里的 DIN 应用也较为广泛，实际业务当中，没有银弹（Silver Bullet），没有万能的解决方案，都是case by case 的优化。 4.主动发现问题的能力：通过 case、统计分析发现问题，这一点尤为重要，找到可优化的点，比按照指令优化某一问题要更重要。 5.多问为什么，用数据说话：遇到任何情况，先多问为什么，然后慢慢从数据的角度理解现象，指标的提升或下降，要明确变化来自于哪里。有想法的时候，先做好数据层面的分析，然后做 AB 实验，验证想法，做好实验记录。 6.follow 领域最新进展：多和兄弟团队交流，关注好的工作，关注核心会议的优秀 paper。当然，论文当中灌水现象也很严重，需要自己斟酌辨别。 7.确定优先级：精力毕竟有限，给要做的事情分清优先级，做好计划，集中精力做最容易出成功的地方（提升核心指标）。目前看起来上策略是最容易拿到收益的，也最为玄学，一些规则、策略的挖掘，一方面靠经验，一方面也靠对数据、业务的理解。]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>工作</tag>
        <tag>推荐算法</tag>
        <tag>计算广告</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[再遇组织架构调整]]></title>
    <url>%2F2019-09-16%2Fre-org-in-pdd%2F</url>
    <content type="text"><![CDATA[从开始实习到现在，总是会遇到组织架构调整，已经习以为常。 人总是会趋于稳定的，不希望走出自己的舒适圈，我也不例外。 最近也一直在思考，什么东西是最重要的，什么能力对我们算法同学来说最为核心。 leader说了一句“工程同学解决确定的事情，算法同学解决不确定的事情”，某种程度上，很有道理。 对于算法的同学来说，对业务的把握能力，工程能力，数据分析能力等等，都很重要，很多情况下问题没有清楚的定义出来，需要自己去发掘。 日常警示 在某一个领域做到极致 思考的时候更深入一些，讲话之前多过一遍脑子 严谨]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>思考</tag>
        <tag>组织架构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工业界推荐系统实践：特征]]></title>
    <url>%2F2019-08-20%2Ffeatures-in-ctr-model%2F</url>
    <content type="text"><![CDATA[先埋坑，慢慢填。 1.特征的种类从数据格式来讲，一般有以下三种： 类别特征：例如用户的操作系统类型，[iOS, Android, other ] 数值特征：商品的价格：1000 序列特征：用户的点击序列，例如商品 item_id 的点击序列： [12212, 2323232, 2323232] 从场景划分角度来讲，一般可以分为： context feature：用户和场景进行交互产生的一些特征 user feature ：用户特征 item feature：商品特征 从时效性角度来讲，也可以划分为： 长期特征：相对长期的固定属性，例如用户的性别 短期特征： 实时特征：用户几分钟内点击的商品序列 2.特征预处理 如何对特征进行处理？ 是否需要进行归一化？ 特征如何进行 embedding？ 3.特征对应模型 如何根据特征的量级、种类和分布等选择合适的模型？]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>特征工程</tag>
        <tag>CTR</tag>
        <tag>工业界</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[推荐系统工作笔记（2）]]></title>
    <url>%2F2019-08-18%2Fwork-note-2%2F</url>
    <content type="text"><![CDATA[一、笔记 工作上一定仔细，只有细致，才能减少问题，避免踩坑。当然，该踩的坑还是要踩。 留出更多的思考时间，不能陷进业务里，经常跳出业务，看到目前的不足，确定之后的优化方向。 必须要让自己在业务中快速成长，业余时间找机会自我提升、自我充电，保持核心竞争力。 很多时候，很多东西的掌握不是因为难，而是因为没有主动意识和恰当的环境去掌握，你进了那个环境，就会很快接触到该接触的，剩下的就看自己的努力程度了。 要有总结，更要有行动，坐而论道，毫无意义。 每一步都要自己先 check，尤其是在向别人更新信息、要求提供帮助之前，确保自己提供的信息准确，不出现低级错误。 减少肉眼判断，相信脚本、程序，人工都是不可信的，尤其是一些重复性质的工作，很容易出错，而且不容易排查。 遇到问题，多个角度思考，多积累业务经验。 二、推荐系统核心流程： 在线业务代码：为后端提供推荐接口，传入用户、商品信息，返回推荐商品 list。 特征模块：一般可以分为数值特征、类别特征和序列特征。初期可以多埋一些，后期通过xgb等树模型进行特征筛选，或者基于DNN模型的特征重要性进行评估，对于 DNN 模型，这一点似乎还没有很好的解决方案。 召回：常见的有 i2i、word2vec、graph embedding 等召回方式，基于用户 session 中的商品共现行为，计算商品的相似度，召回部分核心是覆盖率和准确率，trigger 商品的选取策略也很重要。 打分模型：精排模块，一般是基于模型为召回的每个商品打分，例如 ctr、cvr 等，然后基于场景的优化目标，结合商品price进行组合，构成最终的 score。 规则过滤、业务需求：各种业务需求，基本原则是解决各种 bad case。 关于cvr模型打分公式的探索：ctr、cvr 和 gmv 如何组合？ 如何进行 AB 实验？ 一开始做实验的时候，比较年轻，经常盯着实时数据，心情随着数据波动而波动，一整天的数据刚出来，就要试图下结论。对于某些场景，如果成交订单比较少，那么订单额的波动就很正常，尤其是某些大订单的影响（例如手机、电脑等），评价策略效果的时候，就要多观察一段时间，长期正向 or 负向，才可以下结论。 数据的采样方式 业务场景中，正负样本比例往往失衡，通用的采样方式是对样本进行负采样，一般都会拿到收益。但是细致到如何采样，还要通过实验进行验证，例如点击率预估场景中，负样本比例往往远超正样本，那我们是对负样本随机采样，还是针对 pv 采样，又或者是针对 uv 角度采样？ 采样之后，如何还原 ctr 到真实值？如果是按照固定比例进行采样，可以参考 Facebook 的《Practical Lessons from Predicting Clicks on Ads at Facebook》 一些评价指标的理解 AUC：模型把正样本排在负样本前面的概率 pcopc：预估准度PCOPC(Predict Click Over Post Click) 如果是点击率预估问题，label取值为0、1，那么 pcopc = sum(ctr) / sum(label)，理想情况下，pcopc = 1，表示模型的打分相对准确，如果有较大偏差，就要分类型看一下，模型对于哪些数据学习的不好，导致打分不准确。 MAE, RMSE,logloss 训练和测试集 DNN中特征重要性如何衡量 如何阅读报表？ 抓住关键指标，理解指标含义，理解指标为何变化。 参考文献1.Practical Lessons from Predicting Clicks on Ads at Facebook]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>工作</tag>
        <tag>推荐算法</tag>
        <tag>计算广告</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[推荐系统工作笔记（1）]]></title>
    <url>%2F2019-08-16%2Fwork-note-1%2F</url>
    <content type="text"><![CDATA[1.规划工作需要做好长短期规划，长期规划大方向，短期规划做好业务。 最近的工作比较琐碎，写的代码比较少，多数时间在各种工具之间切换，经常会感觉到杂乱，不能很好的理清事情，稍显杂乱，无论是文件、代码的整理，版本管理，还是短期的任务规划，都做的比较仓促（当然这也是我司风格之一，节奏比较快）。周五坐下来想一想，很多地方可以做得更有条理，以后要加以改进。 对于长期规划，目前来看，是基于之前的三个大方向发展，不断提升自己的核心竞争力。当然，这样的原因也是因为还没有很好的业务sense，不能看到很长远的东西，也就不强求登高望远，专心做好短期的业务需求。 2.关于框架最近和各种机器学习框架打交道，总觉得吃力，一来不熟悉使用，二来不了解深层原理。前期因为业务压力，走马观花的情况比较多，快速了解，快速上手，往往没有好好仔细了解背后的一些细节和原理，无形中也埋下了一些坑，有些低级的错误，往往是对于旧的代码、业务掌握的不够熟悉，导致出现问题。 有时间的情况下，多了解一些框架信息，本周学习了一些ps相关的论文，还需要学习更多相关的知识，解决问题起来，也会更加轻松，避免摸瞎的情况。 3.有的放矢区分好不求甚解和烂熟于心。有些业务细节，要十分熟悉，别人问到，就要对答如流，这样沟通起来，会简单很多。尽量避免“不求甚解“，工作当中，这种情况要不得。 少说”我猜、大概和应该是等字眼“，多说我确认、我确定等等。 和别人沟通之前，梳理好自己的思路，表意清楚。 4. 脑袋要灵光遇到一些问题的时候，经常会觉得，啊，完了，这个事情行不通，去问mentor的时候会发现，给出的意见往往是很简单的变换思维，不要总是在一条路上走，一条路走不通，经常想想低成本的解决方案，我猜这也算是解决问题的能力。 5.及时解决问题问题不能留着，更不能藏起来，遇到问题，自己解决不了，就要及时抛出来，找有能力解决的人协助解决——针对我这种新人选手，有些地方需要花时间处理，有些地方就不能浪费时间。 举个例子，有些任务会出现报错，一开始的时候，总想着自查，自查的过程总是相对耗时的，要尽快确定问题，在大群中抛出问题，比自己一个人苦思冥想一上午，效率要高上很多，这种方法尤其适用于接触新的工具、技术。 有问题不要私聊，尽量在群里解决，拉群解决问题的时候，首先要做的就是确保信息一致，在座的信息都同步好，不要出现信息偏差。 犯了错，及时同步给别人，减少无用功，不要担心丢了面子。 6.自信心保持自信心，心态是最重要的，近期项目不顺利，一度情绪低迷，转念想想其实没必要，时刻保持自信心，仔细做好工作即可。 工作生活尽量分开，工作上的事情，不要带到生活上。]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>推荐系统</tag>
        <tag>工作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[idea 的小技巧]]></title>
    <url>%2F2019-08-01%2Fidea-tips%2F</url>
    <content type="text"><![CDATA[1.debug 必备 Analyze - Analyze Stack Trace 之前写 Java 多数起在本地，有报错直接点进去看就好，有时候服务起在远程，只能从 log 里找错误，这时候只需要把报错贴到这里，就可以自动定位到错误的地方，很方便。 2.一些细节 插件和IDE的版本强相关，如果没找到相关的插件，可能是因为当前版本没有对应的插件，可以Google 查询插件支持的IDE版本 ​]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小贴士（2）]]></title>
    <url>%2F2019-07-31%2Ftips-for-myself-2%2F</url>
    <content type="text"><![CDATA[工作就是工作，耐住性子，当好过河卒。]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>未完待续</tag>
        <tag>tips</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法工程师的核心竞争力]]></title>
    <url>%2F2019-07-31%2Fcore-competences-of-algorithm-engineer%2F</url>
    <content type="text"><![CDATA[当然，并没有什么秘笈之类的东西，有一些诠释很好，这里记录一下。 搜索、广告和推荐，在企业中属于三个比较万金油的岗位，一般来讲都有需求，相比计算机视觉等，可选择范围更广，同时业务中涉及的方面也比较多，cv 和 nlp 一般也都会接触，目前来看，是很不错的岗位。 “要学会先解决主要矛盾，忽略次要矛盾。” 1.工程能力一些语言上的东西，无论是 Java、Python或者 SQL、shell 等，都是基础，最终目的不是为了学习这些语言，而是快速实现，快速迭代，速度慢了就会影响到工作。所以一定要熟练，熟练的唯一方式就是多练。 2.算法能力能够 follow 最新的 paper，并且了解最核心的部分，解决了什么问题，采用了什么方法，是否可以落地？注重解释性。 对于技术，要了解算法的演进过程。 另外要养成阅读 paper 的习惯，雷打不动，一周一篇。 3.业务能力熟悉业务，多问为什么，xx 指标变化了，为什么？一定要找到尝试解读现象，在回答为什么的时候，加深对业务的理解。 不要放过不理解的地方，不要思维定式，习惯挑战。 最后还让我立个小目标，三年时间成长为阿里 p7 水平，狗头保命哈哈哈哈哈。 先做好业务，注重总结，身边有很多值得学习的。]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>核心竞争力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[重学Java（1）]]></title>
    <url>%2F2019-07-11%2Fjava-01%2F</url>
    <content type="text"><![CDATA[希望 flag 不会那么快倒下hhh 1.Java 8 语言特性1.1 Steam()函数编程的思想 In functional programming, a monad is a structure that represents computations defined as sequences of steps. A type with a monad structure defines what it means to chain operations, or nest functions of that type together. 1234567891011List&lt;String&gt; myList = Arrays.asList("a1", "a2", "b1", "c2", "c1");myList .stream() .filter(s -&gt; s.startsWith("c")) .map(String::toUpperCase) .sorted() .forEach(System.out::println);// C1// C2 几种常见构建流的方式： 12345678910111213// 1. Individual values 单独值 Stream stream = Stream.of("a1", "b1", "c1"); stream.forEach(System.out::print);//打印 a1b1c1 // 2. Arrays 数组 String[] strArray = new String[] &#123;"a2", "b2", "c2"&#125;; stream = Stream.of(strArray); stream = Arrays.stream(strArray); System.out.println(stream.collect(Collectors.joining(",")).toString());//打印 a2,b2,c2 // 3. Collections 集合 List&lt;String&gt; list = Arrays.asList(strArray); stream = list.stream(); 理解就好，需要具体 API 的时候查一查也无妨。 2.Gradle 和 Maven两者同为构建工具，大同小异，各有各的优势缺点。多了解即可。 3.Spring Boot出去团建和同事聊到之前试用过 Spring Boot，有人随口问了句，Spring Boot 到底是什么，一时头绪很多，不知从何讲起，只说了一句是一个集成了很多 web 开发工具的脚手架。 这个框架，自己之前使用过很长时间，但是更多时候是知道如何使用，而没有深入了解其原理，现在尝试从更加 high level 的角度重新理解一下。 其实如果一步一步的使用各种框架，例如早期的 SSM 框架，可能对于其作用理解更深，但是技术更新快，过时的技术，很快就被抛到后面。 3.1 Spring Boot 是什么下面是官网对于框架的描述： Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”. 所以其作用就是帮助开发人员更加快速的开发出 Spring 项目，很多时候都是这样，一个框架好不好用，决定了其用户规模。 优势： Create stand-alone Spring applications Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files) Provide opinionated ‘starter’ dependencies to simplify your build configuration Automatically configure Spring and 3rd party libraries whenever possible Provide production-ready features such as metrics, health checks and externalized configuration Absolutely no code generation and no requirement for XML configuration 参考 Java构建工具:Maven与Gradle的对比 https://gradle.org/maven-vs-gradle/ https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html 阿里巴巴Java 开发手册.pdf) 理解 Spring boot Spring boot 官网 Spring Boot深入理解 https://winterbe.com/posts/2014/07/31/java8-stream-tutorial-examples/ https://www.jianshu.com/p/d69a5d9ad5ec]]></content>
      <categories>
        <category>学科笔记</category>
      </categories>
      <tags>
        <tag>未完待续</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习资料整理]]></title>
    <url>%2F2019-07-11%2Flearning-resources%2F</url>
    <content type="text"><![CDATA[自己也看过很多资料，但是散落在各个平台，这里费力一点整理到一起，方便回顾，但是也难辨原创与否，就交给读者自己分辨了。 本文持续更新。 1.大数据 Hive SQL的编译过程 2.机器/深度学习 深度学习在美团搜索广告排序的应用实践 3.推荐系统 阿里零售通智能导购推荐技术实践 淘宝提出用户实时意图预测算法DIPN，效果秒杀传统模型 深入FFM原理与实践 阿里妈妈新突破：深度树匹配如何扛住千万级推荐系统压力 4.工程相关 从0到10亿，微信后台架构及基础设施设计与实践！ 想读读PyTorch底层代码？这份内核机制简介送给你 5.职业成长 前百度总裁陆奇：我给有梦想的年轻人10点建议 给产品技术人才的建议：不降级不投机，和优秀的人做有挑战的事 机器学习科研的十年 6.资源推荐 7 个世界上最高质量的机器学习公开课 书单 | 数据挖掘，你不应该错过的六本书 计算机领域必读的经典书籍清单]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>推荐系统</tag>
        <tag>未完待续</tag>
        <tag>资料</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[入职初体验]]></title>
    <url>%2F2019-07-10%2Ffull-time-and-intern%2F</url>
    <content type="text"><![CDATA[很多人工作之后博客之类的就停掉了，一开始还很奇怪，现在真是体验到了。 首先实习和正式员工区别很大，员工是有绩效压力的，必须花时间做好，不是简单的接任务，而是要把任务完成好，尤其是像我们这种节奏很快的公司，更是如此，很难有时间沉淀积累。 有时间的时候，多半也没了心思，只想休息。 也正因为这样，能够坚持沉淀的人很难得。 说几点入职之后的体会： 1.没有想象中那么坏 本来我对我司的期望极低，现在看来，宿舍条件还行，室友也不错，吃的方面，暂时来看还算说得过去。部门做的事情比较核心，技术上不至于落后，事情也比较有挑战。 当然，还是有很多地方不是很完善，例如极度缺少开放心态，新人入职资料比较少，缺少正规化的培养体系等等，但是都可以克服。 2.确实很辛苦 这一点是我始料未及的，之前完全以实习时候的标准来看待 11 11 6，现在来看，正式员工的 11 11 6，强度远大于实习生，这也对我提出了更高的要求。偶尔也会想，是不是选择上有些问题，但我可不是轻言放弃的人。 3.效率亟需提升 目前来看，自己的效率还是需要提升，当然也有可能是因为刚入职，需要适应，这方面也不用操之过急，心态要好。提升做事效率，积极学习新东西。就现在的情况来看，之前学习的很多东西都是有用的，可以快速进入状态。 但是这种优势，并不存在壁垒，换一个新人也很快可以做到，所以还是要寻找自己的核心竞争力，打磨某一方面的能力，努力做到最好。 4.压力很大 组里的人，没有问学历背景，但是马上要入职的一位校招同学，是 pku 的 博士。加上之前组里的一位新人，入职不久就开始做事情，而且效果看起来不错。所以就像 leader 说的一样，新人入职，要对自己要求高一些，自己也要对自己有期待。 5.保持激情，把握好自己的节奏 完事不能三分钟热情，希望你一定坚持，成是非，取这个名字就是取的天下第一的寓意，万事要有竞争，不甘人后。也要把握好自己的节奏，积极锻炼身体，保护好自己。 6.珍惜社交机会 之前曾经说，我父亲属于木头类型，我母亲相比更加 social，而我更像两者的综合体，有时候会觉得很矛盾，其实也不用太纠结，努力向母亲靠齐吧。所以周末有空的时候不要宅在家里，多出去走走，认识新的朋友，不是功利，认识更多人，就可以了解更多的故事，这本身就是人生的意义之一吧。 7.没有人是围着你转的 大家都有自己要做的事情，所以遇到问题，要先搞清楚问题在哪。 其实坦白讲，我没想过这么拼的，但是箭在弦上，不得不发，属于赶鸭子上架，这时候也能自己给自己打打鸡血，硬着头皮上了。 8.生活总是要继续的 每个人要开始自己的生活，刚开始的时候有些狼狈，总归是难免的，要相信一切会好起来。 最后，新键盘很好用嘻嘻。 成是非加油！]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>工作</tag>
        <tag>拼多多</tag>
        <tag>推荐</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[写在正式入职之前]]></title>
    <url>%2F2019-07-04%2Flast-days-as-a-freeman%2F</url>
    <content type="text"><![CDATA[做不了英雄，就比普通人迈出多一步。 还想感慨一句，时间过得好快，是真的好快。童年和玩伴们一起在门前戏耍的样子明明就在眼前，如今已经要独自走向社会，承担属于自己的责任。 多沟通 接受自己的平庸 延迟满足感 要有方法论 经常对自己定位 效率 运动 做事有条理，有提前量，不要因为事情小（懒）就不做计划 不要给自己划定界限]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>工作</tag>
        <tag>期待</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[朋友的故事]]></title>
    <url>%2F2019-06-25%2Fstories-of-friends%2F</url>
    <content type="text"><![CDATA[前言我一直有一个宏伟愿望，写一本《关于爱情》，里面没有别的，全是别人的故事，绝对真实、刻骨铭心的故事。后来人，如果有胆小的，不敢实践，可以先在书里体会一下爱情，当然，爱情是绝没有定义的，你可以在故事里感受到爱。如果有胆大的，也许别人的故事会给你一些启迪和思考。再有，如果情侣现实中遇到了问题，可以来检索一番，看看前人都是如何处理，结局如何。 也许有人说，这样的书写出来，是不是就像爱情的教科书，是在教我们爱情？当然不是，充其量只能算是参考书目，当你需要参考时，你可以翻一翻这样一本书，也许可以少走一些弯路，少一点爱情的痛楚，多一点甜蜜。 可我也知道，爱情没有苦，就不是爱情。生涩、懵懂和未知，是很多爱情的关键词，所以这样一本书，如何也不会受欢迎。 下面是几位朋友的故事，均已取得当事人授权。 朋友 A 恋爱两年，我几乎不让她来我的学校。 朋友 A 是一个 180 的壮汉，喜欢仰着头点着手大声哈哈哈哈，我们日常最多的活动是打篮球、吃饭和喝酒。仅凭第一印象，你会以为他是个粗犷极致的人。四年相处间，我也一度这样以为——直到有一次闲聊，谈到了他的爱情，我才若有所思，哦，原来他是这样粗中有细的人。 他属于比较怂的那种人，喜欢按部就班、踏踏实实的做事，无论是学习还是生活，换一个说法叫好人，我知道唯一不符合这种人设的事情，大概是他受损友鼓舞组团去对面师范学校”寻找真爱”。可你还别说，这样一来二去，去的次数多了，还真就让他撞到一个。 相中之后，他更加殷勤的往对面学校跑，眼光不再打探整个人群，只落在那一个人身上。相比那些偶像剧，他们的故事更像是生活，慢慢的接触，慢慢的感动。很长一段时间里，我们几乎不能在校园里找到他。任何时候，你的电话打过去，一定是说”在华师”。从一个旁观者的角度，以大学生的衡量标准，我猜想这算是很认真的恋爱了：无时不刻不黏在一起，虽然从来不在朋友圈分享恋爱的喜悦，但是用实际行动表达着自己的心意和宠爱。 是的，写到这里，我想到他似乎从来没有发过和他女朋友的朋友圈，当然，他本身就属于动态比较少的人。 背景介绍完了，要讲到重点了。聚会的时候我们时常会问，为什么不带那个女孩来见见朋友们，这位朋友 A 总是有各种理由，什么这会打电话没人接，什么女生刚洗完澡，不一而足。久而久之，这甚至成了一个见面必提的梗，夸张一些，就像那位孔乙己先生进到店里的经典场景，我们乐于开这种玩笑，然后看他认真解释认真找理由然后尴尬的样子。后来他说，他不想女孩来自己的学校，给的解释更是匪夷所思：因为一些客观因素，女孩毕业后要回到家乡，而他计划在武大再读个研究生，他害怕如果女生经常来自己学校，等女孩回去之后，自己走在校园里，每个地方都能想起她。 一开始听到这解释，我带头大声嘲笑并骂他是个憨批，是个榆木脑袋，可不知怎么的，临近毕业这会儿，我越来越认同他的观点，并开始觉察到他当初的机智和成熟，或者远见。 感时花溅泪，恨别鸟惊心。 此去经年，应是良辰好景虚设，便纵有千种风情,更与何人说？ 当然，这一切是我的脑补，也许他是个渣男 or 海王，骗了大家而已。 朋友 B 我喜欢上的每个人都会喜欢上别的人。 本来是要先写另外一个朋友的，写着写着就想到了 B 君。以下全部是我的猜想和第三方视角，或者正确，或者我实际并不懂这位朋友，我们认识了很久，但每次谈到这些事情，他总是会沉默不说话。 首先他是个憨憨——在恋爱这方面，不懂表达，不敢表达，而且，就像《轮到你了》里面的尾野，他喜欢的人总会喜欢上别人，这可太要命了。 每当这样的事情出现，少不了要心疼+无奈的嘲笑一波。 可你说他不够优秀吗？我想不是，大概是不会选择，总是做出错误的选择。 所以好像四年里，甜甜的爱情都没有出现，但他好像乐此不疲，也许享受的是另一种快乐。 例如 S 君吧，S 君是一位大家都很喜欢的朋友，也很可爱，哪怕是傻子都能意识到 B 君对 S 君的心意，何况 S 君还是个“高级玩家”。所以两个人都不着急挑明，大概是各自都享受着这种关系。 我们旁观者看着很着急，但两位当事人却乐在其中，我实在不愿意说诸如备胎这种字眼，但在我们的视角里，B 君实实在在游进了 S 君的鱼塘，但又怎样呢？这位朋友自己喜欢，也许就够了吧？ 感情的事情谁能说清呢 朋友 C 我们不是没有爱情，只是没能修成正果——和很多人一样。 朋友 C 失恋差不多一年了吧，之前很少跟我们聊自己的事情，出来约饭只是喝酒，聊天南地北开心的事情，毕业之后，反而变得奇怪起来，不像他洒脱任性的人设，偶尔 QQ Zone 发一些怀念 ex 的动态，一直用着前任拍的头像，据说有一次忍不住打给前任，还哭成了傻逼，笑。 也许应该先介绍下背景，不然听起来莫名其妙。 朋友 C 属于那种，看起来很调皮的人，喜欢结识新朋友，男女关系呢，也弄不太清楚。甚至，按照他的说法，什么叫做喜欢，什么叫做好感，都不是很清楚。有一次遇到什么事情跟我们倒苦水，席间有人问，你竟然也会不开心哈哈哈哈哈，我以为你没心没肺天生开朗~ C 喜欢跟着感觉走，大学谈了两年多的女朋友，就是跟着感觉走的。有一次出去喝酒，见他一瓶接一瓶，随口说一句酒量见长啊，怎么练的？谁知道竟然开了话匣子，聊起自己的恋爱来。 从我朋友的角度吧，感觉他还是没有走出前任的阴影。可他开头第一句就说，我不是忘不了前任哈，只是对于那段刻苦铭心的感情、对于那段曾经无限美好的回忆，难以割舍，更是 tm 的一时忘不了大学时代。我说行，你说，我听着。 “我和她认识是在大一暑假，完全是意外，朋友攒的局，几个人暑假都有自己的事情待在学校没有回家，跑出去约烧烤。男男女女，因为共同的朋友一起吃个饭，再正常不过了。她呀，当时高高瘦瘦，看着特别文静，还穿着一件浅绿色的裙子，我一眼就瞄上了。说来也巧，本来不是坐一块，当时她怕猫，就跟旁边的女生换了个座位，好巧不巧刚好坐在我对面，你说，这不是缘分么。吃完饭我去旁边小摊买了个西瓜，切好之后分给大家，大家都吧唧吧唧开始吃了，只有她先是不要，后来也只是稍微吃了一小口。我当时就看着她，小小地咬上一口中间的红瓤，动作轻轻的就像个小奶猫。当然，后来我才知道，她只是单纯不怎么吃西瓜，亏我还送了好多次西瓜，原来都是别人吃了哈哈。 嗨，你别不信啊，真是这样。我当时就起了好奇心了，再加上她那名字，可真好听，后来的好几天，那个裙子就一直勾着我。对了，还有一件事情忘了说，其实啊，我和她早就有了 QQ 好友，是一次帮她填问卷的时候加上的，只是一直没对上号。 但是老实说，没多想，如果只是这样也就算了，但是无巧不成书嘛。那时候流行跑步锻炼身体，我们有一个共同好友 Y，张罗着晚上一起去操场跑步，一开始的时候，还很胆小，Q 在最内圈，Y 在中间，我在最外圈，那时候还很害羞，不好意思直接跟 Y 讲,请求她的帮助，就这样三个人一直跑了一段时间， 后来终于有了机会，Y 出去旅游，听到这个消息，别提我多开心了，第一天的时候，藏着兴奋告诉 Q 君，Y 出去了，今天不能来，问她要不要一起跑步，没有拒绝。于是我们第一次有了独处的机会。再后来，我们不再局限于操场那一方小小的地方，我提议在武大各个地方都转一转，于是接下来的一段时间里，武大几乎每一寸土地都有了我们的身影。有一次出门之后下了雨，我们在五教旁边的小亭子躲雨，两个人坐在石头上，脚悬在空中，欢快的气氛几乎充盈了整个亭子，那时候的我们，多么简单快乐。 日日一天天过去，我们就像每一对情侣一样，每天聊不完的天，凑巧的是，另一位朋友 L 君也来无意助攻，带着一起打游戏。从来不玩辅助的我，也甘心为她选了辅助位置，和她一起玩傻傻的人机模式，他和我一样，最开始的时候，只会玩盖伦，想想，一个娇滴滴的妹子， 挥舞着盖伦的大宝剑，哈哈，有意思。 暑假快要结束了，我带着她去了欢乐谷，只有我们两个人。貌似第一个项目就是鬼屋，在鬼屋里，她胆小的特性再次暴露，一进去就紧紧的抱着我，怎么也不敢松手。出来之后，我也就鼓起勇气，全程牵着她了。结束之后，我就忍不住表白了，那时候她低着头哭了，我当时就傻了，感觉哭爷爷告奶奶好说歹说给哄好了。我也被这架势吓傻了，不答应就不答应呗，为啥要哭啊。回去之后，厚着脸皮表白*2，恩，答应了。也是后来才知道，第一次哭，是被吓到了，多么可爱的一个小姑娘啊。 我们的合影不算多，但是每一张都有背后的故事，每一个故事我都记得。有一张是冬天的时候，两个人坐在教室的最后一排学习，穿着厚厚的羽绒服，我是一件黄色的羽绒服，她是白色的，很好看，那时候我是个西瓜头。还有一张，下课期间，我靠在她身上小憩，被后排的可爱同学拍到发给我，那时候我烫了头，对了，我本来记不清什么课，分手后问她，她说是在 OC 课（Objective-C）。还有一个两个人在常去的奶茶店的视频，两个人玩猜词游戏。分手后，那个奶茶店几乎成为我的刑讯室，每每路过，思绪都是翻滚卷积着苦楚，压制不得。 我们都是学计算机的嘛，我大学就不太喜欢学习，高数线代啊，平时都不怎么愿意学，期末的时候厚着脸皮拿着题目去问她，能教自己高数的女孩也太酷了。当然也有我擅长的，男生嘛，写代码方面会多下点功夫，有时候一起做个东西之类的，她那边遇到问题，一定是第一时间解决的，凌晨一点来一条消息说，xx 代码不想写了，你来帮我吧，然后她就去睡觉了，我这边通宵搞到第二天，写好文档发过去，也是常有的事情。 有时候也会想，我们相处的时候，是否有十分感动的名场面呢？似乎没有，都是一点一滴，一天一天的朝夕相处。 再后来，就是长久的陪伴了，我们的大学生活，应该是谁也分不开谁，谁的回忆里，都会有对方，至少我是这样感觉，我也一直用亲人间的处理方式对待她。我们笑过，开心过，爱过吵过，也哭过闹过，最后还是谁也没有亏欠谁，和平分手。 你要问我原因呢，我只能说是我们不合适，性格不合适，一时的好感，不能当做维系感情的长久之计。后来的人生选择上，也有很多偏差，她选择去国外读 master，我留在国内读研，注定不会在一起，所以就提出了分手。 说到这里故事就结束了，她也有了新的男朋友，我祝福她一切都好，我这里，虽然口口声声早已经忘记，但是我知道，朋友们也知道，我仿佛淹死在那篇回忆海洋里，每每想到过去，都是一颦一笑，试过很多种办法，就是暂时忘不了那个人，我想，也只有时间和酒精可以吧。 我们不是没有爱情，只是没能修成正果。 当然，也有人说，不求天长地久，只求曾经拥有，各自有各自的道理。分开之后，认识新的女生时，总会想起 Q 君，总会不经意间比较，Q 君的优点变得从所未有的多，到后面都分不清是真的这样还是回忆里的自动美化。 还有人说，也就是 Q 君，我感觉你没有你说的那么喜欢我，我也只能苦笑哈，Q 君还说，是你自己不珍惜，怪不得别人。分手后很久，我再去联系 Q 君，她的冷淡，也会让我怀疑，是不是我自己看的太重，也许人家，早就忘了。但是有一次，两个人聊到曾经，两个人都成泪人，我又愿意相信，这是一段两个人都真心付出，但是很可惜没有后来的美好大学恋爱。 毕业之后，很长一段时间都难以释怀，一度失眠，忍不住找 Q 君倾诉，一开始大概是出于同情，态度还比较好，后来就开始不理解，你为什么会忘不了呢？言下之意大概是我早就忘了？在那时候，我感受到最深的挫败感，仿佛一直以来的失落、缅怀，都毫无意义。 这段恋爱太平凡，不然也许可以叫人写进书里，叫大家参考借鉴。” 听完这些，我举起酒杯，和 C 君道，敬，爱情。 未完待续。]]></content>
      <categories>
        <category>大学总结</category>
      </categories>
      <tags>
        <tag>故事</tag>
        <tag>未完待续</tag>
        <tag>朋友</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[毕业这件小事]]></title>
    <url>%2F2019-06-23%2Fgraduation%2F</url>
    <content type="text"><![CDATA[毕业典礼之后，双证到手，就算真正的毕业了，一直念着写点什么，总也想不出标题，凑合着敲出一个题目，然而行文也是磕磕绊绊，毕业这时候的复杂情绪，实在是难以言明。 临近毕业，时间一天一天过去，一切平平淡淡，没有发生任何意料之外的事情，实在是微不足道的一件小事。 最后的这张万人大合影，全场能一眼认出的，大概只有红袍的校长了hhh，连我都不能找到自己。 1.毕业典礼6 月 21 号，学校在暴雨中举办了 2019 年毕业典礼，暴雨考验着一万名毕业生的同时，更一度将这场毕业典礼送上了热搜。看得出学校在典礼上花了很多心思，努力为毕业生们留下美好的回忆，在这一点上，无论是学院的红毯仪式还是学校的毕业典礼，都很暖心，感受到了母校的心意❤️。 具体到这场典礼来看，其实有很多小插曲，比如开场有些跑调的歌曲，一直相互抢话的主持人，忘记嘉宾名字的校长，甚至还有一个不小心切出来的一秒钟禁播镜头等等，不过这丝毫不影响它传达的讯息：我正式毕业了。 一直嚷嚷着毕业，真到了临了，又有些不舍，觉得似乎可以再晚几天，多享受一下学生时代的自由散漫和浪漫，一直到现在，我都觉得似乎并没有完全做好毕业的心理准备，但事情大概总是这样，戛然而止，也许是点睛之笔。 2.庆祝毕业毕业，自然是一件值得大肆庆祝的事情，昨天典礼结束之后，和周围几个寝室做了四年邻居的朋友一起，开怀畅饮，也第一次尝试了网吧通宵五连坐。 典礼那天早上 7 点就起床，晚上更是通宵，第二天早上 7 点钟才回寝，一口气睡到了晚上 7 点，整整 12 个小时。 聚会觥筹交错间，总会聊到大学四年发生的种种，大家聚到一起，总会心照不宣的想起一些趣事，四年很短，转眼就毕业，四年也很长，回想起来，记住的事情只有很少的一部分。 庆祝毕业这件事情，其实已经持续了很久，久到从答辩结束开始，所以严格意义上，我们已经说过太多次毕业快乐，直到毕业典礼最终画上了句号。 有次聚会朋友问我大学有没有遗憾，仔细想了想好像没有。对于大学的一切美好向往，在这里的四年都得到了满足，如果一定说有什么遗憾，那就是母校让我成长了很多，而我却没能为母校留下点什么。 3.离别临近毕业，朋友们聚在一起，多半是聊一聊往事，互相吹嘘一下未来，最后以一句苟富贵结尾。男生比起女生，在情感表达上，总是相对含蓄，身处工科院系，朋友中自然男生居多，聚会时大家也许默契也许忘记，都没有人提离别这个话题。 离别太伤感，不提为好，默默收拾行李，默默分别，默默祝福你们未来一切顺利，前程似锦。]]></content>
      <categories>
        <category>大学总结</category>
      </categories>
      <tags>
        <tag>大学</tag>
        <tag>毕业</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一些乱七八糟的想法]]></title>
    <url>%2F2019-06-13%2Fnote-1%2F</url>
    <content type="text"><![CDATA[自己似乎有一种强迫症，某件事一旦有了确定的时间节点，就一定希望在这之前做好充分的准备，不然就会心慌慌。对于毕业这件事情，也是如此，但是准备了这么久，似乎还没有准备的很好。 总觉得要学习的还有很多，很多地方可以做的更好，对自己有更高的要求，加上一些家庭、生活相关的东西，心里一直悬着石头，长久的压抑。 当然，每个人都会有不希望告诉别人的小秘密，我自然也逃不过。 什么都可以聊的朋友，或者说与这些事情有关的朋友，多数散落在远方，有时候也不知怎的，说不太出口，坦白讲我绝不是个什么自闭 or 放不开的人，只是近期遇到了很多事情，很多无法左右的事情，就会觉得很无力。 希望通过别的事情转移注意力，却难逃夜晚的独处。 当然，也许陌生人你看到这段文字会觉得我简直哭丧到爆、是一个极度消极的人，其实并不是。没有人能够完全读懂另外一个人，看到的都是我们希望别人看到的。真正的自我，究竟是怎样，谁又会清楚的知道呢。 最近的个人博客，似乎已经完全背离技术路线，也许要找一个更合适的地方专心写一些技术文章。]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>电影</tag>
        <tag>毕业</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[五月总结]]></title>
    <url>%2F2019-06-06%2Fsummary-of-May%2F</url>
    <content type="text"><![CDATA[五月一直在学校，中间持续数日的感冒破坏了很多计划。庆幸的是开始调节作息，过回了大一的生活，早睡早起，很是开心。 这段时间，真正的无忧无虑，窝在寝室看看书刷刷课或者网上冲浪水水群，看一部好电影，和朋友一起打打球约约饭，校园里闲逛一起怀念过去、聊聊人生，不久之后就要从这里毕业，于是格外珍惜这段日子。 总结起来就是，不焦虑，不虚度。 待续。]]></content>
      <categories>
        <category>大学总结</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[leetcode 每周练习(1)]]></title>
    <url>%2F2019-06-02%2Fleetcode-weekly-practice-1%2F</url>
    <content type="text"><![CDATA[LeetCode 练习 1. LeetCode 721 账户合并链接：https://leetcode-cn.com/problems/accounts-merge/ 分析：需要用到并查集，记住就好了。 解法1： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960class Solution &#123; public: vector&lt;int&gt; par; vector&lt;int&gt; rank; int find(int x)&#123; if(x == par[x])&#123; return x; &#125;else&#123; return par[x] = find(par[x]); &#125; &#125; void merge(int x,int y)&#123; x = find(x); y = find(y); if(x == y) return ; if(rank[x] == rank[y]) rank[x]++; if(rank[x] &gt; rank[y]) par[y] = x; else par[x] = y; &#125; vector&lt;vector&lt;string&gt;&gt; accountsMerge(vector&lt;vector&lt;string&gt;&gt;&amp; accounts) &#123; vector&lt;vector&lt;string&gt;&gt; reaccounts; int n = accounts.size(); if (!n) &#123; return reaccounts; &#125; for (int i = 0; i &lt; n; i++)&#123; par.push_back(i); rank.push_back(1); &#125; map&lt;string,int&gt; m; for (int i = 1; i &lt; accounts[0].size(); i++)&#123; m[accounts[0][i]] = 0; &#125; for(int i = 1;i &lt; n;i++)&#123; for(int j = 1;j &lt; accounts[i].size();j++)&#123; if(m.find(accounts[i][j]) != m.end())&#123; merge(m[accounts[i][j]],i); &#125;else&#123; m[accounts[i][j]] = i; &#125; &#125; &#125; map&lt;int, vector&lt;string&gt;&gt; man; //姓名+邮箱的 账户集合 for (auto &amp;it:m)&#123; //遍历邮箱和行号的 映射集合 int k = find(it.second); if (man.find(k) == man.end())&#123; //没有该账户时才新增账户 man[k].push_back(accounts[k][0]); &#125; man[k].push_back(it.first); //添加邮箱到集合 &#125; for(auto &amp; it:man) &#123; reaccounts.push_back(it.second); &#125; return reaccounts; &#125;&#125;; 时间复杂度： 空间复杂度：]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>刷题</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[终身学习]]></title>
    <url>%2F2019-06-01%2Fnever-too-late-to-learn%2F</url>
    <content type="text"><![CDATA[学习，在我目前的阶段来看，还是一件枯燥的事情，至少在专业方向这块，是相对无趣的，当然我是说跟玩耍相比。 终身学习的态度，本身就值得学习。 对于知识要保持敬畏，任何一个领域，都需要系统的学习，一蹴而就在知识世界中从来就是个伪命题。 最近在刷斯坦福的 CS224N 课程，第一个感受就是困难，之前也曾经刷过许多类似的课程，但是往往没有重视作业部分，没有独立完成，对于重要论文往往只求理解重要概念，对于细节把握不足，自己实现的时候，才感受到这些。 接下来计划刷的课程： CS294-158 Deep Unsupervised Learning Spring 2019 mit6.828 还在断断续续的刷题，看到坑神的主页： https://space.bilibili.com/2144961，点进去了看了几个打比赛的视频，真真切切的感受到差距，真正的实力差距。 也正是从这里才意识到，要多抬头往前看，不能一直待在自己的一亩三分地，俗称”舒适区”。 当然，也希望有一天能够真正进入到舒适区，可以不考虑奋斗，只是过好生活。 之前的一时打卡项目因为力扣 UI 更新停掉了，还是要回归到主业上，提高自己的核心竞争力，尤其在时间比较紧缺的情况下，全都懂一点远不如对某一行懂的很深。 最后，希望感冒快点好吧QAQ]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何学习机器学习？]]></title>
    <url>%2F2019-05-18%2Fmachine-learning-resources%2F</url>
    <content type="text"><![CDATA[记录一下自己的学习过程、期间遇到的一些疑惑和整理的一些学习资源等。 明确学习的动力，好奇、求知欲、不得不学等等，然后督促自己完成。 一、回顾自己结缘算法纯属巧合，没有很强的功利心，刚好要用到就去学了，学习的过程也比较坎坷、粗暴。在做项目、比赛的时候，需要用到深度学习相关的技术，于是当了掉包侠，之后去公司实习，开始接触大数据、复杂网络和推荐系统等知识，接触到实际业务场景，总结起来整个过程就是现学现卖，赶鸭子上架，以练代学。 之前更多的场景是，遇到 XX 问题，查找解决方案 / 算法 ，巴拉巴拉。很少思考这些算法背后的东西，也就是基础理论。譬如，有一次遇到 NLP 中的大量短文本主题提取需求，做了前期调研（前人分析结果）之后，选择 LDA 算法后就开始项目，至于说这个系列的算法的来龙去脉，算法的原理、推导，不同算法的抉择，有没有必要比较不同的算法结果，都不甚完善，比较粗糙。 原因是多方面的，最根本自然是基础知识缺失，那时候对于这个领域缺少足够多的了解，加上部门的项目较为繁杂，个人之前的背景也比较乱，很多方向都有涉及，但是往往浅尝辄止，没有选定某一个方向深入探究。加上项目紧急，急着要结果，自然也顾不上许多。当然，这些都是项目复盘中意识到的问题。 总的来看，自己是从 CV 开始入手，第一个项目是 OCR，从图片中提取文字，接着是物体检测(Object detection)，之后在公司做复杂网络、NLP 相关的东西，再然后是推荐广告相关。这些通常都是以工程实现为目标，不涉及到理论研究，或者换个说法叫，拿来主义。这样说可能会有点 low，但事实是这样。并不清楚别的同学是否会不一样，但是我较为浅显的实习经历中是这样。 二、入门资料很多人都会推荐资料，我看到的时候也会收藏，但往往也止于收藏。下面的推荐大绝对值得你花时间仔细琢磨。 而且，要注意的是，你在一开始看的时候，要学会”不求甚解”，一开始的时候，有些地方弄不明白，并不是你笨或者老师讲得不好，单纯是知识体系不够完善，所以理解起来有困难。对于初学者，信心和坚持最重要。 还有一点要提前打预防针，有很多很多看起来异常炫酷的算法和 paper，但是往往工作中不会用到，机器学习是为了解决问题，不是为了应用特定算法，所以不要觉得什么都要用机器学习方法，如果传统方式能解决自然更好。 在初始阶段，我们会参考一下博客之类的内容，但一定要加以区分，不要反被有些错误的地方误导。 2.1 在线课程初期可能觉得书本难啃，可以先从视频教程入手，自己当初走了弯路，光顾着看视频，课后作业没仔细做，建议仔细完成课后作业，收获会更大。下面的课程，后两个没有看过，暂时躺在 to-do list 中。 deeplearning.ai 吴恩达 CS229: Machine Learning 斯坦福 CS231n:Convolutional Neural Networks for Visual Recognition 斯坦福 动手学深度学习 伯克利 CS224d: Deep Learning for Natural Language Processing 斯坦福 Stat212b：Topics Course on Deep Learning 伯克利 2.2 书籍这些书籍，往往都很全面，建议精读 + 略读，初期优先理解概念，然后推导理论。每读一遍，都有不同的收获。看书的时候一定要耐下性子，慢慢精读，多动手多推导，推荐反复阅读。 在读这些书的时候，一定要弄清楚关键公式的含义，储备好相关的数学知识，虽然理论上机器学习并不要求很高的数学水准，但是数学上的良好背景，能够更好的帮助理解某些知识。 《统计学习方法》 李航 《机器学习》 周志华 《深度学习》 《神经网络与深度学习》 邱锡鹏 2.3 面试准备 《百面机器学习》 hulu 坦白讲这本书很多内容似乎与网上的内容相似度很高，但如果当做是面试合集，也不错 关注牛客网、知乎等用户发布的机器学习相关面经，从功利的角度讲，刷面试题对面试的直接效果最佳 三、进一步提升待完善]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[普通人]]></title>
    <url>%2F2019-05-15%2Fi-am-nobody%2F</url>
    <content type="text"><![CDATA[临近毕业，一直在胡思乱想，白天想的是开心事，晚上则悲观居多。 自己的大学，就要画上句号了，如果不出意外的话。回头看， 自己满意吗？ 朋友圈有人发类似大一写给大四的信，大一的愿望，大四再回头看等等，而我，最近才想起来，自己在墙上贴的一个卡片背后，写着自己对于未来的期待，希望自己毕业的时候能看到。但我在某个时间点，把卡片扯下来扔掉了，扔的时候还在想：这个卡片因为什么存在了这么久？ 现在来看，再无机会知道那时候写的是什么了。 前几天和一个刚回国的好朋友约饭，仔细想想上次见面还是17年。 她学金融，我是计算机，本来以为这是最后约饭，没想到很巧合的是马上要一起去上海搬砖。 暂且称这位朋友 L 吧，她是我大学认识的女性当中，极其有主见、有想法的一批人。 她比较讶异我还在当程序员，觉得以我的性格可能会选择一些别的更有趣的东西。仔细想了想其实我的大二是一个分界线，在这之前，我自由散漫，真正像一个普通大学生，爱玩喜欢结识新的朋友；在这之后，我似乎忽然意识到自己在专业上的投入不足，开始一心准备相关的东西。 谈天说地，几瓶酒下肚就开始怀念，旁边一桌换了三轮，我们才准备下桌。曾经啊~]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[三年后我会在哪里？]]></title>
    <url>%2F2019-05-01%2Fnothing-01%2F</url>
    <content type="text"><![CDATA[临近毕业，开始思考未来的一些事情。 实际一点的说法，三年后我会在哪里？我的 title 如何？我的发展前景如何？或者更世俗一些我的年薪如何？不想当将军的士兵，不是好士兵。 思考并不会直接带来什么收益，但是能够让我像是打着灯走路，而不是摸着过河。 了解一些更厉害的人，能够帮助自己看清自己，更好的定位自己，榜样的力量是无穷的。 当然，每个人都有自己的路，别人怎样，我不见得就要怎样。 自己现在有很多问题需要解决，例如并行能力略差，动力不足等等，未来都需要改进。 技术上的提升至关重要，努力的方向也尤其重要。 所以照例许一些期望： 1.职业生涯 提升代码能力：LeetCode、《剑指offer》、《算法导论》，不要落下。 巩固基础知识：动手推导、动手编码，避免仅知其然不知其所以然。 加深业务理解：工作中多锤炼。 紧跟行业最新技术：了解最新的技术，多读技术书籍，加强输入。 多和同行交流，把握最新的情况。 2.生活 语言：英语的词汇、听力、阅读、口语 读书：三日不读书，面目可憎。 保护视力：良好的用眼习惯，少看点电影，花了太多时间 站得高，看得远，希望自己未来几年能够始终对自己有客观的把握，知道自己未来要做什么，无论是从职业发展还是生活的角度。 3.思考 处理好深度和广度的关系，广度是广泛的了解，仅限于了解层面的知识，广度能够帮助扩充视野，避免短视；同时深度是立身之本，把自己负责的部分，钻研清楚，透彻了解。这是个人的核心竞争力。 阅读、学习的时候，真正弄懂，达到能给别人讲解的程度。 知识有很多，如何甄别？对于当下最有用的，对于未来最有用的 4.摘抄 杨振宁 我刚才讲过，一个年轻的研究生最重要的一件事情是什么？其实不是你学到哪些技术，而是要使你自己走进未来五年、十年有大发展机会的领域，这才是你做研究生时所要达到的目标。]]></content>
      <categories>
        <category>职业规划</category>
      </categories>
      <tags>
        <tag>思考</tag>
        <tag>三年后</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人站点和技术站点]]></title>
    <url>%2F2019-04-28%2Fblog-and-zhihu-or-juejin%2F</url>
    <content type="text"><![CDATA[不同的站点、社区，有其对应的定位，不同的内容自然也要分发到不同的地方。 个人站点，不会打扰别人的 Timeline，是属于自己的，一般来说，流量来源是搜索引擎。 所以在个人站点上，可以自由发挥，表达自己的观点。 有些朋友会私戳问一些问题，分享三个比较典型的给大家。 转算法好像成了一种潮流，有些朋友觉得身边的人都在做，所以我也要做，但其实不是这样，最重要是自己喜欢。 1.“我是XX背景，我不喜欢现在的方向，能不能转算法？” 2.“我实习论文都没有，代码也不行，找算法工作OK吗？” 3.“我已经下定决心转算法了，我需要看些什么呢？” 回答是： 1.算法和别的任何一个岗位都差不多，真的不存在哪个岗位更有意思，做到极致，都能很棒，算法也没有你想的那么有意思，写起SQL来真的头大; 2.要不要试试产品？（狗头保命） 3.请自行Google学习路线，并非三言两语就能说清楚，算法的门槛虽然没那么高，但是也不代表不需要积淀。 一开始问转算法的以学弟学妹为主，后来甚至有一些工作好几年的同事来问，所以发个劝退帖，希望大家能认清情况。 劝退的是意志不坚定的朋友，有志于这个方向的，还请坚持，竞争确实比较大。]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[日常笔记📒]]></title>
    <url>%2F2019-04-15%2Flife-notes%2F</url>
    <content type="text"><![CDATA[日子过的总是很快，尤其是不记忆、不思考和不动手的时候。记忆也变得很差，这一刻记得要做的事情，明天就忘记。 1.结缘算法很多人都觉得这是所谓 AI 时代，不会深度学习这一套就跟不上时代，不仅在校学生趋之若鹜，就连工作多年的老员工都难以抵挡诱惑。 工作这件事情对我来说，成就感很重要，很多人问我为什么不继续读研，对于不同的人，我有不同的理由，这也是为了免得下一步的探讨，因为已经是不能改变的事情，多说无益。 在所谓深度学习的浪潮中，总有弄潮儿，为大家把握方向，也有人投机取巧，单纯想要捞上一把，我的初衷很简单就是兴趣，但其实兴趣这种东西很难说清楚，而且你现在跟人家讲兴趣也没人信。动机是什么其实不要紧，重点是在这个领域有所建树。 有些人负责基础研究，这些自然是大牛，作为未来工业界的一份子，我也要想清楚，自己如何在这个过程中找到自己的价值。 大象和蚂蚁，要各司其职，大象不能屈尊做蚂蚁的营生，蚂蚁也不能妄自学大象。 这个领域，浮夸风严重，科研灌水严重，方向似乎也没那么明确，更要找准自己的定位，快速成长，希望几年后，再看到这些文字，不觉得虚度光阴。 一时迷茫的时候，要及时跳出来，看到大局，然后继续奋斗。”有时候方向比努力重要”。 2.自制鸡汤 时刻保持谦逊，对技术保持敬畏。学如逆水行舟，不进则退。 近期写的文章，逻辑性不强，结构极散。 3.学习感悟1.理解一个概念的时候，一定要深度理解，首先是白话角度，或者叫直观角度，理解算法，接着是实际的理论推导，如何应用？实际的代码如何编写？]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[对职业生涯的一些憧憬和想法]]></title>
    <url>%2F2019-04-08%2Fcareer-preview%2F</url>
    <content type="text"><![CDATA[作为一个还未毕业的毛头小子，就开始谈论自己的职业生涯看起来有点可笑。但是我一贯的习惯就是提前量，预先做好规划，即便更多时候，规划只是规划，实际操作中，规划和事实相去甚远，于是见机行事，但是有了规划，心中总会多几分自信和从容。 一、迷茫和悬念对于未来的职业生涯，坦白讲我是迷茫的，很难看清未来的路会是怎样，当然这一点也在我预料之中。当初选择算法方向，其中一个原因也就是希望自己的路不要那么明确，一眼就望得很远，还是希望留一点悬念。 我们经常畅想一些短期的目标，小一点的事情例如，我考完这门课就要出去玩，稍微大一点的，这个比赛我如果拿了一等奖就要请大家吃饭，再大一点比如，如果我考上公务员就要开心的玩一个假期这种。目的和对应的奖赏非常清晰。 但是很少见说，我未来几年如果怎样怎样就要怎样怎样，缺少长期的规划。虽说我实习的时间加起来已经有差不多半年，但是职位不同，心境也完全不同。作为实习生，大家对你的期望不会很高，但如果是正式员工，大家自然会有所期待，无论是基本工作，还是可能的一些成果。况且，谁不希望能在工作中表现得不错呢？ 我绝对属于求生心理很强的一类人，不喜欢失败，当然，没有人喜欢失败。有些人会觉得这种人活着很累，是，输的时候就会很累，但是赢得时候就很开心。平时打球，不计分的时候，就随便玩一玩，一旦开始计分，一定是打足精神，不一定每次都要赢，也不是输了就要怎样，而且一种追求赢的态度，对胜利的渴望超过一般人。 到目前为止，我还是把这一点归为优点。 二、自我剖析对于算法岗位，自己本科学历并不占优，目前来看，唯一的优势在于大学时候下了功夫，收获了一些项目、实习经历，别的就不值一提了。 相比之下，科研能力相对不足，毕业前夕，选择呆在学校专心毕设，也正是因为这个原因，趁这个机会，锻炼学术能力，为将来提前做一些打算。 代码能力这块我并不担心，之前因为时间原因没有过多投入精力，现在正在努力加强，无非就是刷题，在刷题的过程中，加强代码能力。相信坚持下去，就会有很大的提升。 对于未来有所担忧，是一好事，但是要控制程度，要把担忧作为动力，而不是因此一味焦虑，自顾苦恼，失去斗志。我爸在这一点上做的很糟糕，事情一时解决不了，就经常发愁，相比之下我妈就做得很好，看得开，拿得起放得下，这一点我随我妈。我爸诚恳老实、沉闷无趣，我妈则机灵变通、外向活泼。 平时的技术分享是一件好事情，但是不能流于表面，止于”入门”级别，要钻到里面，”潮水退去，才知道谁在裸泳”，提升专业素养才是王道。 三、未来几年的期盼工作，没有明确的要求吧，毕竟我现在去的公司没有级别之分，希望自己能在接下来的几年里，熟悉业务，完成任务，不忘充电，注重效率，尽可能可保留头发。 阅读优秀的源码，一直以来想读的一些源码，都要花时间认真读一读。避免浅尝辄止，多一些深度理解。 家庭，随着年龄增长，其实已经意识到父母的老去，他们越来越依赖子女，自己的工作生活，都要开始考虑他们。希望自己能多打打电话，多和他们聊聊天，了解他们每天在做什么，多关心他们的生活，保护好他们，让他们健康幸福，有时间多当面沟通。 生活，希望自己加强锻炼，少熬夜(别想了)，有机会多出去看看祖国的山山水水，多读书，读有益的书，练练字，陶冶情操，大学里面玩的各种球类运动，挑一种好好练一练。自己对于文学也算是有一些兴趣，希望未来能尝试多写一些散文之类的，也不求出版，整理到一起，也算是留个念想。 制定读书计划，技术书籍、文学类等等，拓展知识面，尝试背一些诗词，高中的时候一位英语老师，已经年近五十，每天还要背诵一些古文诗词，当时觉得理所当然，不以为奇，现在想想，应该多学习。 写文章的时候，发出去之后多检查几遍，尽量避免错字语病等等，严谨一些。同时行文注意逻辑，要让人看懂看明白，即便一时不知道你想说什么，也知道你在以什么逻辑在说这件事。 爱情，可能是因为一些外部因素吧，自己主观上并不是很着急，但是貌似客观大环境并不”明朗”，所以还是希望能遇到一个知书达理，三观相符的人，开始一段”新旅行“。 平时很少会谈论理想女性之类的，这里不妨写一写。自己也算读过很多书，看过不少电影，当然这不代表什么，只是在这个过程中，会见识到很多不同的人和事，当然也包括爱情。年轻的时候跟家里人一起看过不少《非诚勿扰》，当时是作为娱乐节目来看，我是一贯不赞同这种作秀形式的，但也不无参考借鉴之处。 我认同”非诚勿扰式恋爱”，在恰当的时候，如果两个人各自有一些苗头，不妨坐下来真诚、深入地了解一下彼此，聊聊人生观价值观，聊聊彼此的喜恶，聊聊你欣赏什么或者不接受什么。不需要很刻意，如果没有大量时间相处，也许这是个不错的办法。当然其实这不仅仅限于男女朋友，普通朋友也是一样。如果恰好，一切都很合适，那就恭喜你，可以尝试开始下一步的计划，反之就能对于这个人有更多了解，之后的生活中也能更好地关注到 ta。 很多时候朋友关系不是三年两年建立的，而是某一段时间某一天甚至某一句话，在那一刹，你开始认可这个人。当你真的认可一个人的时候，你会愿意去包容，愿意求同存异 —— 我知道你有这样那样的缺点，甚至有些时候严格意义上你都不一定是个好人，但我还是愿意和你交朋友。]]></content>
      <categories>
        <category>职业规划</category>
      </categories>
      <tags>
        <tag>大学</tag>
        <tag>职业生涯</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一时打卡网站公告区]]></title>
    <url>%2F2019-04-03%2Flc-group-dev-update%2F</url>
    <content type="text"><![CDATA[如何加入微信群？ 因为群超过 100 人，所以可以扫描下面公众号，然后回复 LeetCode，添加我为好友，我来拉你进群(请注明途径+LeetCode拉群)。 1.更新日志 添加小组统计数据，新增 datatable 表格(排序、搜索、分页) 时间： 2019-04-05 12:21:28 打卡数据 表格支持排序、分页、搜索 将长期未打卡的用户除名 时间：2019-04-03 12:27:49 除名规则： 加入排行榜十天以上，且十天内打卡次数为零。SQL 如下： 1234567891011121314151617181920212223UPDATE Member mJOIN ( SELECT address, checkdays, cnt FROM ( SELECT address, ( cnt - uncheck ) AS checkdays, cnt FROM ( SELECT address, count( * ) AS cnt, sum( checked ) AS uncheck FROM CheckDayInfo GROUP BY address ORDER BY cnt DESC ) a WHERE cnt &gt; 10 ) b WHERE checkdays = 0 ) c SET m.STATUS = 1 WHERE url = c.address 2.常见问题2.1 排行榜规则是什么？三个指标：是否打卡、今日刷题数量、总刷题数量 其中今日刷题，只计入之前未刷过的题。新用户加入的时候，由于前一天的刷题总数无从获取，故今日刷题 = 总刷题。 2.2 这个项目如何产生的？参见之前的文章： 一时打卡小玩意 2.3 这个项目是如何开发的？你可以在我们的 trello 看板了解更多。]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>打卡</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小贴士(1)]]></title>
    <url>%2F2019-03-14%2Ftips-for-myself%2F</url>
    <content type="text"><![CDATA[忘记在哪看过一句话，说的是你要随时记下自己的想法，灵感总是一闪而逝。 我把这一点用在日常的一些事情上，遇事有所体会的时候，总要快速记录下来，不定期整理，回顾的时候以求成长。 下面是近期的一些想法，随时记下，所以不存在先后、因果或顺承等关系，看官可根据喜好跳读。 一、日常 不要被自己的努力欺骗，“我努力了”往往是失败者的借口。失败后，正确的想法是“下一次，我如何成功”； 注重效率，低效是灾难。当你遇到一件事，你的效率超低的时候，不妨把继续工作的时候拿来思考，是否可以提高效率，是否可以避免手工？ 明确目标，要做一件事的时候，就要目标笃定，中间有别的事情打断的时候，尝试用栈的思维处理，每次保存现场以及返回入口，一件一件完成之后，不要忘记解决最开始的问题； 注重用户反馈，你做的功能一定是别人需要的； 专注做自己最擅长的事情，不擅长的领域，消耗大量时间，且成效不好； 终身学习，不同时间段学习的东西不一样； 人脉不是刻意求得，人脉是能力的附属品，只能锦上添花，不能雪中送炭，所以不必花费过多时间维护所谓人脉； 认真要体现在每一件事上，尤其是重要的事情，你不认真的事情，很难有很好的结果； 勇于记录，勤于记录，记录自己的幼稚，其实也是一件极需要勇气的事情。时间流逝，你回头在看，成长与否，一目了然。若是看到之前的自己觉得很弱，说明有所成长，最怕的是一成不变； 保持动力对我而言是很难的事情，所以及时发现自己动力缺失就显得尤为重要，通过一些方法让自己能够间歇性斗志昂扬，就是一件很不错的事情。 二、与友人谈跟一个工作了几年的算法同学聊了很久，记录其中几句。 选择和运气很重要，刚出校园时大家起点一样，三年之内大概率分化严重； 要主动 push 自己，工作中有做分享、串讲的机会，一定要积极参与，也可以通过开博客、教程等方式，督促自己，提升自己的行业知名度，提升硬实力，降低对所在平台的依赖度； 时刻充电，不充电必将被淘汰。推荐领域从16年至今，已经发生了翻天覆地的变化，时刻保持求知心，才是弄潮儿，不然只会被”潮“弄。 成长是多方面的，代码能力只是其中一个部分，未来的成长还有很多，譬如协调能力、lead 能力等等； 有意识的对自己的职场生涯进行思考，规划并付出行动。 一家之言，欢迎拍砖。]]></content>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一时打卡小玩意]]></title>
    <url>%2F2019-03-03%2Fleetcode-group-website%2F</url>
    <content type="text"><![CDATA[一、LeetCode小组打卡：一时打卡1.1 项目背景和朋友相约在LeetCode上打卡，就组成了小组的形式，既然要打卡，自然就有查卡，一开始是大家刷完题把截图发到群里，然后肉眼查卡，后来为了偷懒就写了这个小玩意（为了偷懒搞出更多事情系列）。 1.2 项目预览 部署地址：group.hellogod.cn 1.3 功能定时查询小组内同学的打卡情况，你可以通过 腾讯问卷：LeetCode主页搜集，加入小组排行榜。 1.4 实现逻辑爬虫根据用户主页地址，每小时定期爬取基础信息，存储在MySQL数据库，后端为前端提供对应接口。 三、技术栈3.1 前端UI基于 startbootstrap-sb-admin-2 ，数据绑定基于AngularJS，页面跳转基于ui-router。 核心 js 文件为 resources/js/app/app.js resources/js/app/controllers.js 3.2 后端Spring Boot 2.1.2 bean 实体类 repository 数据库操作 service 服务层 controller 对外发布接口 3.3 爬虫Scrapy 1.5.0 爬虫部分代码：spider_leetcode]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>leetcode</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[互联网技术面试LeetCode刷题指南]]></title>
    <url>%2F2019-01-28%2Fleetcode-tips%2F</url>
    <content type="text"><![CDATA[从19年秋招的情况来看，互联网公司对于技术序列的朋友要求越来越高，尤其是在代码能力上，越来越多的公司开始在面试中考察LeetCode的easy、medium题型，对于优秀的同学还会考察到hard级别。 也曾经有段子说，程序员第一次去岳父家，开饭前岳父出了一道LeetCode medium，做出来之后才开始动筷子。 不管是所谓的互联网“寒冬”因素，还是企业水涨船高的招聘要求，都对程序员们的数据结构和算法提出了更高的要求，这篇文章和大家一起探讨下刷题这个话题。 为什么要刷题？ 如何刷题？ 刷题时有哪些技巧？ 一、为什么要刷题？很多人会觉得 LeetCode 之类的刷题手段似乎没什么意义，只是一种类似八股文的考核手段，但其实通过刷题，能够对很多计算机的基础知识有更好的掌握。 之前和一些面试官也聊到这个话题，对于校招生，相对于其它能力，他们更关心学生的基础知识、潜力和编程能力（聪明程度），coding 面能够很好地考察这些方面。 通过刷题，首先能够对于基础的数据结构有更好的了解，如果你在大学课程中对于这些掌握的很好，可以直接开始刷题，反之如果你对于这些不是很熟悉，不妨去回顾一下大学教材或者试试一些口碑不错的网课，快速过一遍基础，这可能比你直接开始刷题要好。 以下 1.1 - 1.3 摘自知乎博主 Edward Shi 关于 刷 leetcode 需要哪些基础？ 的回答（有删节）： 1.1 数据结构数组，链表，栈，队列，树，图，堆，HashTable，线段树，树状数组，并查集，字典树等 1.2 算法排序算法（八种），DFS，BFS，二分查找，回溯，分治，递归，动态规划，拓扑排序，贪心等算法（学校学不到的）：Sliding window，扫描线算法（图形学），蓄水池算法，flood fill（图形学）等 更难的其实也涉及到很多：KMP，马拉车等 1.3 其他知识位运算（Bit），基础数据结构实现（LinkedList Deque等实现），一些设计思想（Design），数学知识（Math），通配符，转义字符，记忆化搜索等。如果用的是Java，其实别的语言也一样，Java 还有一些常用的数据结构：TreeMap，TreeSet，PriorityQueue，Deque 等 由此可见，仅 LeetCode上 涉及到的题目，覆盖范围极广，可以很好的综合考察候选人。 二、如何刷题？如何刷？每天刷几道？刷什么难度的？按照什么顺序刷？ 这样的问题很是常见，我的建议如下 2.1 按照 Topic 刷题例如链表、数组、动态规划等，同一类问题的解法往往是相通的。 2.2 腾出固定的时间有些人说我没时间，于是选择坐地铁、搭公交甚至上卫生间的时候看题，我不能说这种做法有什么问题，但在我看来似乎不是很可取 —— 事实上大部分的人远没有那么忙。 放弃一些娱乐活动之类没那么重要的事情，每天固定一个时间段，做计划好的事情，比一些如何省时的哲学要管用很多。 2.3 写不出来就去看答案有些朋友因为写不出来备受打击，最后放弃继续刷题，这其实不是很好的选择。当你确定没有思路的时候，大胆的去看答案，只要能看懂答案，日后再回顾就ok。很多时候，有些题目不会，不是因为自身问题，而是有些题目就是有特定的套路（前面也提到，有很多这样的算法），一看就懂了，没必要在这些题目上投入过多时间。 直接看答案的前提是经常回顾，看看之前的题目是否还有思路。 写题觉得思路比较复杂的时候，不妨拿纸笔多比划看看。 2.4 不断降低时间空间复杂度很多题都有很多不同的解法，尽可能找到每道题的最优解，如果一时没有想通，不妨 mark 之后下次再来回顾。 面试官在面试的时候也会逐步引导你选择最优的算法，以及特定场景最适合的算法。 三、有哪些刷题小技巧？3.1 最重要的“技巧”：坚持毛泽东曾经修改了一副对联自勉：贵有恒，何须三更起五更眠；最无益，只怕一日曝十日寒。任何事情坚持最重要，刷题也是如此，计划、理论再丰富，没有时间去支撑，也很难执行好。 3.2 在线编程，避免使用 ide直接编写更能锻炼能力，一部分是编码的能力，另一部分是代码风格，良好的代码风格会让人更愿意共事。例如，如果你习惯使用 Java，可以参考阿里的 编码规范，其他亦然。 3.2 注重回顾总结题目刷的少的时候可能没有这个感觉，题目稍微写的多一些的时候会发现，很多题目之间的方法很相似，如果在拿到题目的时候就想到所用方法，一开始选对方向，写起来可能会更好。 我之前写过一个 LeetCode 打卡网站，也欢迎你加入。 四、参考 知乎：刷 leetcode 需要哪些基础？]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大三了怎么找实习？]]></title>
    <url>%2F2019-01-11%2Fpreparation-for-internship%2F</url>
    <content type="text"><![CDATA[通常来说，大三/研二的朋友这时候应该在准备实习相关的东西了。自己之前在字节跳动和腾讯微信实习过一段时间，身边的朋友偶尔会问一些相关的事情，这里把一些找实习的经验整理成文，希望能帮到大家。 我习惯先写提纲，这篇文章主要是从以下四个方面展开： 信息获取（搜集信息、时间节点） 准备（背景梳理、简历优化、基础学科、项目经历、算法） 面试（面试顺序、技巧、总结） offer 选择（公司规模、团队） 一、实习信息实习信息获取最常见的问题是不知道去哪里找实习，其实途径很多，多关注多发邮件，机会总会有的。 师兄师姐内推，这种往往是最靠谱的，简历如果能送到组内就更棒了 领英、脉脉、知乎、掘金、v2ex 等上面勾搭校友 or 公司的 HR、技术人员等 自己之前整理了一个实习内推 doc，有一些公司的学长学姐邮箱，有需要的可以私信获取 论坛公众号类： 牛客网：讨论区会有人过来捞简历 北大未名求职区：很多靠谱职位 OfferShow 公众号 实习时间规划我一开始修了很多学分，所以是从大三下学期的 3 月开始实习，一直到 9 月初，虽然时间比较久，但是课程相对较少。建议大家规划好实习和课程，不要影响到学业，一般都是暑假实习（7、8月）。 二、实习准备2.1 背景厘清自己的硬背景，诸如学校排名、成绩排名以及获得的奖项等等。之前也提过，和组里一位北大的朋友请教简历相关的东西，说“简历上放上校徽就够了”。不管是就业还是保研，成绩都很重要，如果你的绩点是专业top 5，学校也还行，相信 HR 都很愿意给你面试的机会。 2.2 简历简历是自夸，不是谦虚我本不准备大篇幅的讲简历这部分，但是很多时候大家都把握不好简历修饰的度，要么过于直白，难以接受，要么剑走偏锋，过于夸大，面试的时候会被怼得很惨。 我们不妨先来看看下面这个例子（我绝对无意取笑这位同学）： 这是一位 HR 朋友发来的图片，我们先不去求证图里候选人信息的真伪，换做谁在筛简历，遇到这种，也只能笑一笑然后拒掉吧。 的确很诚实，但是没有用，简历里要避免使用一些 幼稚、过度谦虚 的话。 你并不精通慎用 精通 之类的字眼。我大二的时候，有位大四的师兄自己开玩笑说，投了很多简历都没音，后来把 精通C++ 换了个描述很快就进到面试流程。这不是段子，是身边的真实事件。 之前头条的公众号写过一个“面试官对你说”之类的栏目，提到不要夸大自己在项目中的贡献，不然问到的时候不了解，非常减分。 基础信息，扬长避短很多人喜欢很漂亮的简历模板，个人觉得无所谓，简历最重要的是展示自己，把自己的实际情况描述清楚，就完成了任务，花里胡哨的东西多了也无益。 简历应该包括的基本信息： 姓名、电话、邮箱、学校、成绩、项目经历、擅长技能 在阐述这些信息的时候，最好是扬长避短，例如，如果你的成绩不好看，就别写上去了，写了反而减分。 还要讲究专业对口，例如你去面试算法岗，那后台前端之类的工作就尽量少写。 还有 Github 和博客信息，如果有很多深入思考的东西，不妨放上去，反之，放上去也无益。 2.3 学科知识对于应届生，尤其是实习生，面试官最喜欢考察一些类似数据结构、操作系统、Linux、计算机网络的知识，建议大家对于这些学科做系统回顾，然后多看看网上的面试经验，毕竟基础知识，一定要掌握好。 2.4 算法这块其实很直白，LeetCode 刷到 100 道，然后牛客网的剑指offer全部刷完，大部分公司的实习考察代码题无虞了。 自己当时愣头青，没怎么刷题，吃亏很大。 2.5 项目大家在学校做的项目，大多属于玩具类，深度广度都不足，所以要思考，如果再做一次，有哪些可以改进？哪些可以优化？优化的依据是什么？等等，这样可以升华小项目，聊胜于无。 有意识地整理项目的目的、方法、难点、自己的贡献以及最终成果。提前准备好，到时候面试官问起来，就胸有成竹。如果项目有演示PPT、视频，不妨带着，很多次面试官直接打开我简历中附上的链接，看项目的情况。 三、面试面试这块我写了很多篇博文，参见：https://hellogod.cn/tags/面试。 一开始我不太敢线下面试，觉得面对面压力有点大，尤其身边很多人看着。后来多练练也就适应了。 到面试这一步，技巧性的东西作用比较小，主要看之前的准备是否充分，如果说需要做的事情，那就是回顾总结。 我每次面试结束，基本第一时间回忆整个面试流程，问了哪些问题，怎样的方式追问，注重项目还是算法等等，把遇到的问题尽量全面的记录下来，之后再针对性的回顾，有奇效。 自己因为实习耽误了很多时间，后来校招准备不充分，一直是一大遗憾。 四、offer 选择假设你很幸运的拿到了好几家企业的 offer，如何选择？ 对于实习来说，工资绝对是你最后一个考虑的事情，所以主要看公司是否能够起到背书的作用、小组做的工作是否适合。 注：以下同级别没有先后之分，整理的公司名单也不完全，只是自己身边接触到的一些。 公认的一线大厂：阿里巴巴、腾讯、百度 二线：头条、美团、大疆、快手、滴滴、小米、网易 其它不错的公司：商汤、旷视科技、小马智行、猿辅导、拼多多 五、结语把握好信息，认真准备，面试多总结，相信各位朋友一定能找到满意的实习~]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>实习</tag>
        <tag>大学</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于强化学习的推荐系统概述]]></title>
    <url>%2F2019-01-10%2Freinforcement-learning-based-recommender-system%2F</url>
    <content type="text"><![CDATA[1.介绍待完善 2.论文2.1 公司成果 美团：强化学习在美团“猜你喜欢”的实践 [2018] 阿里：强化学习在淘宝锦囊推荐系统中的应用 [2018] 阿里：Reinforcement Learning to Rank in E-Commerce Search Engine: Formalization, Analysis, and Application.[2018] 微软：DRN: A Deep Reinforcement Learning Framework for News Recommendation. [2018] 京东：Deep Reinforcement Learning for List-wise Recommendations. [2017] 京东：Optimizing Gross Merchandise Volume via DNN-MAB Dynamic Ranking Paradigm.[2017] 京东：Recommendations with Negative Feedback via Pairwise Deep Reinforcement Learning.[2018] 京东：Deep Reinforcement Learning for Page-wise Recommendations. [2018] 2.2 其它论文 2018 - Recommendations with Negative Feedback via Pairwise Deep Reinforcement Learning 2018 - Recent Advances in Recommender Systems: Matrices, Bandits, and Blenders 2015 - Collaborative Filtering Bandits 2014 - Bandits Warm-up Cold Recommender Systems 2010 - A Contextual-Bandit Approach to Personalized News Article Recommendation 3.应用场景一般用于连续翻页的多轮交互场景 4.优缺点4.1 优点 exploit与explore问题，对已知信息合理利用的基础上进行适当探索，提升用户体验 cold start 问题 4.2 缺点强化学习训练不稳定、难以收敛、学习效率低、要求海量训练数据]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>强化学习</tag>
        <tag>推荐系统</tag>
        <tag>综述</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[b站直播]]></title>
    <url>%2F2019-01-01%2Flive-streaming-with-mac-in-bilibili%2F</url>
    <content type="text"><![CDATA[环境：macOS Mojave 10.14所需软件： OBS + soundflower 查了了有几篇文章介绍，但是有些方法已经过时，这里重新列一下。 整体可参考这篇文章：https://event.livehouse.in/zh-TW/tutorial/obs-mac.html 其中 soundflower的 安装说明，这里下载文件： zip 羞涩的放上直播房间：b站 5551036，不定期直播学习激励一下自己？]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>直播</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018 年度总结：生命在于折腾]]></title>
    <url>%2F2018-12-27%2F2018-summary%2F</url>
    <content type="text"><![CDATA[相比于上一年，2018 年让我觉得满意很多，无论是生活、工作还是阅读和写作，都有很多收获。经历几个月的实习之后，最终在读研和工作的摇摆中，决定先到工业界试试水。 这一年奔波回过头来看这一年，从武汉到北京再到深圳，最后回到武汉安心准备秋招，不可谓不折腾，但是结果导向来看，每一次折腾都是有意义的，折腾的过程中，对于自己想要什么、怎么做，有了更清楚的答案，同时也锻炼的更加果断，遇事当断则断，注重计划，就更要付诸行动，想到就去做，之后再来评估结果。 学习这一年里，真的活脱脱 像个海绵，疯狂汲取新的知识，真要感谢那个时候的我。念书的时候，老师常说一句老话，“苦不苦，想想长征两万五，累不累，想想革命老前辈”，你别说，这句老话对我来说很是受用，仿佛某些神秘的东方咒语。其实在这方面，父亲是我的榜样，最开始他是教师，后来转行出去做一些工程建筑的苦活累活，但是仍然自学计算机，当然，并不是计算机，主要是 office、AutoCAD 等建筑上要用到的东西，听他说经常是学习到凌晨三四点钟，也算功夫不负有心人，后来勉勉强强混了个工程师的 title。我那时候也是一样，刚去的时候，会的不多，不会的却很多，什么都要学，在学习方面，我是最不害羞的，一定是打破砂锅问到底。 坚持在北京实习的时候，不适应气候，刚去的前两个星期，几乎每天都要流鼻血，而且是血流不止，第一次在公司电梯里见到张一鸣的时候，就是正留着鼻血紧紧捂着鼻子，生怕吓到了别人。那时候甚至觉得自己是不是得了什么怪病，将要命不久矣，后来去医院花 60 块钱挂了个专家号，两块钱买了一种药膏，回来涂上数日，就完全好了。那时候不可谓不拼，常常是低头敲着键盘，鼻血就流了出来，还不愿意请假，真是年轻人无谓的执拗。现在看起来，这种所谓坚持似乎有点可笑，但是那时候的状态就是那样，觉得自己带病坚持，顶着巨大的困难在坚持，后来才明白这种困难其实是自己人为造就的——炎症+天气干燥，流鼻血再正常不过。 实习、工作北京：3 月 - 6 月第一次去北京是高考刚结束的第二天，赶着去参加侥幸选上的北京大学博雅计划初试。当然，自然是没有通过的，不然也没有之后的种种。偶尔也会想，如果那时候更幸运一点也许就哈哈哈哈哈… 说来也巧，当时只是抱着试试的心态投了简历，就莫名其妙被选上了清华自强计划和北大博雅计划，这两个大体上都算是自主招生类，可以降分录取，印象中最高可以降 60 分，很是激动了一段时间，但是人生啊，总是调皮喜欢挑逗你，叫你心痒痒。从北京回来之后，还会经常想着它。 第二次去北京，正赶上冬天，那时候刚开始整改污染问题，雾霾很严重，PM 2.5 指数经常爆表，几乎每天都是重度污染，要带着厚厚的“防毒面罩”出门。 在知春路的日子，回忆起来是很快乐的，实习生嘛，没有压力，做好分内的事情就好了。周末经常和朋友一起开开心心去玩耍。 关于实习，已经有很多的记录，可见博客 tag： 字节跳动 深圳：7 月 - 8 月在腾讯度过了一个快乐的暑假，具体可以参见：微信支付 tag 实习结束，顺便去上海参加了 2018 Northeast Asia Community Summit，算是增长见识。 武汉：9 月 - 12 月这段时候是最充实也是最痛苦的一段时间，秋招嘛，很多人都会经历的事情。日常就是刷刷题，满满当当的日程安排。拿到几个还不错的 offer 就草草结束了，实在是很累。当然，如果回头看，很多地方可以做的更好。 秋招之后的日子，竟然有点记不起来了，应该是很快乐的一段肥宅生活。 秋招准备的时候也写了一些面试记录，可以在这里看 面试Category 读书时间过了太久，已经记不清读了哪些书，这一年倒是写过一些读书和电影的 文章。 电影其中一部分记在了豆瓣，但是往往是集中标记，顺序不一定正确，标记的大概是 1/4 吧。 豆瓣：https://movie.douban.com/people/hellocz/collect 写作继续发展自己的写作爱好，开始广泛的“写作”，回头来看，这一年写了很多日常主题的文章，有些是无病呻吟，有些是个人总结，有些是日常思考，不仅仅是技术方面。之前就意识到入门级别的文章要少些，深入的文章往往需要很多的积累，一时不知道如何写，在自我提升这块就以刷课为主。 写在最后自己的简历，在这一年里稍显丰富，记得大二第一次投实习的时候，简历关都没有过，笑。 这里想稍微提一下，有一些朋友看到文章之后联系到自己，有些是技术上的探讨，有些是经历上的共鸣，每每收到反馈的时候，都觉得很感激，所以欢迎联系我啦，还有一些好朋友说会定期查看我的博客，更是开心了，更新也更有动力。 记得最开始写日记的那个暑假，是被我爸拿绳条抽着开始写的，哎，那次可疼了。所以很长一段时间，对于日记都很抗拒，这些老一辈的人，只懂得棍棒教育。当然，我爸很少动手，印象中屈指可数，这是其中一次。 相比之下，我妈就聪明很多，小时候叫我写作文，不太乐意，找了个理由说“每天都是从早些到晚的流水账，没有素材哦”，我妈就带着我去姥姥家，美名其曰找素材，还要弃车不用，一路步行过去，那天写了什么作文早已经不记得，那一路上的快乐总是能想起。所以后来，很多事情遇到瓶颈的时候，都喜欢出去走走，百试不爽。 最后，希望自己未来的路，能够走的更加轻松，更加坚定，同时有更多的路可以走。]]></content>
      <categories>
        <category>年度总结</category>
      </categories>
      <tags>
        <tag>年度总结</tag>
        <tag>实习</tag>
        <tag>总结</tag>
        <tag>恋爱</tag>
        <tag>未完待续</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习的动力来自哪？]]></title>
    <url>%2F2018-12-26%2Fthe-motivation-of-learning%2F</url>
    <content type="text"><![CDATA[深夜乱想的时候，难免想到一些深层次的话题。 虽然学的不好，但一直在学。我学习的动力，则更多的来自赞赏和愧疚。 赞赏奖状我上小学的时候，只有学前班，没有像现在这样分幼儿园大班小班，那时候的学习动力来自我妈的督促。 每天睡觉之前，我妈要给我出一些题目，用她的说法是“我们一起算题”，那时候极为受用，很开心的学。期末拿了奖状，当时的校长笑说着，你给自己的孩子发奖状啊哈哈？ 我那时候不懂，我妈听了却如同蒙羞，对于她、对于我都是。于是叮嘱我一定好好做功课。 接着一年级换了一个老师，依然得了奖状，校长便不说话了。后面小学中学每个学期都会得一个，我妈也每每得到炫耀的机会，“你们看，当初我老儿自己拿的奖状，赵二（校长的外号）还说是我自己给的”。 我爸每年回来，最开心的就是看我的奖状，他们把奖状贴在客厅的墙上，让每一个到访的客人都能看到。这一点似乎是每一个能拿奖状的家庭，不约而同的传统。有时候还会抱怨，这些奖状为什么大小不一，排列起来不是很整齐，效果不能达到最好。 之后有了相机，还要拍下来，留存。我爸的相机，我猜多少存储空间都是不够的什么都要拍，而且连续拍很多张。 说到我爸，小时候他给我买过一个书包，后面写了几个字三好学生，他一直都说这是好兆头，买的很对，让我当了好几年的三好学生。 自高二开始，进到一个很厉害的班，就拿不到了。平时没有的时候，不觉得稀奇，拿不到了，就十分不适，有人问到为什么没有就要假装潇洒说一句就是没有呗。 有一天家里装修，把之前的奖状拆掉。我爸叨叨了很久，说没有好好保留那些奖状。现在想想倒是一件轻松的事情，一来免得时刻提醒我已经不是个三好学生，而来若是到了我这个年纪，回去还要每天看到那些从幼儿班开始的奖状，真的是羞愧万分了。 夸奖 小学校长：由不信任到夸奖的转变 前面提到过我们的校长，虽然怀疑过我奖状的真实性，但是到了自己教我的时候就不再怀疑，甚至说出“如果我们班多几个曹真该多好这样的话”。这句话也让我记了这么多年，毫不夸张，很多时候我开始自我怀疑的时候，就会想起这句话，说服自己，自己并不没有那么笨，只要努力就可以了。 姜老师：曹真这辈子数学考不到满分 小学一位数学老师，姜老师，似乎是体罚过我，因为我太过大意，大意到某一次期末考试，数学只写了第一面就交卷了（没看到第二面）。他甚至说过“曹真这辈子数学考不到满分”的绝妙预言。 这句话一开始我是不信的，后面实践检验起来，真正考过满分的数学答卷，应该不超过个位数吧，我后面自己也慢慢相信了这句话。 摇头晃脑如同老式学堂的老师 中学有位语文老师，发量不是很多，个子不高，瘦瘦的，最喜欢卷起书拿在手上摇头晃脑的念课文，还有一句金句“我说这个你听懂了没有啊？”，说的时候一定要身体前倾，脑袋往地里戳来强调，让我一度以为在读私塾。 虽然这样描述，看起来不是一个很正面的形象，但是我其实极尊重他，或者说我是尊重我的每一位老师的。 当然也许是因为他曾经叫一位同学起来念我的作文，然后拿着书身体前倾脑袋往地下戳说，“我说这个作文你们听懂了没有啊？” 当时我真的欢喜到了极点，平时我作文不慎认真，而那一篇文章我恰好花了心思去写，似乎还有真正的感情，但此时我已经完全记不起那篇文章的题目。当时的体会，就像伯牙遇子期，自己认真写的东西被挖掘出来（因为印象中老师没有在班里读过多少篇学生的文章，多半是课文），甜滋滋的想到，这位老师是懂得语文的。 “慧眼识珠”的班主任 刚升入高中不久，就因为犯了事情被叫进办公室谈话，当时的班主任（原谅我已经不记得他的姓名），他没有大篇幅的训我，反而是夸我是有潜力的人，称我“一定可以考到班级前十”，但那时候我似乎全班排名40左右。我得到了极大的鼓舞，果真期末的时候考到班级第一，也考到了那个实验班，也宣告了痛苦高中生涯的开始。 从这一点讲，我并不十分感激。 当然后来也慢慢意识到，他的慧眼识珠，只是随口说说，一切更多的是意外。 愧疚不知道怎么植入的一种感觉吧，玩久了就要学，所以经常因为愧疚而开始学习。就像现在，深夜开始码字。 高中进了实验班，身边人都太厉害，所以因为愧疚而跟着熬夜学习。 一直在讲大学之前的事情，大概是因为觉得自己，大学之后从未端正态度，如我爸教的，坐在书桌前，读书写字一尺一拳一寸吧？ 尾注写文章总是忍不住写的废话很多，这样不好，要精简，精简到尽可能没有多余的字。 看别人文章的时候会发现，作者会在不同的地方提起一件事，但往往不尽相同，我似乎也是一样，会重复提到一些东西。希望自己的生活更精彩一些，能写的东西多一些，重复的东西概率更小。]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>回忆</tag>
        <tag>学习</tag>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习的优秀编程习惯]]></title>
    <url>%2F2018-12-15%2Fmachine-learning-coding-tips%2F</url>
    <content type="text"><![CDATA[跑别人的代码的时候，总是会遇到很多坑，一开始会觉得哇我这么菜，踩这么多坑，后来仔细想想其实不同的代码，质量不一样，另外，不用的库，readme质量差别会很大。 这里也立一个flag，自己以后写一些项目，一定力求把遇到的问题都写清楚，做好一键配置，方便后来人重现。 做好实验记录完整的实验流程写清楚前期数据准备、环境依赖、代码版本，说明流程。 尽可能完善全面的信息，参考链接、文献等。 备注需要注意的地方 遇到的问题遇到的问题，如何解决 总结总结、评价整个流程，哪里有可改进的地方。]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>编程习惯</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[链表高频算法题及其解法]]></title>
    <url>%2F2018-12-09%2Flinked-list-tag%2F</url>
    <content type="text"><![CDATA[整理之后想起来LeetCode自己家出过一个类似的汇总Orz，大概是最近真的太闲了，想整理下刷过的题目，老实讲之前刷的题并不多。 LeetCode领扣的公众号做得很好，有时间回去翻翻看。 面试专题 | 链表操作 专题 | 链表类算法精析（下） 单链表反转题目描述输入一个链表，反转链表后，输出新链表的表头。 解法： 1234567891011121314151617# -*- coding:utf-8 -*-# class ListNode:# def __init__(self, x):# self.val = x# self.next = Noneclass Solution: # 返回ListNode def ReverseList(self, pHead): if pHead == None: return pHead pre = next = None while pHead != None: next = pHead.next pHead.next = pre pre = pHead pHead = next return pre 链表中环的检测题目描述141. Linked List CycleGiven a linked list, determine if it has a cycle in it. To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list. 题解1234567891011121314151617181920212223242526272829303132# Definition for singly-linked list.# class ListNode(object):# def __init__(self, x):# self.val = x# self.next = Noneclass Solution(object): def hasCycle(self, head): """ :type head: ListNode :rtype: bool """ # Given an empty list if not head: return False # Initialize two pointers slow = head fast = head.next while fast and slow: # Two pointers would finally come to the same node # when there is a cycle if fast == slow: return True if fast.next: fast = fast.next.next slow = slow.next # fast.next is None means that there is no cycle else: break return False 有序链表合并题目描述Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists. Example: Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4 题解12345678910111213141516171819202122232425262728293031# Definition for singly-linked list.# class ListNode:# def __init__(self, x):# self.val = x# self.next = Noneclass Solution: def mergeTwoLists(self, l1, l2): """ :type l1: ListNode :type l2: ListNode :rtype: ListNode """ returnNode = ListNode(-1) headNode = returnNode while l1 != None and l2 != None: if l1.val &lt;= l2.val: returnNode.next = l1 l1 = l1.next else: returnNode.next = l2 l2 = l2.next returnNode = returnNode.next if l1 == None: returnNode.next = l2 elif l2 == None: returnNode.next = l1 return headNode.next 删除链表中倒数第n个节点题目描述19. Remove Nth Node From End of List Given a linked list, remove the n-th node from the end of list and return its head. Example: Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2. After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5. 题解1234567891011121314151617181920212223242526272829# Definition for singly-linked list.# class ListNode:# def __init__(self, x):# self.val = x# self.next = Noneclass Solution: def removeNthFromEnd(self, head, n): """ :type head: ListNode :type n: int :rtype: ListNode """ dummy = ListNode(0) dummy.next = head l = r = dummy for _ in range(n+1): r = r.next while r != None: r = r.next l = l.next l.next = l.next.next return dummy.next 求链表的中间节点题目描述876. Middle of the Linked List Given a non-empty, singly linked list with head node head, return a middle node of linked list. If there are two middle nodes, return the second middle node. 题解1234567class Solution(object): def middleNode(self, head): slow = fast = head while fast and fast.next: slow = slow.next fast = fast.next.next return slow]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019年算法岗就业分享 | 总结篇]]></title>
    <url>%2F2018-12-08%2Fa-summary-of-my-university%2F</url>
    <content type="text"><![CDATA[Keynote地址： 就业分享Keynote-曹真.pdf 之前给学弟学妹们做的就业分享，整理之后发出来，算是对自己大学生活的总结。 大家好，我是2015级软件工程系的曹真，很感谢黄老师的邀请，有这样一个机会和大家一起交流就业相关的事情。 我今天的分享，标题叫做《恰当的时间，做恰当的事情》。 我会分成三个部分来介绍，个人的实习求职经历，一些经验以及附录，附录部分是供大家参考，不会展开讲。 一、个人经历首先我想回顾一下自己的经历。 大一我和在座的很多人一样，大学之前没有接触过编程，其实我最开始是读了一本《乔布斯传》，觉得计算机/互联网很酷，大一的时候，就想开发一款iOS的APP，所以通过慕课学习了斯坦福的一门Swift课程（CS193p） ，不过一开始就遇到很大的困难，那个课每年都更新，我喜欢看最新的，最新的视频没有中文字幕，看得很痛苦，一边查单词一边学。之后又补了Objective-C的教材，也是咬着牙看完，再接着就联系学院的老师，参与开发了一个实验室iOS外包项目，那时候很多东西都不懂，好在有一位13级的学长，能力很强，也很有耐心，手把手教我如何debug，让我有了一个很好的编程初体验，我也一直很感激他。 软工专业的同学，大二开学的那个暑假，会参加学院组织的暑假实训，几个人一起组队完成一个项目。那时候我第一次作为队长，和几个朋友一起开发了一款基于Cocos2d-x的小游戏，技术栈是C++。第一次独立组队做东西，经验不足，所以一直到最后一天，还在熬夜改代码、调试以及准备第二天的presentation。 感觉很刺激，那时候我第一次真切的感受到编程的魅力，当我玩着自己和队友一起做出来的小游戏，那也是我这个大学里面最有成就感的一个项目。 大二大二的时候开始做一些Java后台的项目，然后参加花旗杯、intel杯等比赛，顺势开始接触数据挖掘、深度学习（也就是大家通常说的AI）。也正是这个时候，开始觉得哎好像我对这个很感兴趣，不妨继续做下去。 因为开始的比较仓促，也是缘起巧合，所以我深知自己基础方面需要补足，有了之前的学习经历，斯坦福的CS231n课程、Andrew Ng的课程学习起来更加得心应手，李航老师的《统计学习方法》、周志华老师的《机器学习》等，成为启蒙读物，《论语》中说：“学而时习之，不亦说乎？”，我现在也经常翻阅，开卷有益。 我注意到大家似乎已经对机器学习这块有浓厚的兴趣，个人觉得这是好事，但是大家千万不要觉得跑几个Demo就算入门了、看几个网课就算了解，还有很长的一段路要走，当然，如果大家从本科开始学习，那么等到研究生阶段的时候，就会达到更好的水准。我个人不建议走算法的同学本科直接就业。（真香现场） 其实等大家到了大二就会发现，身边有些人已经成了大腿，而有些人则成了大腿挂件。到了毕业的时候，那些大腿更粗，挂件则往往挂斗挂不住了。 高中班主任最喜欢说“优秀是一种习惯”，优秀的人会更加优秀。季羡林小学初中的时候成绩不错，但只是班里前几名，有一次不小心考了甲等第一，当时的山大校长、教育厅长、前清状元亲笔写了一副对联和扇面奖给他，之后他的虚荣心就被抬起来了，从此认真准备考试，两年之内，四次甲等第一，后来更是同时拿到北大和清华的录取，说的便是优秀成为习惯的故事。 我们身边的很多大腿也是一样，可能一开始没想做大腿，一时被人夸，之后也就只能对自己加强要求，继续做大腿，不然就失了面子，因此硬着头皮上。 大三因为提前修了很多学分，所以大三的时候基本没什么课，也得益于我校开明的政策，所以开始准备去企业实习。 当时选择了两家企业，分别是北京的字节跳动和深圳的腾讯微信，做的主要是机器学习方向。 在头条实习很有感触的一句话，这里也分享给大家：“在头条，没人把你当做实习生，你也不要把自己当做实习生”，意思就是要时刻以正式员工的标准要求自己，不要因为自己是实习生就懈怠。 在头条的日子真的很开心，每天很充实的学习新东西，工作上也有自己独立负责的部分（虽然搞出过问题），周末偶尔和盆友一起逛吃逛吃。不过刚去的第一个月，因为天气太干，经常性流鼻血，止不住那种，那时候想啊是不是放弃算了，但后来还是咬咬牙坚持下来，好在第二个月也就适应了天气问题。 后来去腾讯其实是个巧合，中间拿了实习offer，本来准备回校参加实训，后来朋友提醒实习可以抵实训，索性去了腾讯，就当体验。不得不说，体验确实不一样，两家差别极大的公司。这些在之前的博客里写过一些，不再赘述。 对于腾讯的那段实习，其实要有一个很深的 反省：心态一直没有调整过来，总觉得做一些所谓粗活不能很好的提高，所以没有尽全力去做，后来实习结束，非常后悔。很多鸡汤文都说，年轻人要耐住性子从基础的事情做起，把做基本的东西做好，道理我都懂，但只有经历才体会深刻。 一定要摆正心态，扎扎实实做事情。 大四今年9月初实习结束，开始参加秋招，有段时间特别痛苦，因为竞争压力实在太大了！在微信实习的时候，我们组有十个实习生，有浙大、北大的好出身，也有发了一堆paper的学术达人，其余除了我也全都是硕士。 总之从背景上来讲，我丝毫不占优，到了秋招的时候尤其明显，很多算法岗甚至直接写学历限研究生以上，本科被拒之门外。 一度也想到要放弃，坦白讲我要开始并不是冲着所谓的算法高薪，只是单纯的感兴趣，如果我能提前得知今天的校招情况，我说不定会选择一个别的方向，也许会轻松许多。 因为一直在实习，所以秋招准备的比较晚，不过好在没有放弃，结果也还不错，后面陆续拿了几家公司special offer，最后选了上海拼多多。原因也很简单，面向薪资编程。 如果强行做一个总结的话，其实大一到大四大概是我理解的恰当时间做恰当事情，先打好基础，然后确定好专业方向，接着去大厂实习丰富简历，最后秋招的时候好好总结沉淀。 有些同学，包括当年的我，觉得我既然选择就业的话，那我就不需要care绩点之类的东西，我可以很负责任的告诉大家，绩点很重要！在面试的时候，如果你能拿到甲等及以上奖学金，是很好的加分项。多说一句，如果有人告诉你说什么，大学不挂科就不完整之类的话，请务必拉黑他。 二、建议和体会明确就业方向如果准备本科就业的话，首先要明确自己未来从事什么方向，这里我根据今年秋招的情况列举了5个大方向，分别是前端、移动端、算法、大数据和其他（当然这里指的是技术序列，也就是不包括产品、设计等）。从今年来看，移动端和后端仍然是需求最大的。 这么多方向，我要选哪一个呢？ 我的建议是兴趣+时代，首先你要感兴趣，知道自己感兴趣的最佳办法就是多尝试，多尝试几个方向，你自然知道自己喜欢什么了。还是就是要顺应时代， “一个人的命运啊，当然要靠自我奋斗，但是也要考虑到历史的行程”。就像这几年机器学习火热，仿佛不知道点相关的东西就显得落伍了。当然，顺应潮流不是无脑从众，一定从事这个方向，而是说你不能拒绝潮流。尝试之后不喜欢，再试试别的也不无妨。 当然还有一个观点是这样，学到最后都是全栈，一些外企招聘尤其如此，多学一点，总归是没错的。 结识优秀的人还有就是建议大家多结识优秀的人，优秀的人能对你的决策起到积极的指导。包括学生、老师等，多和他们沟通，寻求他们的建议和指导。我个人很不喜欢圈子一说，但是往往你会发现，很多时候一些自然而然的圈子就会形成。 建议大家经常走出自己的小圈子，去看看外面更大的圈子。 说完大方向，我们再说说一件很实际的事情，我们如何学好一项技术？ 我推荐的方法是基础理论、动手、实际开发最后深入理解。 这里也给大家分享一个关于碎片阅读和体系化学习的观点，来自微博上的爱可可老师，学东西最重要的是形成网络，我们很多时候喜欢看一些零散碎片化的东西，比如博客、公众号推文，但是这样零散的阅读，第一难以取舍，第二不知轻重缓急，最重要的是，没有体系，碎片化的信息无所依附，也就难以留存。所以最重要的是先形成体系，之后再通过碎片填充。 我们接着算法这个方向，假设你选择了算法方向，而且你准备本科直接就业，那你可以做些什么丰富你的履历呢？ 我建议从以下五个方面入手： 这里我列举了几个算法方向的，其余方向也大同小异。这里尤其圈出来的是第二项，coding能力这几年越来越重要，推荐大家及早开始刷题，早上起来上课没有精神，先刷一道LeetCode提提神。现在的面试套路是，你的学校决定你是不是过简历关，接着面试先写题，题写出来了再继续聊，写不出来就沙扬娜拉。 前面我们说了在校的一些准备，接着我们再说说毕业时的事情。 首先，首先应该恭喜大家选择了一个非常不错的专业，计算机专业这几年正是风口上的猪，薪资一路走高。 华科有一个十几个人的本科生团队，平均年薪更是达到了40w，恐怖如斯。 也有一些观点说，现在应届生的年薪过高，对新人来说是一种捧杀，市场终将冷静下来，但什么时候冷静，我们就不得而知了。 最后我们再回到分享的标题，恰当的时间，做恰当的事情，希望大家都能规划好自己的大学生涯，目标清晰，不浪费时间，毕业的时候不要有后悔的事情。 之前大三也写过一篇同样类型的文章：即将步入大三的学长给CS专业新生的一些建议，虽然幼稚还是列在这里。 学院推文： “一年级计划” | “寻路”大学生生活规划讲座开讲了]]></content>
      <categories>
        <category>大学总结</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>大四</tag>
        <tag>字节跳动</tag>
        <tag>腾讯</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[老人的教导]]></title>
    <url>%2F2018-11-26%2Fa-conversation-with-an-old-lady%2F</url>
    <content type="text"><![CDATA[“等我回来的时候，我的邻居、那些街道全都没了。” 一次交谈在食堂戴着耳机拿玩手机吃饭，一个衣服略旧的奶奶，凑到我旁边说了句“不要这样吃饭，对身体不好”，我连忙摘掉耳机说恩恩好的。 奶奶转身拎着一包吃的走了，刚走几步又返回来，跟我说了一些没来头的话。 她上来就说，学生你要好好读书，要知道，不是谁都上大学的。我点头称是。 接着又说，电视剧里的日本人侵略中国的情节，都是真的，那些是把事情拼在了一起。我今年85岁了，37年鬼子来的时候，我已经记事了，那些我都记得。 日本人用飞机炸武汉的时候，家里人把我藏进山里，等我回来的时候，我的邻居、那些街道全都没了，那些电视里面演的日本人侵略中国都是真的，我亲身经历过。 我叫奶奶坐下说，奶奶说我不坐，一会就走了。大概是觉得我眼神有点迷茫，害怕我不信，奶奶说自己是武大的（具体什么，这里没听清，但是没有问），说着还拿出一张武大的饭卡。 学生你们要好好学习，要吃食堂的饭，食堂的工作人员定期要体检，不要吃外面小摊小贩的东西，像肝炎都会传染，可能不干净，还有要小心别摔了，别让家里人担心，保护好身体，不要让家里爸爸妈妈爷爷奶奶操心。 我现在还订报纸，日本还是不老实。你们要好好学习，将来保护国家就靠你们了，不能再让日本那么侵略我们了，现在的炸弹，威力比那时候更大了。 我不知道怎么接话，只是不断说，恩，是的，我知道，奶奶说你还不错，我是作为一个长辈跟你说这些话哈，说的时候笑了笑。 奶奶最后说了句，“我今年85了，我再也没有84岁了，你们不一样”。 后记回来的路上一直在想这次奇怪的谈话，我坐在食堂里，一只手拿着筷子，奶奶拎着一包东西撑在桌子边。 不断的想，遇到的这位奶奶是怎样一个人呢？我的姥姥姥爷，他们也是80高龄，但他们从未和我提过那种战争，我也从未问过，除了我妈转述的“只记得要过一个桥，日本鬼子架着枪往河里扫，我们就跑，跑，跑”。 忘不了那句，“等我回来的时候，我的邻居、那些街道全都没了”。 这是我在现实中，离那场战争最近的一次。]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>战争</tag>
        <tag>学习</tag>
        <tag>交流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为什么不舍得放下手机]]></title>
    <url>%2F2018-11-23%2Fwhy-do-we-stay-up-late%2F</url>
    <content type="text"><![CDATA[不知不觉离不开手机了，自己是爱好科技的，不曾想拜倒在科技的石榴裙下。 之前也提到，最近经常晚睡，作息不规律，一直试图找原因，似乎原因一找到，结果就明了了。 惯性长久以来，养成了晚睡的习惯，每次到了时间点不困，甚至困了也不想睡，想随便找点事情做，总之先不睡就对了。 正在做A事情，看到一件B，跳出去做B，之后又开始做C，总之不能专注。 就像一个栈，栈的深度不断加深。之后要再每一次进入新的栈时，记住栈的入口，然后尽快跳回来。 电子设备的依赖手机里有什么呢？ 微信、信息流软件、购物，无尽的打扰。 自制力自制力严重不足。说好XX时间点上床还有拖一会，说好XX时间点关手机还要再刷10min。 做一件事情，就快速完成，完成之后再去关心别的，不要被轻易打扰。 休息5min就是5min，不要拖延。 头脑不清楚的时候出去转转。 时间规划不合理学习、娱乐、锻炼，时间组成的把握，如何恰当的安排？ 最后，希望自己今天能如约早睡。]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>熬夜</tag>
        <tag>自制力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书和写字]]></title>
    <url>%2F2018-11-21%2Freading-and-writing%2F</url>
    <content type="text"><![CDATA[最近一直关注作家王蒙的微头条，先生自开通头条账号之后,基本每日更新一段,多为生活琐事，读来却不枯燥。 之前看季羡林的《清华园日记》，他是尽量每日写一点，即便是空无一物的流水账，猜想这也是很多人的日记形式。 日记很好，我常过了一段就记不得之前发生了什么，自己说过的话，做过的事情，都忘记的很快，回顾的时候偶尔翻到只言片语，觉得陌生。 不过转而想，是不是要记那么多东西呢？有些是不是忘记更好？ 许多作家在谈到写作的时候都会提到坚持二字，只有持之以恒的阅读和写作，才能写出有价值的文字。任何事情都一样，持久有质量的输入，才有高品质的输出。 Garbage in, arbage out。 情绪管控最近心情一直不算好，秋招结束又暂且没有找到持续可做的事情，一时陷入“空虚”。 还是想着学习提高技术，但是总也不能坚持，每次只是浅尝辄止，不能持续学习；加之学习的时候东一下西一下，方向感不明确，于是整个人就很恍惚，心理想着工作之前多充电，实际却没有插上插头。 运动，断断续续，若是哪天走了上万步就觉得满足；旅行，说了很久的旅行，总也没有出发。阅读，倒是一直在做，漫无目的、没有功利的读。 自己带有一定的功利性，嘴里说着享受最后的大学时光，但是其实没有过的很享受，以至于起了去实习做点正事的念头，作息时间也很糟糕，总是睡的很晚，第二天很晚才起。 哪一天没有学习，就感觉虚度了时光，即便是玩，也不能开心。 猜想是因为没有区分工作日和休息日，混合在一起，难以管控，是以学校总是一周休息几天，在校的时候便认真念书，回到家就好好玩耍。 传记某一天在地铁上开始读吴晓波的《腾讯传》，颇受激励，罕见买了无限会员，一天读完全书，当天觉得爽快，读完再想又觉得言之无物，总的来说是一篇合格的不带感情的传记，客观的描述了一些事情，失去了一些文学上的振奋和鼓舞，不像之前之前看的一些传记如沃尔特·艾萨克森的《史蒂夫·乔布斯传》，尽管看的是译文，仍能因一本传记而疯狂的崇拜一个人，大概是因为一些细节刻画的更加精彩，看完觉得印象深刻，久久不忘。 当然也有题材不同的原因，一个是为公司做传，一个是为个人，英雄主义色彩在沃尔特的书中体现的更多，看完之后会惊讶于乔布斯其人，仿佛乔布斯因苹果而生，苹果也因为乔布斯而伟大，而吴的书中，马化腾则更像一个抓住机会的普通人，好像如果另一个什么人抓住机会，一样能取得同样的成就。 当然只是自己对于书中描述幼稚的看法，无论是乔布斯还是马化腾，都是时代的骄子，绝不是别的谁能够轻易取代。 小说散步的时候路过图书馆，就会进去待上几十分钟，没有包的束缚，无需座位，读爽即走。常常是读着读着脚站麻了。 每次去多是去信图三楼的散文区，遇到一篇写胃口的便借回去详读。 莫言《捍卫长篇小说的尊严》一序：“长度、密度和难度，是长篇小说的标志，也是这伟大文体的尊严”，深以为然。之后重新看《红高粱家族》，真如同口技，置身其中，看到那个年代的高密，一件一件的事情真真切切地发生在眼前，或事小或事大。 罗汉大爷被活剥，奶奶被日本人射杀的场景，忍不住停下来歇息，让故事慢一点发生，之后更是余音绕梁，再想描述自己的感受却已经词穷。 电影《无名之辈》自己其实很懒，虽然平时很认交流可以滔滔不绝口若悬河，但是到了键盘上就捉襟见肘，似乎稍纵即逝，抓不住思路。 有时候都想尝试录下自己讲的话，事后再来慢慢打字。 饶晓志导演的《无名之辈》，很早看了预告片，似乎中规中矩，没有什么亮眼的地方，反倒是汪苏泷的一首歌，唱的风格有变。 后来看见韩寒推荐，便想着去试试看，是一部极佳的喜剧电影，无论是剧本还是演员的演技。 观影的时候，爆笑不断，也不时心酸、无奈，眼镜看到自己被恶搞，马嘉祺在两个陌生男人面前小便失禁，。 无论是穷人富人、正常人残疾人、大人小孩又或者男人女人，都有自己的故事，有自己的追求（通常情况下很难追到），虽然电影里结局多是美好的，我们知道只要努力一番就可以办到。但实际现实中我们面临的是无限的未知，你不能确认，你做了就可以得到。这期间可能你甚至会成为自己的敌人，如何说服自己，如何相信自己（你一定会质疑自己——在多次失败之后），继续努力。 《无双》感触最深，每个人都会有求而不得的东西吧，很多时候，后来所做的很多事情，都是在弥补那个求而不得。结尾太过真实，一度二刷。 《雪国列车》因为看过很多类似的东西，一开始就猜到很多，连带着整个电影想要表达的东西都不明朗了。 《无法成为野兽的我们》可能是因为要工作了，对剧里工作的部分感触颇深。一个人破罐子破摔，认为自己做不好任何事，于是不希望别人对他报有任何期待；另一个人不懂得拒绝，什么都揽在身上，什么都在走，什么出了错都要背锅。 纪录片《风味人间》每一集都在追，每周的这个时候大概是最开心的，就像小时候期待周末一样。]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>阅读</tag>
        <tag>写作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法岗面试方法论：以面代练]]></title>
    <url>%2F2018-10-27%2Fmachine-learning-interview-methods%2F</url>
    <content type="text"><![CDATA[秋招接近尾声，空闲时间多了起来，开始有意识的进行回顾总结。 作为书生，最擅长的莫过于考试，我也一直把面试当做考试，并且在参加的面试中有意识地练习。 一开始面试的时候，面试官看我做的东西太多，就随便问，漫无边际的问，一会NLP，一会ML，再一会CV，手忙脚乱、应对不及。到了最后几场面试，基本可以做到引导面试官去提问，把面试官带到自己的节奏里面来，把自己的所学全方位地展示给面试官。 当然，这样只是一种技巧性的弥补方式，如果能做到什么都会，也就任凭面试官提问了。 算法岗的面试，一般有简历面、coding面和综合面。 简历面这里其实有两个点： 简历怎么写、简历怎么讲。 简历怎么写简历要有干货。对于算法岗： 大厂实习经历，非划水 高质量paper 扎实的coding能力，LeetCode 200题你值得拥有 kaggle之类的比赛获奖。 不过这种比赛的作用看起来似乎也来越少，很多人都能水一个top 5%，当然，任何比赛如果拿到top10，都还是有说服力。 熟悉分布式框架、机器学习框架 如果上述这些都没有，我建议重新考虑下方向选择，算法和研发的薪资差距已经没有那么大。 简历要有针对性面试是针对岗位面试，所以投递建立之前，看看公司的招聘要求绝对是个好习惯，有针对地修改简历。 字节跳动-算法工程师JD 百度-算法工程师JD 如何介绍简历同样是很重要的一步，首先还是分块，背景+项目（实验室、比赛和实习等）。因为自己比较菜，没有paper，所以这部分就略过。 背景基础信息。一般就是一句： “你好我是XXX，武汉大学XX学院，XX软件，19年毕业。简历上写了四个项目，分别是实验室、比赛和实习时候做的东西，下面我主要介绍下实习时候做的东西。” 项目 项目背景，数据和业务背景 项目整体规划 核心技术，这时候要注重广度和深度 遇到的挑战，如何解决 自己负责的部分,这也往往是面试官最关心的部分，体现出自己在团队中做出的贡献 上面提到的几个点，不是每次都要全部讲，选择性的讲出来，但是准备一定要准备到位。 coding面实打实的硬功夫，基本没有什么技巧，LeetCode、剑指offer。 不过这里想说，心态很重要，coding和别的还不太一样，别的硬知识，会就是会，不会就不会，coding的时候一定要多和面试官沟通，如果一时没有思路可以寻求提示，快速破题。当然最重要的还是不断练习。 综合面综合面的时候，其实就会有匹配度的问题，如果做的东西，面试官很了解或者赏识自己做的东西，就可以聊的很开，不再是单纯的面试而是交流，交流实际做东西的时候遇到的问题，以及未来可以应用的场景。 以上是一些方法技巧性的回顾，真正通过面试，还是要靠平时的积累。]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>机器学习</tag>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[拼多多算法工程师（SSP），秋招结束！]]></title>
    <url>%2F2018-10-26%2Fmy-first-full-time-job%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>秋招</tag>
        <tag>拼多多</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[面试官：你是如何进行学习的？]]></title>
    <url>%2F2018-10-24%2Fhow-to-learn-a-new-thing%2F</url>
    <content type="text"><![CDATA[一、思考的由来近期参加技术类面试，经常被问到自己是如何学习的。第一次被问到，稍稍迟疑了一下，就开始跑火车现编，尽量显得有条理。 后来也开始思考，我们到底应该怎么学习，不管是一门语言（例如Java、Python）、一门学科（例如数据库），还是一个方向（例如机器学习），我们一开始接触的时候，应该如何恰当的入门和深入？ 也就是说，是否存在一些通用的学习方法，能够指导我们去学习新的事物？ 答案是肯定的。 二、抽象学习人与人的智力差距是恒定差距是存在的，但是如果抛开智力和努力程度，我们还是能看到，不同的人所取得的进步，还是不尽相同，我想在这个过程中，学习的方法是一个很重要的因素。 多般反思之后，渐渐意识到自己其实走了很多弯路，学习的方法也比较低效，希望之后能够多从优秀的人那里学习到先进的学习方法。同时这里做一个复盘，以求总结出一个套路、一个学习的方法。 我们首先来列举几个关键词。 兴趣、动力、时间、激励方式、外界指导、一本书、教程（或一个老师？）、实践等等 再来尝试串起来，在一个 系统性教程 的指导下，带着 动力 且使用投入大量的 时间 通过合理的 激励方式，去学习一件新的事物，并通过 实践 应用所学以求提高。 三、学习过程1.学习动力与范围学习的动力是什么？ 兴趣？工作需要？感觉很酷想要学？增长技能？ 明确动力其实很重要，因为有可能你发现，你其实不一定要非要进行这次学习，所以你大可在这个阶段取消学习计划，而我们往往会忽略这个过程。 动力或者目标不同，你所需要学习到的程度也不同，投入的时间也不一样，学习的计划自然也不一样。 打个比方，我如果只是想学做一道红烧肉，那我是不是需要了解红烧肉的前世今生呢？我觉得不用。但如果你是一位专业的厨师，这时候你可能需要对不同的做法都有了解。 2.系统性教程这个过程，可以用谷歌百度，选取排名靠前的推荐链接，或者去知乎寻找高赞回答里面的推荐。再或者通过身边的靠谱朋友、老师，进行推荐等等。（这样的说法也许显得幼稚，但是对于一些基础知识的获取，往往能够得到事半功倍的效果。） 这个教程，可以是书籍、课程、权威教程等，重点在于先获得high level的认识，之后再来填充细节。 3.激进的计划我们要通过确定一定的激进的激励计划，来帮助我们完成学习过程。例如，如果完成了今日任务，是否可以有奖励？如果没有完成，是否有惩罚？ 预期的完成时间？是否需要做哪些预先准备？可能会遇到的困难？ 如果有必要，可以配合一些工作法，例如番茄🍅工作法等，这个过程一定要明确清晰，进展或困难要及时记录，要能时刻看到自己的成长或困难。 4.投入时间你确定了初期的计划，这时候可以参考一万小时定律，当然我们并不一定是一万小时。你需要投入足够多的时间，来持续的完成这件事情。 任何完美的机会，没有时间的推动，都只是计划，无法落实。 5.实践我猜想，入门之后，进一步提高的方法就是实践了？ 读高质量的代码并努力理解，尝试自己动手写一些代码，进行一些深层次的尝试。 限于自身水平，这个层次我尚且不能解读。 四、总结所以总结来看，学习，无论是何种方式的学习，都会存在一套最朴素的方法论，虽然简单，但是抽象出来之后，再遇到新的东西，眼界会更加广阔，入门的速度相信也会有所提高。 最后，不妨抄录王国维《人间词话》中的一段话： “古今之成大事业、大学问者，必经过三种之境界：‘昨夜西风凋碧树，独上高楼，望尽天涯路’。此第一境也。‘衣带渐宽终不悔，为伊消得人憔悴。’此第二境也。‘众里寻他千百度，蓦然回首，那人却在灯火阑珊处’。此第三境也。”]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>学习</tag>
        <tag>分享</tag>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[头条、微信实习小记 | 美食篇]]></title>
    <url>%2F2018-10-13%2Fbytedance-and-wechat-intern%2F</url>
    <content type="text"><![CDATA[字节跳动：“没人把你当做实习生，你也不要把自己当做实习生”。 – leader 微信：“机会不是别人给的，是你主动争取的”。 – 同组的L君 现在回想，自己实习的时候，经常会误以为自己还在学校（甚至我都没有意识到），没有用职场的标准要求自己。 整理了一波照片，多图预警。 这其中，收获很多，但是回想起来，其实本可以收获的更多，但也就不苛责了。 一、字节跳动初体验已经忘记了怀着怎样的心情去到的北京——以求职者的身份，之前虽然去过，多是以一名游客的身份，我去了，便走了，不会长久的生存。 刚到北京那天，我挑了一家很便宜的宾馆，便宜到房间在负一楼（地下室），窗户打开会有一股奇怪的味道，是的我也好奇地下室为什么会有窗户，房间里设备不多，情趣类产品倒是满满当当。 后来我不止一次在想，我是太抠了还是在手动制造北漂的凄惨呢？我本可以住的好一些。 晚上我就打的去了头条总部，我不是第一次见到矮楼，第一次是在HR的朋友圈里， 注重个人成长在头条的时候，身边的人很喜欢“追新“：追随最新的技术。 主动自我充电，虽然会回去的比较晚，但是事情做完之后，身边的人都会选择看看书or看看慕课，进行自我提升。 组内的定期分享会、邀请的外部分享会，一向很受重视，leader也很鼓励大家参加。 清华大学崔鹏老师、李航老师 没人当你是实习生当你被安排开始做事的时候开始，就没人当你是实习生，你要严格要求自己，把事情做好，不存在toy项项目。 让你做一个项目的时候就完全信任你，给你完全的自主权。 这期间我其实犯过一次很多的错误，由我搭建、维护的某个平台挂了一个下午，但是当时组内已经非常依赖这个平台，回想起来还一身冷汗。 职场关系有一次leader找我说，你现在工作做得很不错，我也比较满意，但你要注意，你越是这样，越是要注意影响，注意你一举一动的影响，因为我夸了你之后，别人把你当做榜样或者示例去看待，你更加不能有做的不好的地方。不然别人就会觉得，你看，他是我们之中做的比较好的，他都完成的不好，我们就更无所谓了。 暂且把leader的夸奖当做惯用的勉励，但是回头想想，确实是这样。 小时候作为班长，总被老师表扬，开学的时候，同学们总喜欢问我作业是不是写了，如果我说是，他们就要说哦好惨啊，如果我说没写，那他们就很开心：“看，班长都没写，我们怕什么”。 所以我后来多数说没写，反正已经开学了，没得弥补，让同学开心点不是更好吗。 我的重点是我的同学，考虑的不是我的老师。但实际上，如果我是一名称职的班长，我应该一直都说我写了，并且真的写了。 这样讲似乎延伸的有些多了。但其实映射到职场里，是你如果处理和同事、领导之间的关系，例如当同事犯了错，你是选择在自己这一层catch然后帮助同事解决掉问题，还是直接向上抛出异常？ 作为一个新人，我当时选了前者，另外一位同事选了后者。如果是现在，我想会有更好的解决办法，能够更好的协调两者。 工作之余 团建 餐厅 二、微信 微信实习时间相对较短，但依旧受益匪浅。 和优秀的人共事明显感觉到，身边的人都非常优秀。实习生里也不乏top2硕士、浙大硕士，从他们那里能学习很多。 周会上不同项目的汇报，能够了解到各个领域的相关技术、难点和解决方案。 注重工程实现，快速迭代，要求极高的代码实现能力。 一开始是要做推荐相关，后来去了之后被要求做一些别的事情，难免有些小情绪，一个刚入职的小姐姐，来了之后却快速、主动的要求自己想做的事情。 业务比算法重要由于是业务主导部门，所以对于算法不是很看重，一开始很不适应。有点平A克制一切走位的意思，校招生难免喜欢折腾一下看起来高大上的算法。 美食 景色 潮汕牛肉火锅 烧鹅、白斩鸡 滨海大厦视角 一些奇怪的食物 出租屋视角 三、共同点注重锻炼两个不同的公司，两个不同的部门，都异常重视日常锻炼。 在头条的团队每周都要踢两次毽子，在腾讯频次就更高了，基本隔几天就回去，羽毛球、乒乓球、桌球甚至是篮球，周末的时候还约过保龄球。 篮球场 台球]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>实习</tag>
        <tag>微信支付</tag>
        <tag>字节跳动</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[快手、拼多多、华为、工商银行、招商科技、第四范式算法工程师面经]]></title>
    <url>%2F2018-09-19%2Frecent-records%2F</url>
    <content type="text"><![CDATA[陆续参加了一些秋招面试，这里将面试部分记录下来以便回顾。 一、快手 算法工程师一面项目 1.如何衡量社区划分的结果 2.算法题：AABBCDDEE 给一个数组，除一个数组外均为重复出现，要求找出单独的字母，时间复杂度尽可能低。（二分变种） 3.开放题：估算全国小龙虾一年的销售额 4.概率题：给一个硬币，正面向上的概率为p，反面向上概率为1-p，使生成1，2，3的概率相同 二面： 算法： 给定一个数组，按照字母序排序 [a,b,b,c,c,c,b,a,b,c]‘a’,’b’,’c’[a,a,b,b,b,b,c,c,c,c] 对 spark 的了解程度 介绍合并图的时候节点权重的处理方式 解释 graphX 里面的 aggregateMessages 解释 AUC 的物理意义 介绍 FFM 树模型和线性模型的对比 为什么树模型通常不需要对数据做归一化等处理？ 二、拼多多 算法 update： 2018-10-18 16:23:42 两轮技术面试都是，先撕代码再聊项目，手写的相对较快，面试反馈比较正向，后面给了SSP，最终也签了这家。 面试的时候聊了很多实习期间的东西，基本上整体回顾了一下自己的经历，复杂网络、推荐系统等东西都聊了很多，比较重视深度和广度，细节也问的比较多。 一面到现场发现笔试题都打印出来了，挑了笔试的一道题，讲自己当时的思路，然后手撕代码。 算法：二维矩阵中，重复数字组成的最大面积 接着主要在聊项目，顺便问了下相关的细节。 卷积和反卷积 池化和反池化 常见的 loss function 常见优化算法对比 SVM 原理 recall 和 precision 二面 算法：重复数字不连续排列 主要在聊推荐相关，然后聊了一些大数据框架，spark、Hadoop 等。 单特征选择有哪些方式？组合特征呢？ 正负样本不均衡，如何处理？ GBDT、XGboost 介绍一下？ 介绍下 NDCG？ 介绍 FM、FFM 数据倾斜一般怎么处理？ HR不表 三、华为 算法总共两面，具体不表。 面试华为的时候，其实发生了一件意料之外的事情，和一面面试官聊了一会之后，面试官说直接说，能不能和我商量去做偏工程的工作，因为目前投递的人太多，而且都是有 paper 或者有别的学历优势的候选人。 我听到也很尴尬，本来都准备说拜拜了，面试官拉着HR出去讨论了一会，回来说还是先给我通过，让我去跟综面面试官聊。 学历歧视，没办法，后来发了 offer，没接。 四、招商科技 算法一面java和数据库的基础部分靠着回忆答出来了，但是准备的不到位，之后要引起注意。 java 中 throw 和 throws 的区别 java 中垃圾回收算法 java 中静态变量和实例变量的区别 java 中多线程的实现方式 MySQL中 drop、delete、和 truncate 的区别（执行的操作、速度以及是否可回滚） 朴素贝叶斯介绍下？使用什么场景？ 机器学习常见的优化算法对比 常见的激活函数对比 二面某一个做反欺诈的leader，对我在头条和微信支付做的项目很感兴趣，就此延伸聊了很多。 HR不表 准备秋招的这段时间，应该说是心烦意乱，尤其是不顺利的时候，不禁产生自我怀疑，越是这种情况下下，也是要稳住心态，安心复习。 很早发了offer，最后拒掉了。 五、工商银行 算法一时兴起，参加了学院的现场面，尬聊一番。 面试完还有笔试，现场上机，就没去。 六、第四范式 算法一面 代码面写了一个代码题，然后一起讨论如何修改使时间和空间复杂度最优。 二面 leader面聊项目 据说第三面是联合创始人 联合创始人 陈雨强继续聊之前的实习项目]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>面经</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大四短期安排]]></title>
    <url>%2F2018-08-31%2Fwhat-am-i-going-to-do%2F</url>
    <content type="text"><![CDATA[2018年转眼已经到了8月，回到学校和朋友聊天难免提到未来的打算。实习了差不多半年的我，总有种不真切的感觉。 本来已经打定主意准备就业，最近遇到事情，一度动摇信心，工作还是读研摇摆不定。有时候甚至不想去想，寄希望于睡一觉醒来什么都好了。 计划总是赶不上变化， 这大半年来，很多变故发生，我也做了很多计划和决定，但世事往往就是这样，很难按照最初的规划进行，自己也偶尔在变动中迷茫，感到挫败，但最终还是释然。 我本就不是喜欢循规蹈矩的人，若是明天都已经清清楚楚，可还有什么意思？ 这里做一个梳理，给大四的自己定一个大致的方向，首先要对自己有信心（无论是工作还是读研），这样才能进行后续的安排。 读研？工作？目前的打算是，先集中精力找工作，如果有不错的工作机会，优先工作，随之大四的主要精力也是在自我提升上面，基础和提升都要做；反之如果不幸没有十分合适的机会，那就先至少拿一个保底的offer，之后不妨突击再试试读研。 大四计划基础 数学数学等基础 英语单词和口语，坚持扇贝打卡，有机会多出去练习 3.算法题数据机构、算法 自我提升 项目kaggle和其余的一些机器学习、数据挖掘和深度学习相关的比赛。 论文提升论文阅读和复现能力 3.科研项目尝试科研项目 旅游 国内一些一直很想去的城市，都要去试试看，风土人情，了解不同的文化背景等 国外韩国、日本和一些其余的毗邻的国家，原生态为主]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>大四</tag>
        <tag>就业</tag>
        <tag>读研</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018 Northeast Asia Community Summit]]></title>
    <url>%2F2018-08-25%2Fnortheast-asia-coummunity-summit-day%2F</url>
    <content type="text"><![CDATA[讨论的时候有个问题是，社区对你来说意味着什么，我的回答是发现。 发下更多的人，发现更多的有趣，又或者发现更大的世界。其实这也不仅仅是社区对我的意义，整个人生的意义应该都可以部分的归结于此。 其实有一些属于私人照片，个人觉得很有意思就一并放上来。（同行的是武汉科技大学的刘老师）]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>google</tag>
        <tag>GDG</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习秋招面试准备-02]]></title>
    <url>%2F2018-08-07%2Finterview-preparation-02%2F</url>
    <content type="text"><![CDATA[以秋招之名，督回顾之实，切不可舍本逐末。 在回顾的过程中不断总结，不断思考和提升。 因为以面试为主，所以多数但求快速全面，难免多求助了一些“嚼过的馒头”，只有涉及到具体细节，才会回到论文，仔细琢磨，不过总归也算有多得。 中学的时候，有位老师总喜欢说，知识是要串起来的，学习的时候要学习“一提提起来一串知识”，现在再回头想，非常有道理。独立的看某个知识点是远远不够的，必须要有知识体系，例如看到树模型，自然而然的想到同系列的一串模型、优缺点、损失函数、推导等，这样应该能帮助自己理解的更好。 自己在复习准备的时候，经常是看到 A 发现不甚了解，于是 Google A，之后在 A 的解释中发现 B 不懂，继续Google B，循环往复，有如递归，或者二叉树之类。回退的时候，成本也很大。自己还是要控制树的深度，不然树过深之后，横向长度就显得不够。 1.深度学习1.1 激活函数 激活函数总览 Sigmoid tanh(x) ReLu Leaky ReLU Maxout 1.2 Batch Normalization 作用 （1）加速收敛（2）控制过拟合，可以少用或不用Dropout和正则（3）降低网络对初始化权重不敏感（4）允许使用较大的学习率 需要注意的是，BN的mean和std在train和test阶段是不一样的，前者基于每个batch，后者基于整体数据。 code 1234m = K.mean(X, axis=-1, keepdims=True)#计算均值std = K.std(X, axis=-1, keepdims=True)#计算标准差X_normed = (X - m) / (std + self.epsilon)#归一化out = self.gamma * X_normed + self.beta#重构变换 paper：Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shift 1.3 调参 Grid Search 1.4 池化与反池化、卷积与反卷积 1.5 CNN参数、连接和输出计算 卷积层 例子： 池化层例子： 卷积计算复杂度 1.6 1*1 卷积核的作用？1、降维（ dimension reductionality ）。比如，一张500 500且厚度depth为100 的图片在20个filter上做1 1 的卷积，那么结果的大小为50050020。 2、加入非线性。卷积层之后经过激励层，1*1的卷积在前一层的学习表示上添加了非线性激励（ non-linear activation ），提升网络的表达能力； 1.7 激活函数神经网络中激活函数的主要作用是提供网络的非线性建模能力，如不特别说明，激活函数一般而言是非线性函数。假设一个示例神经网络中仅包含线性卷积和全连接运算，那么该网络仅能够表达线性映射，即便增加网络的深度也依旧还是线性映射，难以有效建模实际环境中非线性分布的数据。加入（非线性）激活函数之后，深度神经网络才具备了分层的非线性映射学习能力。因此，激活函数是深度神经网络中不可或缺的部分。 图示from cs231n Sigmod 优点：物理意义上最接近神经元，0，1输出可以用作表示概率，或用于输出的归一化（如）。缺点： Tanh Rectified Linear Unit(ReLU) 优点： 缺点： 即梯度可能会失活，梯度永远为0 如果使用 ReLU，要小心设置 learning rate，注意不要让网络出现很多 “dead” 神经元，如果不好解决，可以试试 Leaky ReLU、PReLU 或者 Maxout. Softmax 一个具体的例子 softmax建模使用的分布是多项式分布，而logistic则基于伯努利分布 多个logistic回归通过叠加也同样可以实现多分类的效果，但是 softmax回归进行的多分类，类与类之间是互斥的，即一个输入只能被归为一类；多个logistic回归进行多分类，输出的类别并不是互斥的，即”苹果”这个词语既属于”水果”类也属于”3C”类别。 2.机器学习2.1 逻辑回归 逻辑回归损失函数推导 2.2 机器学习基础 模型评估指标 1.准确率 accuracy 准确率(accuracy) = (TP + TN) / (TP + FP + TN + FN) 2.精确率precision 查准率 = TP/(TP+FP) 3.召回recall 查全率 = TP/(TP+FN) 4.F1 score F1 Score = P*R/2(P+R) adaboost为什么不容易过拟合呢？ 2.3 随机森林、GBDT 和 XGBoost GBDT和XGBoost的区别？ 1.GBDT以CART回归树为主，后者支持线性分类器，这个时候XGBoost相当于L1和L2正则化的逻辑斯蒂回归（分类）或者线性回归（回归）； 2.传统的GBDT在优化的时候只用到一阶导数信息，XGBoost则对代价函数进行了二阶泰勒展开，得到一阶和二阶导数；3.XGBoost在代价函数中加入了正则项，用于控制模型的复杂度。从权衡方差偏差来看，它降低了模型的方差，使学习出来的模型更加简单，放置过拟合，这也是XGBoost优于传统GBDT的一个特性；4.shrinkage（缩减），相当于学习速率（XGBoost中的eta）。XGBoost在进行完一次迭代时，会将叶子节点的权值乘上该系数，主要是为了削弱每棵树的影响，让后面有更大的学习空间。（GBDT也有学习速率）；5.列抽样。XGBoost借鉴了随机森林的做法，支持列抽样，不仅防止过拟合，还能减少计算；6.对缺失值的处理。对于特征的值有缺失的样本，XGBoost还可以自动学习出它的分裂方向；7.XGBoost工具支持并行。Boosting不是一种串行的结构吗?怎么并行的？注意XGBoost的并行不是tree粒度的并行，XGBoost也是一次迭代完才能进行下一次迭代的（第t次迭代的代价函数里包含了前面t-1次迭代的预测值）。XGBoost的并行是在特征粒度上的。我们知道，决策树的学习最耗时的一个步骤就是对特征的值进行排序（因为要确定最佳分割点），XGBoost在训练之前，预先对数据进行了排序，然后保存为block结构，后面的迭代中重复地使用这个结构，大大减小计算量。这个block结构也使得并行成为了可能，在进行节点的分裂时，需要计算每个特征的增益，最终选增益最大的那个特征去做分裂，那么各个特征的增益计算就可以开多线程进行。 XGBoost和lightGBM的对比？ lightGBM包含两个关键点：light即轻量级，GBM 梯度提升机。 LightGBM 是一个梯度 boosting 框架，使用基于学习算法的决策树。它可以说是分布式的，高效的，有以下优势： 更快的训练效率 低内存使用 更高的准确率 支持并行化学习 可处理大规模数据 概括来说，lightGBM主要有以下特点： 基于Histogram的决策树算法 带深度限制的Leaf-wise的叶子生长策略 直方图做差加速 直接支持类别特征(Categorical Feature) Cache命中率优化 基于直方图的稀疏特征优化 多线程优化 前2个特点使我们尤为关注的。 Histogram算法 直方图算法的基本思想：先把连续的浮点特征值离散化成k个整数，同时构造一个宽度为k的直方图。遍历数据时，根据离散化后的值作为索引在直方图中累积统计量，当遍历一次数据后，直方图累积了需要的统计量，然后根据直方图的离散值，遍历寻找最优的分割点。 带深度限制的Leaf-wise的叶子生长策略 Level-wise过一次数据可以同时分裂同一层的叶子，容易进行多线程优化，也好控制模型复杂度，不容易过拟合。但实际上Level-wise是一种低效算法，因为它不加区分的对待同一层的叶子，带来了很多没必要的开销，因为实际上很多叶子的分裂增益较低，没必要进行搜索和分裂。 Leaf-wise则是一种更为高效的策略：每次从当前所有叶子中，找到分裂增益最大的一个叶子，然后分裂，如此循环。因此同Level-wise相比，在分裂次数相同的情况下，Leaf-wise可以降低更多的误差，得到更好的精度。 Leaf-wise的缺点：可能会长出比较深的决策树，产生过拟合。因此LightGBM在Leaf-wise之上增加了一个最大深度限制，在保证高效率的同时防止过拟合。 xgboost在实现时还做了许多优化： 在寻找最佳分割点时，考虑传统的枚举每个特征的所有可能分割点的贪心法效率太低，xgboost实现了一种近似的算法。大致的思想是根据百分位法列举几个可能成为分割点的候选者，然后从候选者中根据上面求分割点的公式计算找出最佳的分割点。 xgboost考虑了训练数据为稀疏值的情况，可以为缺失值或者指定的值指定分支的默认方向，这能大大提升算法的效率，paper提到50倍。 特征列排序后以块的形式存储在内存中，在迭代中可以重复使用；虽然boosting算法迭代必须串行，但是在处理每个特征列时可以做到并行。 按照特征列方式存储能优化寻找最佳的分割点，但是当以行计算梯度数据时会导致内存的不连续访问，严重时会导致cache miss，降低算法效率。paper中提到，可先将数据收集到线程内部的buffer，然后再计算，提高算法的效率。 xgboost 还考虑了当数据量比较大，内存不够时怎么有效的使用磁盘，主要是结合多线程、数据压缩、分片的方法，尽可能的提高算法的效率。 随机森林和GBDT的区别？ 随机森林是一个用随机方式建立的，包含多个决策树的集成分类器。其输出的类别由各个树投票而定（如果是回归树则取平均）。假设样本总数为n，每个样本的特征数为a，则随机森林的生成过程如下： 1.从原始样本中采用有放回抽样的方法选取n个样本；2.对n个样本选取a个特征中的随机k个，用建立决策树的方法获得最佳分割点；3.重复m次，获得m个决策树；4.对输入样例进行预测时，每个子树都产生一个结果，采用多数投票机制输出。 随机森林的随机性主要体现在两个方面： 1.数据集的随机选取：从原始的数据集中采取有放回的抽样（bagging），构造子数据集，子数据集的数据量是和原始数据集相同的。不同子数据集的元素可以重复，同一个子数据集中的元素也可以重复。2.待选特征的随机选取：与数据集的随机选取类似，随机森林中的子树的每一个分裂过程并未用到所有的待选特征，而是从所有的待选特征中随机选取一定的特征，之后再在随机选取的特征中选取最优的特征。以上两个随机性能够使得随机森林中的决策树都能够彼此不同，提升系统的多样性，从而提升分类性能。 样本比例不均衡？ 1.过抽样（over-sampling）和欠抽样（under-sampling）：前者一般指简单复制少数类样本形成多条记录，缺点是容易过拟合，改进方案是：加入随机噪声、干扰数据或通过一定规则产生新的合成样本；随机减少多数类样本，缺点是丢失部分重要信息，学习的到不能代表大盘。 因为下采样会丢失信息，如何减少信息的损失呢？第一种方法叫做EasyEnsemble，利用模型融合的方法（Ensemble）：多次下采样（放回采样，这样产生的训练集才相互独立）产生多个不同的训练集，进而训练多个不同的分类器，通过组合多个分类器的结果得到最终的结果。第二种方法叫做BalanceCascade，利用增量训练的思想（Boosting）：先通过一次下采样产生训练集，训练一个分类器，对于那些分类正确的大众样本不放回，然后对这个更小的大众样本下采样产生训练集，训练第二个分类器，以此类推，最终组合所有分类器的结果得到最终结果。第三种方法是利用KNN试图挑选那些最具代表性的大众样本，叫做NearMiss，这类方法计算量很大，感兴趣的可以参考“Learning from Imbalanced Data”这篇综述的3.2.1节。 2.通过对正负样本分别加权，基于类别数量的加权处理。3.数据合成4.一分类（One Class Learning）、异常检测（Novelty Detection） 2.4 特征选择2.5 优化算法梯度下降，牛顿法与拟牛顿法拟牛顿法 优化的常见问题： 局部最小 ill-condition病态（对数据微笑变化的敏感度过高，数据稍有变化，输出改变很大） 3.NLPWord2vec2013 年，Google 团队发表了 word2vec 工具 。word2vec 工具主要包含两个模型：跳字模型（skip-gram）和连续词袋模型（continuous bag of words，简称 CBOW），以及两种 近似训练法：负采样（negative sampling）和层序 softmax（hierarchical softmax）。值得一提的是，word2vec 的词向量可以较好地表达不同词之间的相似和类比关系。 为什么传统的one-hot不适用？ 4.参考 知乎：如何解释召回率与准确率？ 机器学习性能评估指标 http://wepon.me/ LightGBM的并行优化 常见回归和分类损失函数比较 正负样本不均衡的解决办法 特征工程之特征选择 李沐团队：词嵌入：word2vec 梯度下降，牛顿法与拟牛顿法 机器学习岗面试总结 深度学习中的激活函数导引 lightGBM原理、改进简述 陈天奇：XGBoost 与 Boosted Tree 规范化BatchNormalization 卷积神经网络中用1*1 卷积有什么作用或者好处呢？ CS231n 激活函数对比]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>机器学习</tag>
        <tag>秋招</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vivo-AI算法-19内推面试]]></title>
    <url>%2F2018-08-07%2Fvivo-ai-interview%2F</url>
    <content type="text"><![CDATA[本来是约了晚上19：00，搬砖忘记了时间，后来改约到晚上22：00。 vivo 一面 自我介绍 算法题：Top k 有哪些算法，时间复杂度分别是多少 算法题：最长增序列，时间复杂度 对于树模型的理解？ 随机森林并行？GDBT可以改成并行吗？引入LightGBM GBDT和Xgboost的区别 讲讲LDA ？LDA里面的共轭分布解释一下？ 讲讲word2vec 讲讲RCNN、fast RCNN、faster RCNN做出的改进？ 感受： 和intel有类似的地方，面试官的目的主要是发掘你的优点，不是为了挑你的缺点，似乎有国外背景的人会比较喜欢这样。 遇到不会、不熟悉的地方，我就直说，然后跳过聊下一个问题。 面试快要结束的时候，面试官主动拉起来家常，聊到他之前的经历，16年在头条AI lab，后来去了腾讯，最后去了vivo。 似乎我所经历的面试官都很好奇我为什么不读硕士，这位就更直接了，直接劝我说还有时间，现在考研来得及。这是个什么操作？ CV、机器学习、数据挖掘、NLP都做过，还说他自己不小心读了硕士又读了博士。 最后面试官安利了一波他们部门，说我的背景和他们部分比较契合，去了应该能有施展的空间。 好在不是第一次听这种话，之前微信的mentor就说过，可是呢。 这次要留个心眼，不过面试官很真诚，也很厉害，好评。 最后我问了三个问题 面试有几轮？ 部门的组织架构如何？ 好奇问问面试官你这几次跳槽的原因是什么？ HR面 2018年08月13日 update 不知道什么情况，直接就终面了。 随便聊聊人生，8月20号之前给结果。 参考 RF、GBDT、XGBoost、lightGBM原理与区别]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>vivo</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[英特尔深度学习实习生面经]]></title>
    <url>%2F2018-08-06%2Fintel-bigdl-interview%2F</url>
    <content type="text"><![CDATA[启发式面试，体验不错。 update: 2018-08-15 综合考量还是拒了offer，毕竟现在去实习，不符合大潮流，找工作要紧。 一、intel 一面 CNN相比传统全连接的优点 参数共享、局部感受野 RNN和LSTM对比？ 社区发现算法Louvain 优化点在哪？难点？ 主要的工作是什么？ 分词服务用的什么? 新词发现怎么做的？命名实体识别如何做的？ LDA的共轭分布解释下？ 如何kill spark任务 常用的Linux命令 对于Java了解多少 pandas、XGBoost相关问题 对caffe了解多少 二、intel 二面 hashmap如何实现？如何实现多线程的hashmap？ 多进程、多线程之间同步的方式 介绍一下熟悉的设计模式 对于spark的rdd了解多少？解释下宽依赖、窄依赖？spark内部如何处理宽依赖窄依赖 Spark Core了解多少 对于SVM了解多少？ 对于树模型了解多少？ 对于TensorFlow了解多少 解释一下梯度下降？还了解哪些优化算法？ 三、后记学会扬长避短，沉着冷静，遇事不慌，语速适中。尽可能把自己想起来的东西、较为确定的东西答出来。]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>深度学习</tag>
        <tag>intel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习秋招面试准备-01]]></title>
    <url>%2F2018-07-19%2Finterview-preparation-01%2F</url>
    <content type="text"><![CDATA[本篇大部分面试题来自知乎-熊风回答，部分来自其余面经，少量为自己的面经。 只适合作为面经回顾，不适合日常学习。 1.机器学习1.1 损失函数 线性回归损失函数？LR的损失函数？线性回归损失函数的两种损失函数的比较？最大似然在逻辑回归当中的应用？梯度下降在逻辑回归中的应用？ 讲一下常用的损失函数以及各自的适用场景。 对于第一项Loss函数，如果是Square loss，那就是最小二乘了；如果是Hinge Loss，那就是著名的SVM了；如果是exp-Loss，那就是牛逼的 Boosting了；如果是log-Loss，那就是Logistic Regression了。 1.1.1 回归损失函数对于二分类问题， ，损失函数常表示为关于 yf(x) 的单调递减形式。 yf(x) 被称为margin，其作用类似于回归问题中的残差 y-f(x) 。 可以看到如果 yf(x) &gt; 0 ，则样本分类正确， yf(x) &lt; 0 则分类错误，而相应的分类决策边界即为 f(x) = 0 。所以最小化损失函数也可以看作是最大化margin的过程，任何合格的分类损失函数都应该对margin&lt;0的样本施以较大的惩罚。 1.1.2 分类损失函数 sigmod函数 1.饱和的神经元导致梯度无法更新2.sigmod的输出不是zero-centered3.exp()操作计算量偏大 机器学习-损失函数 常见回归和分类损失函数比较 1.2 树类模型过拟合问题？ OOB？ 随机森林的特征选择、数据选择都有一定的随机性，所以本身不易过拟合。 更多参见：https://blog.csdn.net/zhufenglonglove/article/details/51785220 决策树 决策树如何避免过拟合 先剪枝的方法 有多种不同的方式可以让决策树停止生长，下面介绍几种停止决策树生长的方法： 限制决策树的高度和叶子结点处样本的数目 1.定义一个高度，当决策树达到该高度时就可以停止决策树的生长，这是一种最为简单的方法； 2.达到某个结点的实例具有相同的特征向量，即使这些实例不属于同一类，也可以停止决策树的生长。这种方法对于处理数据中的数据冲突问题非常有效； 3.定义一个阈值，当达到某个结点的实例个数小于该阈值时就可以停止决策树的生长； 4.定义一个阈值，通过计算每次扩张对系统性能的增益，并比较增益值与该阈值的大小来决定是否停止决策树的生长。 1)Reduced-Error Pruning（REP）方法是一种比较简单的后剪枝的方法，在该方法中，可用的数据被分成两个样例集合：一个训练集用来形成学习到的决策树，一个分离的验证集用来评估这个决策树在后续数据上的精度，确切地说是用来评估修剪这个决策树的影响。这个方法的动机是：即使学习器可能会被训练集中的随机错误和巧合规律所误导，但验证集合不大可能表现出同样的随机波动。所以验证集可以用来对过度拟合训练集中的虚假特征提供防护检验。 该剪枝方法考虑将书上的每个节点作为修剪的候选对象，决定是否修剪这个结点有如下步骤组成： 1：删除以此结点为根的子树 2：使其成为叶子结点 3：赋予该结点关联的训练数据的最常见分类 4：当修剪后的树对于验证集合的性能不会比原来的树差时，才真正删除该结点 因为训练集合的过拟合，使得验证集合数据能够对其进行修正，反复进行上面的操作，从底向上的处理结点，删除那些能够最大限度的提高验证集合的精度的结点，直到进一步修剪有害为止(有害是指修剪会减低验证集合的精度)。 REP是最简单的后剪枝方法之一，不过由于使用独立的测试集，原始决策树相比，修改后的决策树可能偏向于过度修剪。这是因为一些不会再测试集中出现的很稀少的训练集实例所对应的分枝在剪枝过如果训练集较小，通常不考虑采用REP算法。 TF-IDF的原理是？ TF和IDF的计算公式？idf中为什么要取对数？ GBDT与XGBoost的区别？ 2.Topic Model LDA解释一下？推导公式？ LDA主题个数如何确定？ 主题个数：https://blog.csdn.net/yt71656/article/details/50016067 1.用perplexity-topic number曲线2.用topic_number-logP(w|T)曲线3.计算topic之间的相似度 其中第三节提出一个定理：当主题结构的平均相似度最小时，对应的模型最优。 利用HDP(层次狄利克雷过程) Bagging（bootstrap aggregating）和Boosting的区别 Bagging，Boosting二者之间的区别 Bagging和Boosting的区别： 1）样本选择上： Bagging：训练集是在原始集中有放回选取的，从原始集中选出的各轮训练集之间是独立的。 Boosting：每一轮的训练集不变，只是训练集中每个样例在分类器中的权重发生变化。而权值是根据上一轮的分类结果进行调整。 2）样例权重： Bagging：使用均匀取样，每个样例的权重相等 Boosting：根据错误率不断调整样例的权值，错误率越大则权重越大。 3）预测函数： Bagging：所有预测函数的权重相等。 Boosting：每个弱分类器都有相应的权重，对于分类误差小的分类器会有更大的权重。 4）并行计算： Bagging：各个预测函数可以并行生成 Boosting：各个预测函数只能顺序生成，因为后一个模型参数需要前一轮模型的结果。 逻辑回归和线性回归对比有什么优点？ 逻辑回归可以处理非线性问题吗？ 分类问题有哪些评价指标？每种的适用场景。 https://blog.csdn.net/PacosonSWJTU/article/details/58651726 讲一下正则化，L1和L2正则化各自的特点和适用场景。 http://www.csuldw.com/2016/03/26/2016-03-26-loss-function/ 讲一下决策树和随机森林 常见的决策树有ID3、C4.5,CART等，决策树思想，实际上就是寻找最纯净的划分方法，数学上称为纯度。ID3使用信息增益作为不纯度，C4.5使用信息增益率作为不纯度，CART使用基尼系数作为不纯度。 树种类 划分属性依据 公式 ID3 信息熵 C4.5 增益率 CART 基尼系数 建树和剪枝 代价-复杂度剪枝（Cost-Complexity Pruning，简称CCP）等方案。分类与回归树采用的是代价-复杂度剪枝算法 讲一下GBDT的细节，写出GBDT的目标函数。 GBDT和Adaboost的区别与联系 手推softmax loss公式 Softmax 输出及其反向传播推导 softmax 推导 讲一下SVM, SVM与LR有什么联系。 第一，本质上是其loss function不同。 LR采用的是log loss，svm则是hinge loss 第二，支持向量机只考虑局部的边界线附近的点，而逻辑回归考虑全局（远离的点对边界线的确定也起作用）。第三，在解决非线性问题时，支持向量机采用核函数的机制，而LR通常不采用核函数的方法。第四，​线性SVM依赖数据表达的距离测度，所以需要对数据先做normalization，LR不受其影响。 讲一下PCA的步骤。PCA和SVD的区别和联系 讲一下ensemble 偏差和方差的区别。ensemble的方法中哪些是降低偏差，哪些是降低方差？ 回归分析 实际上，机器学习的有监督学习的所有模型大体上可以划分为两大类：一类是判别模型，另一类是生成模型。 常见的判别模型： 线性回归、对数回归、线性判别分析、SVM、Boosting、CRF、神经网络等 常见的生成模型： 隐马尔可夫模型、朴素贝叶斯模型、高斯混合模型、主题模型（LDA等）、受限波尔斯曼机等 3.深度学习 手推BP 手推RNN和LSTM结构 LSTM中每个gate的作用是什么，为什么跟RNN比起来，LSTM可以防止梯度消失 讲一下pooling的作用， 为什么max pooling要更常用？哪些情况下，average pooling比max pooling更合适？ 梯度消失和梯度爆炸的原因是什么？ 有哪些解决方法？ CNN和RNN的梯度消失是一样的吗？ 深度学习主要思想为统计不变性（最主要的是权重共享，大大降低神经网络中的向量维数，一定程度上可以避免过拟合同时也能降低计算量），表现在空间上权重共享上体现为CNN（Convolutional Neural Network），时间上权重共享体现为RNN（Recurrent Neural Networks） 有哪些防止过拟合的方法？ 详情参加我之前的文章： 机器学习面试基础知识 &amp; 扩展-01 讲一下激活函数sigmoid，tanh，relu. 各自的优点和适用场景？ relu的负半轴导数都是0，这部分产生的梯度消失怎么办？ batch size对收敛速度的影响。 讲一下batch normalization CNN做卷积运算的复杂度。如果一个CNN网络的输入channel数目和卷积核数目都减半，总的计算量变为原来的多少？ 讲一下AlexNet的具体结构，每层的作用 讲一下你怎么理解dropout，分别从bagging和正则化的角度 data augmentation 1.Color Jittering：对颜色的数据增强：图像亮度、饱和度、对比度变化（此处对色彩抖动的理解不知是否得当）；2.PCA Jittering：首先按照RGB三个颜色通道计算均值和标准差，再在整个训练集上计算协方差矩阵，进行特征分解，得到特征向量和特征值，用来做PCA Jittering；3.Random Scale：尺度变换；4.Random Crop：采用随机图像差值方式，对图像进行裁剪、缩放；包括5.Scale Jittering方法（VGG及ResNet模型使用）或者尺度和长宽比增强变换；6.Horizontal/Vertical Flip：水平/垂直翻转；7.Shift：平移变换；8.Rotation/Reflection：旋转/仿射变换；9.Noise：高斯噪声、模糊处理；10.Label shuffle：类别不平衡数据的增广，参见海康威视ILSVRC2016的report；另外，文中提出了一种Supervised Data Augmentation方法，有兴趣的朋友的可以动手实验下。 讲一下你了解的优化方法，sgd, momentum, rmsprop, adam的区别和联系 如果训练的神经网络不收敛，可能有哪些原因？ 1.数据量过小2.learning rate过大 说一下你理解的卷积核， 1x1的卷积核有什么作用？ 1x1卷积的主要作用有以下几点：1、降维和降维（ dimension reductionality ）。比如，一张500 * 500且厚度depth为100 的图片在20个filter上做1x1的卷积，那么结果的大小为500x500x20。2、加入非线性。卷积层之后经过激励层，1x1的卷积在前一层的学习表示上添加了非线性激励（ non-linear activation ），提升网络的表达能力；3.增加模型深度，一定程度上提升模型的表征能力；4.这样做可以理解为一根筷子插了3本书，相比较于传统全连接层，1x1卷积保留了空间信息。主要用于降维，减少参数个数，做特征变换，以及增加宽度。 4.科研上的开放性问题 选一个计算机视觉、深度学习、机器学习的子领域，讲一下这个领域的发展脉络，重点讲出各种新方法提出时的motivation，以及谈谈这个领域以后会怎么发展。 讲一下你最近看的印象比较深的paper 讲一下经典的几种网络结构， AlexNet， VGG，GoogleNet， Residual Net等等，它们各自最重要的contribution 你看过最近很火的XXX paper吗? 你对这个有什么看法？ 5.编程 hashmap的实现、hashtable 说一下快排？ 时间复杂度 nlogn 怎么来的 6.大数据相关 spark 任务调度 job、stage、task划分 Worker Node：物理节点，上面执行executor进程 Executor：Worker Node为某应用启动的一个进程，执行多个tasks Jobs:action 的触发会生成一个job, Job会提交给DAGScheduler,分解成Stage, Stage:DAGScheduler 根据shuffle将job划分为不同的stage，同一个stage中包含多个task，这些tasks有相同的 shuffle dependencies。 Task:被送到executor上的工作单元，task简单的说就是在一个数据partition上的单个数据处理流程。 7.数学题 如果一个女生说她集齐了十二个星座的前男友，她前男友数量的期望是多少？ 两个人玩游戏。有n堆石头，每堆分别有a1, a2, a3…. an个石头，每次一个游戏者可以从任意一堆石头里拿走至少一个石头，也可以整堆拿走，但不能从多堆石头里面拿。无法拿石头的游戏者输，请问这个游戏是否有先手必胜或者后手必胜的策略？ 如果有，请说出这个策略，并证明这个策略能保证必胜。 一个一维数轴，起始点在原点。每次向左或者向右走一步，概率都是0.5. 请问回到原点的步数期望是多少？ 一条长度为1的线段，随机剪两刀，求有一根大于0.5的概率。 讲一下你理解的矩阵的秩。低秩矩阵有什么特点？ 在图像处理领域，这些特点有什么应用？ 讲一下你理解的特征值和特征向量。 为什么负梯度方向是使函数值下降最快的方向？简单数学推导一下 8.参考 第05章：深入浅出ML之Bayes-Based家族 概率论6大分布 Spark中job、stage、task的划分+源码执行过程分析 知乎-熊风回答 决策树和随机森林 详解深度学习中的梯度消失、爆炸原因及其解决方法 【深度学习】深度学习中RNN梯度消失 生成模型与判别模型]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>深度学习</tag>
        <tag>机器学习</tag>
        <tag>数据挖掘</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[秋招准备-规划篇]]></title>
    <url>%2F2018-07-11%2Fautumn-preparations%2F</url>
    <content type="text"><![CDATA[身边的人陆陆续续开始准备秋招，后知后觉形选手也要开始了。 《礼记·中庸》中说“凡事豫则立，不豫则废。言前定则不跲（jiá），事前定则不困，行前定则不疚，道前定则不穷”。 这里针对自己的简历，做一个拆解和分析，方便系统的准备。 项目梳理凡团队项目，必定是每一个人的付出都至关重要，回顾这部分的时候很开心~ 飞机大战大一的团队项目，基于Cocos-2dx开发，代码虽然很乱，但是也算是个有意思的小游戏。 技术栈： C++ 、Cocos-2dx Github链接： https://github.com/LJ147/HappyPlane 项目演示视频：视频链接 听歌识曲大二，基于傅里叶变换的java听歌识曲项目，手撸的感觉还是很不错的，那时候还不会markdown语法。 关键词： Java、傅里叶变换 码云链接：链接 网站设计大赛留下的资料不多 精准教育下次找图补一下。 网络文学IP价值评估及预测 关键词： 团队、LDA、ARIMA等算法 演示视频： https://www.bilibili.com/video/av16495674 高分卫星图像识别坦白讲这个项目自己划水比较多，很惭愧。引以为戒，不要坑队友！ 演示视频：https://www.bilibili.com/video/av14535060 实习经历 开始时间 结束时间 公司 职位 2018年7月 至今 腾讯-微信支付 应用研究实习生 2018年3月 2018年6月27号 字节跳动 大数据研发实习生 字节跳动 hive Spark Scala Python 腾讯-微信支付 编程基础 操作系统 计算机网络 Linux 编程语言PythonJavaC++算法、数据结构 LeetCode 《剑指offer》 《算法导论》 统计学习、机器学习 《统计机器学习》 李航 《机器学习》 周志华 《高等数学》 《线性代数》 线性代数：我的一个同事 Skyler Speakman 最近说过，「线性代数是 21 世纪的数学」，我完全赞同他的说法。在机器学习领域，线性代数无处不在。主成分分析（PCA）、奇异值分解（SVD）、矩阵的特征分解、LU 分解、QR 分解、对称矩阵、正交化和正交归一化、矩阵运算、投影、特征值和特征向量、向量空间和范数（Norms），这些都是理解机器学习中所使用的优化方法所需要的。 概率论和统计学：机器学习和统计学并不是迥然不同的领域。事实上，最近就有人将机器学习定义为「在机器上做统计」。机器学习需要的一些概率和统计理论分别是：组合、概率规则和公理、贝叶斯定理、随机变量、方差和期望、条件和联合分布、标准分布（伯努利、二项式、多项式、均匀和高斯）、时刻生成函数（Moment Generating Functions）、最大似然估计（MLE）、先验和后验、最大后验估计（MAP）和抽样方法。 多元微积分：一些必要的主题包括微分和积分、偏微分、向量值函数、方向梯度、海森、雅可比、拉普拉斯、拉格朗日分布。 算法和复杂优化：这对理解我们的机器学习算法的计算效率和可扩展性以及利用我们的数据集中稀疏性很重要。需要的知识有数据结构（二叉树、散列、堆、栈等）、动态规划、随机和子线性算法、图论、梯度/随机下降和原始对偶方法。 其他：这包括以上四个主要领域没有涵盖的数学主题。它们是实数和复数分析（集合和序列、拓扑学、度量空间、单值连续函数、极限）、信息论（熵和信息增益）、函数空间和流形学习。 计算机视觉主要理清楚几篇关键paper里面的东西吧 object-detection RCNN、fast RCNN、faster RCNN的改进？ 上述三种模型分别采用的什么loss function？ 上述模型中正负样本如何生成？ Selective Search生成region proposal时有哪些合并策略？ 介绍一下Roi pooling？ Region of Interest(ROi)，特征图的框，特点是：输入特征图尺寸不固定，但是输出特征图尺寸固定。 caffe的基本介绍？ faster RCNN如何训练RPN和fast RCNN网络？ 说收Fine-tuning？ OCR自然语言处理常见的算法 分词原理词向量词性的标注待完善… 参考 自然语言处理基础技术之分词、向量化、词性标注 机器学习应该准备哪些数学预备知识？ 机器学习需要哪些数学基础？ ROI Pooling层解析 ROI Pooling层详解 知乎:fine-turning的讨论]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>机器学习</tag>
        <tag>秋招</tag>
        <tag>回顾</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搬家]]></title>
    <url>%2F2018-07-07%2Fmake-a-move%2F</url>
    <content type="text"><![CDATA[日记还在写，只是没什么事情，就不再往博客上丢了。 好容易梳理了逻辑，确定了数据的位置，申请权限之后开始干活。 因为组里的实习生越来越多，搬了工位，失去了靠窗的视野。 一直很向往一间摩天大楼顶端的落地窗办公室，俯瞰整个城市。 下午搬家，余下不表。 7月7日补]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[平常的一天]]></title>
    <url>%2F2018-07-05%2Fnormal-day%2F</url>
    <content type="text"><![CDATA[被杰哥push了几次感觉压力有点大啊 深蹲第一天☝️ 数量： 20 * 2 今晚的腾大 上午早上依然是下了雨，因为昨晚写日记太久导致睡觉比较晚，早上出门比平时晚。所以之后要限制写日记的时间，一方面提高打字的速度，另一方面有所删减，有所记有所不记，不然就真的成了毫无意义的流水。 看地方很多雨水，应该是刚刚又下过了一场不小的雨。晚几分钟出门，也算是避过了。 得知晚上聚餐，但是一直组里一直没有消息，反而有些心急。一整天都有些躁动。 杰哥那边也在push，更是多了几分着急。自己也确实要在这方面多下点功夫。就像季羡林每天日记里写的“德语要多下功夫”。 这里要提一下的是高压线风波，我图省事拿Evernote写了一写业务相关的东西，拿去问杰哥，杰哥看到很重视，找了一些资料顺便教育了一番，微信支付，核心中的核心，保密原则极其重要。自己也要尤为重视，不能犯错。 与安哥(anderszhou)的谈话晚上聚餐的时候安哥坐在对面，安哥是微信支付研发中心的负责人（200来号人），我也借机提出了很多自己的一些问题，对于很多问题有了更多的宏观了解。 关于支付宝和微信支付的看法 对支付宝推出的余额宝的看法 微信为什么不重视这一点？ 对蚂蚁森林的看法 公益与浅社交 对微信支付全球化的见解 做到现在这个位置还会不会写代码 安哥本身也很健谈，96级的武大学子，聊了很多朝代历史（尤其是三国）、党史等，聊恰当的时机对于产品的重要性，“中国不缺好点子，缺的是时机”；尤其强调做一件事的时候要努力做到极致；一件事情好，是不是要做，什么时候做，都是要考究的；团队是有基因的，一个怎么样的老板，就会有怎么样的团队；有了用户，就有了一切，所以支付宝在支付这一个领域，已经落后并且很难再追上来了。这些话，其实并不陌生，但是由这样一个资深的人士嘴里说出来，起到的效果似乎不一样。 提到工作首要的事情是做好一个好下属，一个好下属有三点： 快速完成上司的任务 会合作 做好上司的助手 安哥提到最早他最开始做支付的时候，部门里面只有两种人，技术和销售，不像现在这么细，同时到现在微信支付技术团队没有测试，他认为测试不应该由别人做，而应该自己做，自己写的代码自己测试。 这些在我看来都是值得借鉴学习的，所在的高度不同，看待同一件事情的。 晚上骑车赶回公司，期待通过加班弥补内心的负罪感。 收到Google的邀请，参加8月25号的亚太开发者大会，时间刚好是周末，决定凑一波热闹。 已经尝试了几次练习深蹲，加之白天经常散步锻炼，于是决定连续练习深蹲。 余下不表。]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>日记</tag>
        <tag>压力</tag>
        <tag>高压线</tag>
        <tag>保密</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[漫无边际的日记-初章]]></title>
    <url>%2F2018-07-05%2F20180704-diary%2F</url>
    <content type="text"><![CDATA[最近在微信读书app里读到季羡林的《清华园日记》，季先生提到自己90岁高龄的时候再回头看自己20来岁的日记，感慨万千，一方面觉得真实，日记是写给自己看的，真实不做作，另一方面觉得具有参考价值，某种角度上映射了那个时代。 于是我又重新激荡起了写日记的心。 我对于日记的印象，绝对不能算好，第一次写日记，是我的父亲在南阳的集装箱里，拿藤条？抽打着、逼迫着尚且年幼的我写的。 第一次写日记父亲给我买了专用的笔记本，买了笔，商量着要我记录自己的暑假，每天写一写日记，我都听做了耳旁风。 那时候家里有个亲戚淘汰下来的台式电脑，没记错应该是Windows 2000，隔壁一个父亲的同事用光盘帮我装了《暗黑破坏神》，我于是痴迷与此，和一个小伙伴经常玩上很久。小伙伴唤作“郭一”，因为名字特别，所以记到现在。 父亲一贯反感我玩游戏，且不说什么暴雪游戏，就连我刚去南阳的时候，母亲教我玩的连连看，他看了都是一脸的不开心，玩久了就唉声叹气。 我不怕他生气，最怕他叹气。 父亲那时候是测量员，那天下班回来了，看到我在玩游戏又随口叫我去写日记，我没搭理。吼了我几句，我跑到外面的一个集装箱里。 也许是因为那天他心情不好遭了老板训，也许是早就不开心我连续的玩游戏不写日记，总之是积怨已久的怒火突然爆发，他拿起一根细条子，像疯了一样抽我。 打在手上，打在背上，打在脚指头上，打到我蜷缩成一团哭不出声音…… 哭到嗓子哑发不出声音的我，跑进旁边的一片玉米地，我仍缩在地上，不管地上脏，不管草痒痒，也不管可能的虫子。 那样热的夏天，我穿着拖鞋躲在一大片玉米地的中间，鼻涕早已经流了一地，擦满了衣服。我看着被抽肿的脚趾，抬头望天闭上了眼睛。 或许过了很久，或许过了不久，稀稀疏疏的落下几滴雨，接着瞬间开始下起暴雨，玉米地也挡不住，是不是像在演电视剧啊，那时候的我想。随后不远处传来家里人的声音，我又抱住腿缩紧了几分。 后来，那块玉米地，成为我那个夏天最喜欢去的地方。藤条，也成为那个夏天永远忘不了的回忆。 似乎有些聊远了。 这样的事情，其实不止一次，在父母眼里，在旁人眼睛，只是一件不起眼的小事，小到你说起来的时候，他们会面露疑惑，接着说有过这件事吗？有的话也只是教育孩子吧？这样的小事就过去吧？或者说你明贤看出，他们也记得，并没有忘记，但是极力否认或者努力装作平常。 这一点，我是悲惨的，我的父母完全没有意识到这些也会对我造成伤害，我也没有意识到这样的事情对我自己造成了伤害。尽管这些没有对我造成很大的影响，没有让我成为一个忧郁或者悲观的人。 但每当我回忆起来的时候，就像回到那些场景，回到那个被支配想逃脱但是什么也做不了的时候，还是会感受到强烈的痛楚和压抑。 这也每每提醒我，如果有一天，我有幸要教育孩子，我一定不会使用暴力，不会让他们处于一种无能为力的处境中，从而有可能留下一生的小阴影碎片。 当然，我依然爱我的父母，我也知道他们爱我，我理解他们不能理解我。 今天的日记早上出门的时候风雨大作，倾盆如注，来深圳刚几日，先是高温炙烤，再是连续暴雨，算是见识了其威力。 雨下的大，但是没有雷，去的也快，不过20分钟，就安静下来，只留下湿漉的地面。 照例是去等班车，8：20发车，之前听说很准时，实际总是迟到十几分钟，浪费很多等待的时间。 但还是愿意等。 最近有个学姐，和我上下班线路一致，于是结伴而行，没有刚去北京那时候一个人上下班的孤单。 照理是要多写写工作的，但是这一天似乎没做什么，觉得没什么可写。 权且记录一下。 确定了目前的两个任务：用户画像和定向优惠券投放。 SQL大法我是极讨厌的，但没有办法，为了熟悉数据，这是最快也是唯一的办法。 虽说分配的mentor不怎么管事，但是杰哥很热心，也聊到当时李航老师是他的上级，聊到他要求很高，每年会push他们做一些深的思考，不仅仅是做手头的工作，而且每年都要给一个talk。 虽说一开始来的时候有很多不乐意，但和组员慢慢熟悉起来，还是感觉蛮不错。 其实自己也意识到了，那句“always day one”还是很重要的，同时自己也要尽量引导他们减少头条相关的话题，毕竟是在新公司，聊太多前司不好。 永远从零开始晚上周三分享会，微信朋友圈广告团队过来介绍了他们的系统架构，聊了很多干货，很多名字其实早有耳闻，但是实际没有用过，看到easy哥和一些同事一直不断的发问，了解相关的情况，追根问底，了解技术细节，自己也深受感触。 一方面感慨自己太菜，另一方面佩服他们的专业素养，之后还是要收起所谓的一丝丝不开心，认真工作，以求提高，不断地从同事那里学习。]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>日记</tag>
        <tag>南阳</tag>
        <tag>回忆</tag>
        <tag>深圳</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[武汉我的家]]></title>
    <url>%2F2018-06-30%2Fwuhan-my-home%2F</url>
    <content type="text"><![CDATA[家是什么，何以把武汉当做家？ 能不能算作家，是以什么作为衡量的？ 你把武汉当做家，武汉是否把你当做家人？]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>武汉</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[乌云乌云快走开]]></title>
    <url>%2F2018-06-28%2Fblack-day%2F</url>
    <content type="text"><![CDATA[虽说觉得在头条的日子很开心，但是离职的时候还是想跳起来，就像初中憋了很久终于放暑假。 这时候才会觉得，哇，原来这一点我还是幼稚（划掉 不成熟）的。 但是这一天过得不怎么顺利。 离职交接不顺要离职才发现自己已经做了很多东西，分别要交接给不同的人，有些东西因为性质的问题，要带着别人再趟一遍，和其他组协调的时候突然遇到甩锅，很是难受，当然也有自己菜的原因，这样就可以自己解决问题。 第一次被mentor训下午做的presentation真的是来了头条做的最烂的一次，两个小时的时间，半小时就赶紧结束了，好在范围仅限于组内。 由于交接+近期即将离职有所分心，所以准备严重不足，导致效果稀巴烂。 讲完mentor抢先训了一通，顺便给了台阶下，要求我九月复职回去重讲一遍，旁边的实习生小姐姐还说，果然是亲生的mentor，维护我一波，训完我leader就不好继续训了。 像我一世英名，毁于一次team learning，唉，心累。 引以为戒！ 险些错过考试因为一些事情耽误了一会，或者说因为自己强行耽误了很久，17：00准备出门，再次因为一点事情耽误了十分钟，一路红灯再加上一路红色级拥堵，热心的滴滴司机也没有丝毫办法，一路上尽管多次想要加速超车，但还是堵在了洪流中不得动弹。 一路上争分夺秒，滴滴小哥每隔几分钟就问还剩多久，却还是赶在了18：00达到了车站（火车18：00出发）。说来奇怪的事，一间不大不小的事情，两个人却报了极大的期望，期望着能完成这件没什么太大社会意思、且很明显不能完成的事情。 路上我甚至假想，如果这不是普通的送人去车站，而是生死接力云云，结果会不会不一样。 这样自然是不能赶上的，于是只能背着、拎着以及推着包裹下去一楼改签，最近的一班高铁票售罄，只剩下高级软卧，无奈之下只能奢侈一把。 心里默念两天的工资没了，出发前的耽误也差点造成更大的代价。幸运的是，总算还能勉强赶上考试。 考试8：30开始，我的火车不晚点的话是早上7：15到车站，是我的安排的满满当当的风格，不留缝隙，不留喘息机会。 Z37上的复习之旅在摇摇摆摆的火车上，考试范围照片、教材、PDF和习题，一张小小的桌子，一次性杯子加上冲剂式咖啡，就这样一路摇摇晃晃，从北京到武汉，慢慢竟然有几分惬意。 忽然一瞬间有种回到14年夏天，我坐在大巴车上，从南阳或者什么别的地方回老家的感觉：“暴风雨在我的头上盘旋”、“等待我的即将是一场暴风雨”。 对即将发生的事情后果十分清楚，也十分畏惧，但是心情出奇的平淡甚至冷漠，仿佛这件事与我毫无关联。 上铺中南民族大学的教授鼾声已经起了很久，也算雷声阵阵，不输于任何一种我听过的鼾声，我也乐得自在，安心地低效率的准备早上8：30的考试内容。]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>离职</tag>
        <tag>今日头条</tag>
        <tag>数据平台</tag>
        <tag>北京</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[操作系统原理笔记]]></title>
    <url>%2F2018-06-18%2FOperating-System-Concepts-notes%2F</url>
    <content type="text"><![CDATA[前段时间和同事聊到面试，几个非科班出身（数据分析岗）的说操作系统之类的不重要，面试也不怎么考，实践中也用得少。 我一时语塞，想争论一番，考虑之后还是放弃。当然这里不是在讨论所谓科班or非科班的优越性。我也在想，这些知识能带给我们什么。 开始实习之后，身边有很多数学、信管、金融甚至完全不搭边专业的同事，他们同样在自己的岗位上做的很好，这时候不禁在想，是他们更用功把这些gap补齐了，还是这一行的门槛其实本身就很低，又或者是以我为代表的人没有把科班的东西真正掌握好。 又或者说，假使我学的不是CS专业，想要进入这个专业，是不是我只需要学一部分课程就够了呢？ 当然，我自然是相信，学得越多，掌握的越多，对于日后的长久发展越有利。 稍微扯了一些，这篇文章的主题还是操作系统，这里把下面这本书copy一遍，列出一个提纲，希望在这个过程中有所得，也便于日后回顾。 对于考试而言，重点掌握几个算法应对大题应该无虞。 一、操作系统引论操作系统的主要功能操作系统的主要任务，是为多道程序的运行提供良好的运行环境，以保证多道程序能有条不紊地、高效地运行，并能最大程度地提高系统中各种资源的利用率和方便用户的使用。 处理机管理功能创建和撤销进程（线程），对诸如进程（线程）的运行进行协调，实现进程（线程）的交换，以及按照一定的算法把处理机分配给进程（线程）。 进程控制：为作业创建进程，撤销已结束的进程，以及控制进程在运行过程中的状态转换。 进程同步：为多个进程（含线程）的运行进行协调，有两种协调方式。 进程互斥方式：对临界资源访问时，应采用互斥方式 进程同步方式：相互合作完成共同任务的诸进程间，由同步机构对他们的执行顺序加以协调，例如信号量等。 进程通信：当想相互合作的进程处于同一计算机系统时，通常在它们之间采用直接通信方式，即由源进程利用发送命令直接将消息（Message）挂到目标进程的消息队列上，以后由目标进程接受命令从其消息队列中取出消息。 调度：在后备队列上等待的每个作业都需经过调度才能执行。在传统的操作系统中，包括作业调度和进程调度两步。 作业调度：作业调度的基本任务是从后备队列中按照一定的算法，选择出若干个作业，为它们分配运行所需的资源(首先是分配内存)，在将它们调入内存后，便分别为它们建立进程，使它们都成为可能获得处理机的就绪进程，并按照一定的算法将它们插入就绪队列。 进程调度：进程调度的任务是从进程的就绪队列中，按照一定的算法选出一个进程， 把处理机分配给它，并为它设置运行现场，使进程投入执行。值得提出的是，在多线程 OS 中，通常是把线程作为独立运行和分配处理机的基本单位，为此，须把就绪线程排成一个队列，每次调度时，是从就绪线程队列中选出一个线程，把处理机分配给它。 操作系统的发展无操作系统存储器管理存储器管理的主要任务是为多道程序的运行提供良好的环境，方便用户使用存储器， 提高存储器的利用率以及能从逻辑上扩充内存。为此，存储器管理应具有内存分配、内存 保护、地址映射和内存扩充等功能。 内存分配：为每道程序分配内存空间；提高存储器的利用率，减少不可用的内存空间；允许正在运行的程序申请附加的内存空间，以使用程序和数据动态增长的需要。分配方式有静态和动态分配之分。内存分配应具有的结构和功能： 内存分配数据结构 内存分配功能 内存回收功能 内存保护：确保每道用户程序只在自己的内存空间运行，彼此互不干扰；决不允许用户程序访问操作系统程序的程序和数据；也不允许用户程序转移到非共享的其它用户程序中去执行。 地址映射：逻辑地址到物理地址的转换 内存扩充：借助虚拟存储结束，从逻辑上扩充内充容量。 请求调入功能：从磁盘调入内存 置换功能：将内存中暂时不用的程序和数据调至磁盘，腾出空间。 设备管理和文件管理。二、进程管理进程的基本概念进程：作为资源分配和独立运行的基本单位，程序段、相关的数据段和PCB（Process Control Block）组成进程实体。 进程的特征： 结构特性：程序段、相关的数据段和PCB（Process Control Block）组成进程实体。 动态性：进程的实质是指进程实体的一次执行过程，“由创建而产生，由调度而执行，由撤销而消亡” 并发性：多个进程同时存在于内存中，且能在一段时间内同时运行。 独立性在传统的 OS 中，独立性是指进程实体是一个能独立运行、独立分配资源和独立接受调度的基本单位。 异步性：进程按照各自独立的、不可预知的速度向前推进。 前趋图 (Precedence Graph):是一个有向无循环图，记为 DAG(Directed Acyclic Graph)，用于描述进程之间执行的前后关系。 进程控制块（PCB）中的信息： 进程标识符： 外部标识符 处理机状态：处理机中断时，信息保存在PCB中，以便于重新执行时，从断点继续执行。 1.通用寄存器： 2.指令寄存器 3.程序状态字（PSW） 4.用户栈指针 进程调度信息： 1.进程状态，进程调度和对换时的依据 2.进程优先级 3.进程调度所需其余信息 4.事件，执行到阻塞所发生的时间，即阻塞原因 进程控制块的组织方式： 链接方式 索引方式 进程与程序对比 试从动态性，并发性和独立性上比较进程和程序. a. 动态性是进程最基本的特性，可表现为由创建而产生，由调度而执行，因得不到资源而暂停执行，以及由撤销而消亡，因而进程由一定的生命期；而程序只是一组有序指令的集合，是静态实体. b. 并发性是进程的重要特征，同时也是OS的重要特征.引入进程的目的正是为了使其程序能和其它进程的程序并发执行，而程序是不能并发执行的. c. 独立性是指进程实体是一个能独立运行的基本单位，同时也是系统中独立获得资源和独立调度的基本单位.而对于未建立任何进程的程序，都不能作为一个独立的单位参加运行. 进程的三种状态 就绪：进程获得出CPU以外所有资源，只要获得CPU就可以立即执行。 执行：进程获得CPU，程序正在执行。 阻塞：正在执行的进程由于发生某些时间而暂时无法继续执行时，从而放气处理机处于暂停状态。（例如IO请求、申请缓存空间） 1.试说明进程在三个基本状态之间转换的典型原因. a. 处于就绪状态的进程，当进程调度程序为之分配了处理机后，该进程便由就绪状态变为执行状态.b. 当前进程因发生某事件而无法执行，如访问已被占用的临界资源，就会使进程由执行状态转变为阻塞状态.c. 当前进程因时间片用完而被暂停执行，该进程便由执行状态转变为就绪状态. 2.为什么要引入挂起状态?该状态具有哪些性质? a. 引入挂起状态处于5中需要: 终端用户的需要，父进程的需要，操作系统的需要，对换的需要和负荷调节的需要.b. 处于挂起状态的进程不能接收处理机调度. 顺序执行 顺序性 封闭性 可再现性 并发执行 间断性 失去封闭 不可再现性 进程控制在进行进程切换时，所要保存的处理机状态信息主要有哪些?a. 进程当前暂存信息；b. 下一条指令地址信息；c. 进程状态信息；d. 过程和系统调用参数及调用地址信息. 试说明引起进程创建的主要事件a. 用户登陆；b. 作业调度；c. 提供服务；d. 应用请求. 试说明引起进程撤消的主要事件a. 正常结束；b. 异常结束；c. 外界干预； 在创建一个进程时，需完成的主要工作是什么?a. 操作系统发现请求创建新进程事件后，调用进程创建原语Creat()；b. 申请空白PCB；c. 为新进程分配资源；d. 初始化进程控制块；e. 将新进程插入就绪队列. 在撤消一个进程时，需完成的主要工作是什么?a. OS调用进程终止原语；b. 根据被终止进程的标志符，从PCB集合中检索出该进程的PCB，从中读出该进程的状态；c. 若被终止进程正处于执行状态，应立即中止该进程的执行，并设置调度标志为真；d. 若该进程还有子孙进程，还应将其所有子孙进程予以终止；e. 将该进程所拥有的全部资源，或者归还给其父进程，或者归还给系统；f. 将被终止进程(它的PCB)从所在队列(或链表)中移出，等待其它程序来搜集信息. 试说明引起进程阻塞或被唤醒的主要事件是什么?a. 请求系统服务；b. 启动某种操作；c. 新数据尚未到达；d. 无新工作可做. 进程同步同步机构应遵循哪些基本准则?为什么?a. 空闲让进.b. 忙则等待.c. 有限等待.d. 让权等待. 进程通信线程进程与线程对比在OS中引入进程的目的是为了使多个程序并发执行，从而提高资源利用率和系统吞吐量，引入线程这是为了减少程序在并发执行时所付出的时空开销，使得OS具有更好的并发性。 进程是可拥有资源的独立单位，同时进程也是一个可独立调度和分派的基本单位。 线程的实现方式 内核支持线程KST（Kernel Supported Threads）：所谓的内核支持线程 KST(Kernel Supported Threads)，也都同样是在内核的支持下运行的 用户级线程ULU（User Level Threads）：仅存在于用户空间中，对于这种线程的创建、撤 消、线程之间的同步与通信等功能，都无须利用系统调用来实现 线程的同步和通信 互斥锁（mutex）：互斥锁是一种比较简单的、用于实现线程间对资源互斥访问的机制。由于操作互斥锁 的时间和空间开销都较低，因而较适合于高频度使用的关键共享数据和程序段。 条件变量：条件变量和互斥锁结合 信号量机制 ： 私用信号量(private samephore) 公用信号量(public semaphort) 三、处理机及调度与死锁死锁的必要条件 互斥条件 请求和保持 不可抢占 循环等待 处理死锁 预防死锁：采用限制条件，破坏产生条件。（银行家算法） 避免死锁：资源动态分配中，运用某种方法防止系统进入不安全状态。 检测死锁：运行时检测死锁，然后采用适当的措施，把进程从死锁中解脱出来。 解除死锁 处理机调度的层次高级调度(High Level Scheduling)高级调度又称为作业调度或长程调度(LongTerm Scheduling)，其 主要功能是根据某种算法，把外存上处于后备队列中的那些作业调入内存，也就是说，它的调度对象是作业。 低级调度（Low Level Scheduling）通常也把低级调度称为进程调度或短程调度(ShortTerm Scheduling)，它所调度的对象是进程(或内核级线程)。进程调度是最基本的一种调度，在多 道批处理、分时和实时三种类型的 OS 中，都必须配置这级调度。 低级调度的功能： 保存处理机的现场信息 按照某种算法选取进程 把处理机分配给进程 进程调度的三个基本机制 排队器 分派器 上下文切换机制 进程调度方式 非抢占式(Nonpreemptive Mode) 抢占方式(Preemptive Mode) 中级调度（Intermediate Level Scheduling）中级调度又称中程调度(Medium-Term Scheduling)。引入中级调度的主要目的是为了提高内存利用率和系统吞吐量。为此，应使那些暂时不能运行 的进程不再占用宝贵的内存资源，而将它们调至外存上去等待。 事务是一个原子执行的程序单元，即要么与其相关的所有操作都执行完，要么什么操作都不做。 四、存储器管理存储器的层次结构存储器的多层结构 操作系统管理：寄存器、高速缓存、主存储器和磁盘缓存，掉电后存储的信息不再存在 设备管理：底层的固定磁盘 和可移动存储介质，其存储信息被长期保存 主存储器和寄存器 主存储器又称内存或主存，是计算机系统中的主要部件，用来保存进程运行时的程序和数据，也称为可执行存储器。由于主存储器访问速度远低于CPU执行指令的速度，为缓和这一矛盾，在计算机操作系统中引入了寄存器和高速缓存。 寄存器：寄存器具有与处理机相同的速度，因此对于寄存器的访问速度最快。 高速缓存和磁盘缓存高速缓存介于寄存器和存储器之间的存储器，主要用于备份主存中较常用的数据，减少处理机对于主存储器的访问次数，从而大幅度提高程序执速度。 将一些常用数据存储在高速缓存中是有效的，这一点可以通过程序执行的局部性原理解释。 局部性原理 ·是指CPU访问存储器时，无论是存取指令还是存取数据，所访问的存储单元都趋于聚集在一个较小的连续区域中。 通常，进程的程序和数据是存放在主存储器中，每当使用时，被临时复制到一个速度较快的高速缓存中。当 CPU 访问一组特定信 息时，首先检查它是否在高速缓存中，如果已存在，可直接从中取出使用，以避免访问主存，否则，再从主存中读出信息。如大多数计算机有指令高速缓存，用来暂存下一条欲执行的指令，如果没有指令高速缓存，CPU 将会空等若干个周期，直到下一条指令从主存中 取出。由于高速缓存的速度越高价格也越贵，故有的计算机系统中设置了两级或多级高速缓存。紧靠内存的一级高速缓存的速度最高，而容量最小，二级高速缓存的容量稍大，速度也稍低。 磁盘缓存 由于目前磁盘的 I/O 速度远低于对主存的访问速度，因此将频繁使用的一部分磁盘数据 和信息，暂时存放在磁盘缓存中，可减少访问磁盘的次数。 要注意的是，磁盘缓存本身并不是一种实际存在的存储介质，它依托于固定磁盘，提供对主存储器存储空间的扩充，即利用主存中的存储空间，来暂存从磁盘中读出(或写入)的信息 程序的装入和链接 将一个模块装入内存的时候，有以下三种方式： 1.绝对装入方式（Absolute Loading Mode） 2.可重定位装入方式(Relocaltion Loading Mode) 3.动态运行时装入方式(Dynamic Run-time Loading) 动态运行时的装入程序在把装入模块装入内存后，并不立即把装入模块中的相对地址转换为绝对地址，而是把这种地址转换推迟到程序真正要执行时才进行。因此，装入内存 后的所有地址都仍是相对地址。为使地址转换不影响指令的执行速度，这种方式需要一个重定位寄存器的支持。 链接源程序经过编译后，可得到一组目标模块，再利用链接程序将这组目标模块链接，形 成装入模块。根据链接时间的不同，可把链接分成如下三种: 1.静态链接。在程序运行之前，先将各目标模块及它们所需的库函数，链接成一个完 整的装配模块，以后不再拆开。我们把这种事先进行链接的方式称为静态链接方式。 2.装入时动态链接。这是指将用户源程序编译后所得到的一组目标模块，在装入内存 时，采用边装入边链接的链接方式。 3.运行时动态链接。这是指对某些目标模块的链接，是在程序执行中需要该(目标)模 块时，才对它进行的链接。 连续分配方式连续分配方式，是指为一个用户程序分配一个连续的内存空间。 单一连续分配这是最简单的一种存储管理方式，但只能用于单用户、单任务的操作系统中。采用这种存储管理方式时，可把内存分为系统区和用户区两部分，系统区仅提供给 OS 使用，通常是放在内存的低址部分;用户区是指除系统区以外的全部内存空间，提供给用户使用。 固定分区分配固定分区式分配是最简单的一种可运行多道程序的存储管理方式。这是将内存用户空间划分为若干个固定大小的区域，在每个分区中只装入一道作业，这样，把用户空间划分为几个分区，便允许有几道作业并发运行。当有一空闲分区时，便可以再从外存的后备作 业队列中选择一个适当大小的作业装入该分区，当该作业结束时，又可再从后备作业队列中找出另一作业调入该分区。 划分分区的方法：1.分区大小相等：缺点是缺乏灵活性2.分区大小不等：可划分为小分区、中分区和大分区 动态分区分配为了实现分区分配，系统中必须配置相应的数据结构，用来描述空闲分区和已分配分区的情况，为分配提供依据。 数据结构 分区分配算法 为把一个新作业装入内存，须按照一定的分配算法，从空闲分区表或空闲分区链中选出一分区分配给该作业 1.首次适应算法(first fit) 2.循环首次适应算法(next fit) 在为进程分配内存空间时，不再是每次都从链首开始查找，而是从上次找到的空闲分区的下一个空闲分区开始查找，直至找到一个能满足要求的空闲分区，从中划出一块与请求大小相等的内存空间分配给作业。 3.最佳适应算法(best fit) 所谓“最佳”是指每次为作业分配内存时，总是把能满足要求、又是最小的空闲分区 分配给作业，避免“大材小用”。 4.最坏适应算法(worst fit) 5.快速适应算法(quick fit) 可重定位分配虚拟存储器为什么引入虚存：内存容量不够大，物理增加内存系统程序成本大。 所谓虚拟存储器，是指具有请求调入和置换功能，能从逻辑上对内存容量加以扩充的存储器结构。其逻辑容量是由内存容量和外存容量纸盒所决定，运行速度接近于内存，每位的成本接近外存。 虚拟存储器具有以下特性 多次性：内存中的程序和数据无需一次性装入。\ 对换性：一个作业的程序和数据无需常驻内存。 虚拟性：从逻辑上扩充内存容量，是用户看到的内存容量远大于实际。 五、设备管理六、文件管理参考 《计算机操作系统》 第四版 课本及习题]]></content>
      <categories>
        <category>学科笔记</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>秋招</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开发常用工具备忘录（持续更新）]]></title>
    <url>%2F2018-06-13%2Fcommon-developer-tools%2F</url>
    <content type="text"><![CDATA[经常遇到新开一个开发环境的情况，每换一个开发环境就要重新搜一次环境配置，这里整理到一起，一劳永逸。 1.本机ssh免密登录远程linux服务器如果本地之前未生成过密钥，执行 ssh-keygen -t rsa ，如果已经生成，则不无需执行该步骤。 scp /root/.ssh/id_rsa.pub root@10.*.*.**:~/ #将公钥拷到服务器中 cat ~/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys #追加公钥到授权key中 service sshd restart #服务器端重启ssh服务 2.IntelliJ IDEA快捷键 创建main函数（首字母缩写）： psvm public static void main(String[] args) { } 输出语句： System.out.println() sout 快捷键 说明 Command+B 跳转到实现 Command + U 跳转到上层方法 Command + [ 回到刚刚的位置 Ctrl + H 查看接口的实现类 3.国外源换国内源因为网络环境的问题，很多国外的开发资源拉取很慢，所以需要换到国内加快速度。 4.pip更换国内源永久修改，一劳永逸： linux/Mac下，修改 ~/.pip/pip.conf (没有就创建一个：) 12mkdir ~/.pipvi ~/.pip/pip.conf 修改 index-url至tuna，内容如下： 12[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple windows下，直接在user目录中创建一个pip目录，如：C:\Users\xx\pip，新建文件pip.ini，内容如下 12[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple 5.homebrew更换国内源替换现有上游 shell中执行： 1234567cd &quot;$(brew --repo)&quot;git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.gitcd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.gitbrew update 6.vscode-jsonvscode-json插件，应用市场可搜，美化、校验，方便又安全。 参考链接 清华大学开源软件镜像站 更改pip源至国内镜像，显著提升下载速度 Homebrew 镜像使用帮助]]></content>
      <categories>
        <category>开发笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>工具</tag>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo博客优化、定制更新记录]]></title>
    <url>%2F2018-06-07%2Fblog-change-log%2F</url>
    <content type="text"><![CDATA[按时间轴倒序更新 博客更新记录，时间都到哪里去了系列。 删繁就简时间：2019-03-23 00:46:43 删除多于非必须功能，加快网站加载速度。 添加备案信息 添加文章评分反馈时间：2018-06-14 01:25:29可以在每一篇文章的最下面进行打分，表明自己的态度。 测试一下： 没错我给的5星好评 添加icon、百度统计、bing统计时间： 2018-06-07 10:25:46 2018-06-11 13:55:23 update: 很明显现在这个站点只有我知道， 遁（ 添加https支持时间：2018-06-07 09:19:39 博客全站上线了https，同时通过 iPic Mover 把之前乱七八糟的图床批量迁移到了微博匿名图床（支持https），其实也担心微博图床啥时候就挂了，但转眼一想，说不定哪天我博客都不更新了，微博还在，也就不庸人自扰了。工具原因，部分图片未能迁移成功，也就忽略了。 感谢微博图床和 iPic Mover 。]]></content>
      <categories>
        <category>开发笔记</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
        <tag>优化</tag>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《软件工程》复习提纲]]></title>
    <url>%2F2018-06-04%2Fsoftware-engineering-notes%2F</url>
    <content type="text"><![CDATA[整理自教材、PPT以及坊间流传的材料。 软件工程概念软件生命周期模型 生命周期模型 长处 短处 进化树模型 与现实世界软件开发最接近的模型，与迭代-递增模型等价 迭代-递增生命周期模型 于现实世界软件开发最接近的模型，蕴含统一过程方法 编码-修补生命周期模型 适用于不需要维护的小程序 不适合重要的程序 瀑布生命周期模型 纪律性强制的方法，文档驱动 支付的产品可能不符合客户的要求 快速原型开发生命周期模型 确保交付的产品符合客户的要求 还没有证明无懈可击 开源生命周期模型 少量实例周期工作中相当好 实用性有限，通常不太起作用 敏捷过程 客户的需求模糊时能很好地工作 似乎只适合小规模项目 同步-稳定生命周期模型 能满足未来用户的要求，确保各组件能够成功集成 除了微软，没有广泛应用 螺旋生命周期模型 风险驱动 只能用于大型的内部软件产品，开发者必须精 通风险分析和风险排除 软件过程 软件生命周期的工作流需求 软件过程中统一过程的五个核心工作流和各阶段： 工作流： 需求流：让开发组织者确定客户的需求。 分析流：分析和提取需求，以获得正确的开发软件产品和易于维护它所必需的需求。 设计流：细化分析流的制品，直至材料处于程序员可实现的形式。 实现流：用选择的实现语言实现目标软件产品。 测试流： 每个开发者和维护这确保自己的工作是正确的 一旦软件人员确信一个制品是正确的，就将它交给软件质量保证小组进行独立测试 阶段： 开始阶段：（第一次递增）目标是决定是否值得开发目标软件产品。最主要的目标是明确提出的软件产品是否经济上可行。 细化阶段：（第二次递增）目标是细化最初的需求，细化体系结构，监控风险和细化他们的属性，细化商业案例，以及生成软件项目管理计划。主要是对前一阶段工作的细化。 构建阶段：（第三次递增）目标是产生软件产品的第一个可工作版本。 转换阶段：（第四次递增）确保客户的需求切实得到满足。 面向对象分析 类的种类： 实体类：长期存在的信息建模 边界类：软件产品和他们之间的参与者的行为建模，边界类通常和输入输出有关。例如，在基金产品中，需要打印基金投资列表和当前所有抵押报表。 控制类：复杂的计算和算法建模 抽取实体类实体类抽取包括三个迭代和递增完成的步骤： 功能建模：提出所有用例的场景（场景是用例的一个实例）。 实体类建模：提出所有实体类和它们的属性，然后确定实体类之间的交互关系和交互行为，以类图的形式提供这个信息。 动态建模：确定每个实体类或者子类的操作或对他们的操作，以状态图的形式提供这个信息。 注：对于所有迭代和递增的处理，这三个步骤不总是以这个顺序进行，一个模型中的变化通常引发其他两个模型对应的修改。 设计 面向操作设计数据流分析数据流分析（DFA）是一项得到高内聚模块的传统设计技术。该技术的输入时一个数据流图，一旦完成了DFA，软件设计者就有了关于产品的输入和输出的精确和完整的信息。 输入的最高点（point of highest abstration of input）：讲输入失去作为输入的性质并且简单的变成内部产品操作的内部数据的点。 输出的最高点：也就是数据流图中输出可以被识别的第一点，而不是被识别为某种内部数据。 两个最高点讲产品分解为三个模块，输入模块、转换模块、输出模块 符合结构化设计的目标是高内聚的同事还要低耦合。 事务分析如何完成事务分析： 设计有以下两个组件的结构：分析器、分配器 对于每个分组有关的操作，设计一个基本模块，并根据需要例示多次 面向数据设计基本原则：根据其运行的数据结构设计产品。 面向对象设计 完成类图 进行详细设计 实现 良好的编程实践 使用一致和有意义的变量名 自文档代码 使用参数 嵌套if语句 编码标准代码重用集成集成方式： 实现然后集成：独立的对每个代码制品编写代码和测试 自顶向下的集成： 自底向上的集成： 三明治： 并行：自顶向下的实现和集成逻辑制品，自底向上的实现和集成操作制品 测试逻辑制品和操作制品之间的接口 方法 优点 缺点 实现然后集成 没有错误隔离手段，主要涉及错误发现迟，潜在可重用代码制品不能被充分测试 自顶向下的集成 具有错误隔离，主要涉及错误发现早 潜在可重用代码制品不能被充分测试 自底向上的集成 具有错误隔离手段，潜在可重用代码制品能被充分的测试 主要设计错误发现迟 三明治集成 具有错误隔离，主要设计错误发现早，潜在可重用代码制品测能够被充分测试 测试 黑盒测试 等价测试和边界值分析：为了使发现错误的可能性最大，一个高回报的技术是边界值分析 如何完成等价测试： 对于范围（L,U，选五个 对于集合S，选两个 对于精确值P，选两个 功能测试：低层功能黑盒技术测试，高层功能玻璃盒测试 玻璃盒测试 结构测试：语句、分支和路径覆盖 语句覆盖，即运行一系列的测试用例，在运行期间每个语句至少执行一次。 分支覆盖：运行一些列测试，确保每个分支最少测试一次 复杂性度量 模块一个或多个邻接的程序语句的集合，它有一个名称以便系统的其他部分调用它，并且最好具有自己专用的变量名集。 维护 纠错性维护：需要纠正错误，包括分析错误，设计缺陷，编码错误，文档错误以及其他任何错误。 完善性维护：修改源代码是为了提高产品的有效性，例如提高产品的可维护性。 适应性维护：为了适应产品运行环境的变化需要对产品进行修改。]]></content>
      <categories>
        <category>学科笔记</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>复习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我眼里的字节跳动]]></title>
    <url>%2F2018-05-13%2Fwhat-i-learn-from-bytedance%2F</url>
    <content type="text"><![CDATA[本来是一篇旧文章，今天想重新发出来。 字节跳动是自己实习的第一家公司，自己当初只是一名实习生，但是却有了很强的认同感，无论从情感还是实事求是的角度讲，它都是一家值得尊敬、值得学习的企业。 原文写得比较仓促，结构比较乱，想到哪里就写到哪里，重发时做了一些调整，以下为正文。 凭记忆粗略引用一段张一鸣发在头条圈的话： “今天见一个客人聊天。十分钟左右的时候我已经给眼前给这个人贴上“有点呆”的标签，开始漫不经心。等到三十分钟过去了 我发现不对，这个人每隔十五分钟就会不动声色地抛出一个很蛮重要的问题。– 要延迟满足感，不要贴标签” 一、张一鸣其人要先说明的是，我对一鸣的了解仅限媒体的报道、内网的一些言论，就像《大腕》里面说的，一个普通人对于公司 CEO 的了解。 前几天参加了《CEO 面对面》，这应该是我们公司的一个传统，每两个月张一鸣会和大家一起交流公司这个双月的 OKR 、现状以及之后的打算。 自己因为参加技术分享会，所以参加面对面的时候的时候迟到了一会，刚到会场，一鸣刚开始讲。没听几句老实说我有点想笑，总感觉到，一鸣在面对大家讲话的时候有些紧张。 坐在下面听，感觉讲话不是很流畅，和那些驾轻就熟的大佬们还有一定的差距（因为在我的下意识里，已经把一鸣和李彦宏等人放在一起进行比较）。但是从他讲话的内容中，还是能感受到一鸣作为一个始终创业者的自信，不畏惧，不会因为外界的一些因素而畏手畏脚，充满激情（那段时间是2018年初，公司有一些负面的新闻）。 不服输，强烈地想赢，这一点从最近的一些风波也能看出来。 二、基础福利研发岗13寸顶配 Mac Pro，房补，三餐免费自助，全天无限量零食，免费下午茶，健身房服务。 头条圈的存在让很多事情都可以很快的推动，因为你不知道什么时候一鸣就会出现在某一条头条圈下面，或点赞、或批评。 三、公司价值观 公司的价值观很棒，最重要的是你身边的人，尤其是老员工，会自觉把这些价值观传承下去。 有一个小插曲，这里分享一下： 我的直属上级，当我看到他的工号很靠前的时候，不自觉表达了自己的崇拜，他当即认真地教育了我，并列举了一些例子告诉我扁平化的重要性，这一点让我十分受用，也让我在之后的日子里，很是喜欢头条的工作环境。 一旦问题暴露，事情都会在最快的时间内解决。 老实说这给了我很强的认同感，让我觉得我在一家很棒的公司工作，有的时候也给我了家的感觉——在北京这样一个距离老家、距离学校都很远的地方，有了家的感觉。在这里，你只需要做好自己的工作，其余的事情，别人会来做好。 低调这一点应该和一鸣息息相关，他喜欢低调，说我们做但是不要做之前就大张旗鼓地搞。 公司经常会存在一些代号 X 项目之类的神秘项目，也许不久之后就会成为下一个爆点。 公司在很多新的项目推广时，通常不会一开始就大规模推广，而是先观察其自然增长，只有自然增长很可观时，才会继续加大力度，大规模推广。 四、合作当你作为一个团队成员的时候，你必须要是一个团体的一部分，而不仅仅是一个独立的个体。 高层技术架构上的东西，我不敢妄言，但是整个公司的很多地方，都能很好地打通（相对于其它的企业），各自造轮子的情况相对较为少见。 五、部门我的组织架构在 XX，实际在另一个 B 部门工作。B 部门是一个比较新的部门，成立时间不久，定位是利用机器学习、数据挖掘等技术，为整个公司提供战略决策。 B 部门的 leader，暂且称作 L 君，是一个非常非常棒的人，背景什么的且不说，只谈我的感受。 追求极致，对自己、对别人都严格要求； 目标明确，为了达成目标，很明确地做一件事，不会畏惧这中间遇到的各种狗血问题； 对于下属的工作十分关心，如果你告诉她有个客观因素制约了你的进度，她一定会想办法帮你解决； 善于沟通、擅于学习、擅于倾听，会发现虽然她是leader，但是和她交流你没有感受到压力，能够最轻松的沟通工作。 鼓励个人成长，鼓励工作之余多学习 当然我说的这些可能很多 leader 都能做到，但是这位L君，能够像水一样做到，我很敬佩。 当然，部门还有很多同事也毫无保留地传授了很多经验、技术，我无意把这篇文章变成感谢信，所以不再一一表述。 当时的我，就像一块刚入水的海绵，疯狂汲取。 六、重视分享和权威公司内部每周都有大量的技术分享，量级不同，分享的着重点也不同，我也有选择性地参加了一些，基本都是都是干货满满，收获多多。 公司的 wiki 绝对是一个宝库，每每读完都觉得收益良多，周末经常会翻阅一些感兴趣的 wiki，感谢分享的同事。 在确定做一件事的时候，一定会预先请教相关领域的同事，有全面、大局的认识。 后记作为一个小人物，妄自写下了一个很大很大的标题，谈了一些个人的体会—— 不仅仅是从一个技术人的角度。头条的这段实习经历，对于我而言，技术上的成长是毋庸置疑的，无论是新技术栈的补充，还是十数亿数量级数据的实践。与此同时，公司众多明星产品的浸润，加上 L 君的指导，也让我开始从产品的角度进行更多思考。 总的来说，是一份干货满满的实习。 之前写过一篇 头条、微信实习小记，以图片的形式记录在两家公司的实习经历，感兴趣的看官不妨看一看。]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>今日头条</tag>
        <tag>字节跳动</tag>
        <tag>价值观</tag>
        <tag>体验</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[五月学习计划]]></title>
    <url>%2F2018-05-07%2Flearning-plans-for-May%2F</url>
    <content type="text"><![CDATA[目前预期的三个视频课程： 操作系统原理（Operating Systems）北京大学 总时长合计16h 完成度2/12 麻省理工公开课：线性代数 总时长合计23h 完成度2/35 吴恩达 deeplearning.ai 目前完成度54% 时间： 2018-06-20 11:54:28 完成 书籍： 李航老师的《统计学习方法》 完成度2/10 周志华老师的《机器学习》 源码 Spark源码（部分） 有计划的看 Zeppelin源码 其余计划 了解Hive SQL的 编译过程 深入了解推荐系统中的协同过滤、svd等算法，并尝试进行实践 学习XGBoost框架并进行实践 补充学习一些c++的实践 结合算法看一些spark、hadoop等数据处理和机器学习方面的应用。]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
      <tags>
        <tag>学习计划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[回到了我无限流量的珞珈山]]></title>
    <url>%2F2018-04-29%2Fhappy-vacation-in-wuhan%2F</url>
    <content type="text"><![CDATA[凌晨5：00赶到学校，被鸟叫声包围的感觉真好。 珞珈山的鸟，真棒~ 回来路上看了三部姜文的电影，都不错。 《一步之遥》 《寻枪》 《天地英雄》 附我的豆瓣观影 电影🎬链接 10个小时的坐票，为了回家也是很拼了。 拍了一段短视频： __ 早起去教五的摆拍 本来留在火车上看，却因为打开了开头就一口气看完的《至暗时刻》 一夜基本无眠，困、冷、乏，回来的体验极差，13个小时的坐票车程，不想再来一次了。]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>假期</tag>
        <tag>珞珈山</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[糟糕的一周]]></title>
    <url>%2F2018-04-26%2Fhorrible-week%2F</url>
    <content type="text"><![CDATA[这一周的工作状态很迷。 实习的时候什么最重要？其实有一个很重要的点，为什么来实习？ 我想，实习的作用在于锻炼，技术上是锻炼，心理、心态上也是。 技术上的锻炼一直都有，只是说方向的问题，事情总是不会照着我们想象的方向发展，之前的不论是机器学习、深度学习在最近的工作似乎都没有很好的用武之地。 更多的是和数据的斗争： 如何提取数据？如何提取正确的数据？如何处理数据？如何合适、恰当的利用数据做分析从而得出结论？ 更涉及到协作问题，当一个项目有几个人在跟的时候，如何做好恰当的同步？如何保持信息的畅通？如何避免推倒重来？ 写出来很容易，实际遇到的时候却不好处理。 之前组内两位同事一直在跟一个项目，leader发现效率不高同时主干有些混乱，叫我过去对接lead，同时负责其中一个模块，一瞬间，既要进行数据提取又要汇总统一，还不断的出现数据口径不一致从而导致返工现象。 几天下来，好脾气也被磨得不剩多少，一度还想歇一阵子。 仔细回来想想，其实这都算是锻炼吧？ （颇有些自我安慰的意思） 程序员不是最重要的那个以前作为程序员，内心总会有种优越感，或者说自豪感更为恰当，到了公司会发现，似乎并不是这样，事实也确实不是这样，看到自己现在的室友（做后台服务相关）每天23：00左右回来，甚至产生了抵触感。 并不希望这么累。 可能是并没有那么多的passion在现在的工作吧。 愿景还是希望自己找到一个自己真正喜欢的事业。]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>吐槽</tag>
        <tag>繁琐</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[做一个海绵]]></title>
    <url>%2F2018-04-12%2Flearning-from-colleagues%2F</url>
    <content type="text"><![CDATA[看起来像一个积极过剩的人 —— 那种我曾经有些小嫌弃的人。 关于日志这些就当做日志一样的东西，想起来了就每天写，忘记了就放一放。不仅限于工作，生活、学习都记在这里。 其实自己写东西很容易漫无边际，没有统一的主题，这不仅导致我学生时代作文很难拿高分，也让我平时不怎么愿意写东西，往往是一时兴起想写某件事情，落笔之后，发现兴趣还是改变，写起了别的东西。 当然，这一点不限于写东西。扩展到人生都是如此。 既然开始反思，自然想到写东西的另一个缺点：跳跃性。 写东西的时候往往不顾及前后的逻辑性，思维跳跃极快，这就导致文章经常结构混乱，我也一直努力通过小标题的方式圈定讨论的内容和方向，从而加以修正。 技术分享原理篇： 深入理解spark sql Fair Scheduling in Spark 工具篇： luigi 入门及实践。 老实讲，前两个听得不是很明白，主讲人的水平很高，高屋建瓴，聊的又是源码之类的深入部分，自身水准不够，课后还要多花功夫。争取对于spark有一个很好的理解和掌握。 继续反思最近开始追硅谷第五季，看到男主Richard，难免自动开始找一些所谓共同点。 Richard 在遇到人多的场合 or 重要的场合，会紧张的吐出来甚至尿裤子，其实我很多时候也会想这样的事情会不会发生，但是事实上从来没有，我在重要的关头总是那么靠谱 —— 这样你就知道我有多喜欢自己、对自己多有自信，以至于有时候会不准备直接上。 忘了是不是写过，个人感觉自己本质上是个腼腆、害羞和不愿交友的人，但是很多事情改变了我，或者说，我的性格和我的本性是不一样的。 本性应该是个coward，可外部环境和性格把我变成了一个外向的人，看起来似乎很擅长、至少很热衷于交际（当然也许别人不这么认为）。 这些应该是小时候的一些环境（主要是家教和自己的一些想法）影响所至，这里暂时不表，有机会再专门来写。 再拉回来，前面说到自己本性和外在并不匹配，当然这一点我较少愿意与人分享，亲密的人大都能懂，不亲近的说了又有装*的嫌疑。 在公司里面这一点就体现出来了，我对于陌生人社交有障碍。 我的工作是数据分析，很多时候要和很多人核对数据口径，那些人多半是藏在IM之后的 —— 我从未见过，是的我对于见面有很深的执念，见过面似乎就不算陌生。 陌生人社交障碍？ 怕打扰别人一开始总会想着自己把事情处理掉，不去打扰别人，我已经开始意识到这会浪费我很多时间。当然我并不是在鼓励做一个随便别人时间的人，在应该且有必要打扰别人的时候，勇敢的去打扰。 怕出错处理很多事情的时候害怕出问题，怕出了问题被看不起（这时候我好想用 which） 希望自己反思之后能加以改正。 怕问出愚蠢的问题因为害怕问出愚蠢问题导致尴尬从而不敢发文，不敢向人请教，是很可耻的。 2018年4月14日 最近在看硅谷，内心有种强烈的创业欲望 2018年4月16日 最近有一个想法💡，以前也想过其实，回家的时候不要带电脑充电器，用量用完之前睡觉。也许可以治疗失眠，I mean maybe. 顺便记录一下遇到的小插曲：]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>学习</tag>
        <tag>头条</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信WXG应用研究实习生面试面经]]></title>
    <url>%2F2018-04-10%2Ftencent-wechat-offer%2F</url>
    <content type="text"><![CDATA[抱着学习的心态去的，时间都是约在周末，整体面试体验不错。 大致记录一下。 部门直推。 一共四面：如果没有猜错，应该是部门同事、部门leader、面委面试、HR面 一、第一轮面试算法题有一个字符串，只包含小写字母，设计算法并写出代码移除字符串中重复的字符，要求时间复杂度、空间复杂度尽可能小，进一步地，为你的程序写测试用例。 这里面试官想考的是位运算 参考链接：https://blog.csdn.net/SunnyYoona/article/details/25096363 二、第二轮面试算法题这里其实比较有创意，因为之前参加了一些面试，所以面试官问了之前的算法题都是什么，说了之后从里面拎出来两道探讨了很久，时间复杂度、空间复杂度，如何改进等 具体参见之前的面经：今日头条-AI-lab机器学习算法岗面试 项目相关、设计项目相关项目 设计： 依据微信的用户数据做商品推荐？ 三、第三轮面试面委面试的面试官，感觉级别很高，很和蔼，看重数学基本功底,着重考察machine learning 的基础理论。说前面的面试官已经考察了很多工程能力，所以主要问了一些机器学习理论、线代以及概率论的基础。 面试的最后，那边说总体表现还不错，我现在才大三，要更关注之后的发展，如果想在机器学习这个方向走的更远，数学这方面一定要加强理解。 其实到这里的时候，心情是很复杂的。之前面头条一面（AI lab）的时候，全程在和面试官小哥聊ML和DL的数据层面，但是人家似乎并不care。 当然，那位面试官的水平还是有的，问了很多关于object detection的相关问题，也是给我上了第一课。 当然，这些题目回过头再来看，其实并不难，在于当时准备的不够充分。 题目这里记录其中的一些有印象的题目 1.极大似然估计（Maximum Likelihood Estimation）和贝叶斯估计中的最大后验概率估计(maximum posterior estimation)的理解、区别和比较？ 这个问题在《统计机器学习》p8中有详细的介绍，这里摘录一些以作记录。 经验风险（empirical risk）或经验损失（empirical loss）：模型f(X)关于训练数据集的平均损失 期望风险：模型关于联合分布的期望损失 根据大数定理，当样本数量N趋于无穷时，经验风险趋于期望风险。 所以极大似然估计和最大后验概率估计其实是两种不同的思想体现： 经验风险最小化（empirical risk minimization, ERM）的策略认为，经验风险最小的模型是最优的模型。 其中，当模型是条件概率分布，损失函数是对数损失函数分布时，经验风险最小化就等价于最大似然估计。但是，当样本容量很小时，这种策略的效果未必很好，会产生所谓的过拟合（over fitting）现象。 结构分析最小化（structural risk minimization, SRM）的策略认为，结构风险最小的模型就是最优的模型。当模型是条件概率分布，损失函数是对数损失函数，模型复杂度由模型的先验概率表示时，结构风险最小化就等价于最大后验概率估计。结构风险最优等价于正则化。 这个问题主要在于厘清一些概念性的东西。 2.常见机器学习模型的损失函数表达式 3.计算联合分布的期望（具体例子） 剩下的记不清了 四、HR面腾讯的HR是我见过最能聊的（说的好像见过很多），面试持续了半个小时。 这里记录一下： 对自己的评价？ 自己最大的优点和缺点是什么？ 自己的缺点曾经造成了什么问题？ 完了太久了记不起来了。。。 只记得问了很多问题 = = 五、结语所以说，面试其实是一个匹配的过程，所谓奇淫巧技就是要找到自己和面试官、和面试的职位之间的契合点，很多时候，面试并不是为了招聘强人，而是为了招合适的人。 一些题外话，翻了翻自己的博客和GitHub，发现自己最近没怎么写代码，很是担忧，看来要找个project试试看。 六、参考资料 《统计机器学习》 李航]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面经</tag>
        <tag>微信支付</tag>
        <tag>腾讯</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[近期学习计划 & 整理]]></title>
    <url>%2F2018-04-08%2Freading-plans%2F</url>
    <content type="text"><![CDATA[前一个月颇有些晕头转向的意思，虽说只是流鼻血并没有物理头晕，但精神上实际已经晕了，一时忘记要时刻学习。 于是制定一个简单的计划，附加一些技术名词的简单解释，不断更新。 本来确定的标题是读书计划，没想到写成了学习计划。 每当开始确立计划的时候，不免要担心是否能够顺利执行。 这种也只能让时间去检验。 我斗胆先把这些书单定在两周之内完成，两周后我来更新，看看完成了多少（这一点确实要向nica学习）。 机器学习这块，目前的首要任务是，形成系统的理解，不能单靠只言片语或者一些碎片知识，就像之前提到的，碎片知识依附于完整的知识体系。 暂定回顾书单： 《Hive编程指南》 《dlbook_cn_v0.5-beta》 《机器学习》 《Hadoop权威指南》 第三版 《Spark快速大数据分析》 dlbook_cn读起来很是激动啊，有种武侠小说里读武林秘籍的感觉，畅快淋漓，可惜不适应英文阅读，不然想来直接读原版肯定更佳。 讲道理Hadoop这本书是真的不好读，很难啃的一本书，Spark这本书则更像“快餐”。 新书单： 《统计机器学习》 《Spark The Definitive Guide》 《Scala编程》 泛读 需要了解的相关技术和名词： RPC、Protobuf、thrift 首先了解什么叫RPC，为什么要RPC，RPC是指远程过程调用，也就是说两台服务器A，B，一个应用部署在A服务器上，想要调用B服务器上应用提供的函数/方法，由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据。来自 知乎 Thrift是一种接口描述语言和二进制通讯协议，它被用来定义和创建跨语言的服务。 ETL 数据仓库技术，英文Extract-Transform-Load 的缩写，用来描述将数据从来源端经过抽取(extract)、转换(transform)、加载(load)至目的端的过程 mavenHadoop YARNCephfsSpark、Zeppelin源码 http://scikit-learn.org/ 需要熟练掌握（熟悉API）： numpy 很好的学习链接：101 NumPy Exercises for Data Analysis (Python) pandasmatplotlibsql优化Hive任务如何更快的运行、如何抢占资源（是的，就这么直接） 这个部分其实之前一直有些误解，以为会用就够，其实更多的时候这些工具需要的是熟练度，快速对数据进行处理。]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[幸运如我]]></title>
    <url>%2F2018-03-30%2Flucky-me%2F</url>
    <content type="text"><![CDATA[子曰：吾十有五而志于学，三十而立，四十而不惑，五十而知天命，六十而耳顺，七十从心所欲不越矩。 如果按照《论语》的说法，我现在应该是“志于学”的时候。 就突发感慨吧，一路走来，到了这个年纪，很多事情，到了后面都是happy ending。 保持积极的心态，带着一颗感恩的心，认真的做事情，运气一定不会太差。 但是啊，自己什么时候能改改这自制力差的毛病？ 比如暂时戒掉游戏：]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>幸运</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[写在实习满一个月的时候]]></title>
    <url>%2F2018-03-26%2Fone-month-summary%2F</url>
    <content type="text"><![CDATA[怎么说呢，从实习的一开始，我就做好了接受各种挑战的准备，但是万万没想到的是自己的身体出了问题，准确的说是鼻子。 水土不服？南方人到了北方不适应？冬春交替？ 总之事实就是，每天必流一次以上鼻血，一开始没当回事，随便拿纸堵一下就好了，后面越来越严重，甚至到了血流不止的程度，某些时候我甚至觉得应该是哪个比较粗一点的血管破了，血流的贼快。 其实，最恐怖的不是流鼻血本身，是它随之带来的问题。 未知性，这是很恐怖的。你不知道它什么时候会流。 我正在敲键盘的时候，鼻头一暖，正在走路的时候，正在吃饭的时候，它都会出来。 一开始我甚至碍于形象，不愿意塞纸到鼻子，就让血一直流，或者强行在卫生间里面堵住，然后再出来；后面根本管不了那么多了，一方面事情太多，一方面那样也太麻烦。 前几天和组里人一起吃饭，leader他们全都在，我本来就怕流鼻血，所以一直默默吃饭没说话，可还是防不住，突然就那么出来了，甚至血就那么滴进了我的餐盘里。 那时候犹豫了一些要不要先处理一下餐盘，但是我怕流的更多看起来更糟就直接冲进卫生间。好容易止住血，却不怎么敢出来，只能带着苦笑强行回到座位，周围人都在关心…… 心烦意燥无论是什么病，自然会影响效率的，每天来那么一次两次，任谁都会心烦意乱，我也因为给自己找了借口，错过了很多自我提升的学习机会。 别人的同情前面的那些，其实都不可怕，最可怕的是别人的同情。 流鼻血的时候在卫生间处理，身边的人路过，多数看一眼就走了，有些会停留多看几眼，也许是我多想吧，总感觉有些同情的意思在，我知道他们绝对没有恶意，但就是觉得有些小难过，比流鼻血都难过。 组里一位大哥，留美背景，做事比较认真，也很专业，一开始对我只是一般，正常要求，看到我几次流鼻血之后，开始很照顾我，之前说的deadline也延期了，说你早点下班、好好养身体之类的，leader本来准备把几个任务分给我，也不敢分太多。 我也不好说什么，只是默默接受，希望自己快点好起来。 变化昨天周日，按照之前的要求做了一个算法、工具调研doc，组内演示了之后leader还算满意，说，有种媳妇熬成婆的感觉，一起吃饭的时候又说，今天的presentation不错，嘴上说着没什么，心里已经乐开花。 自己绝对算是一个要强的人，自己一定是一个能够迎接一些挑战和困难的人，希望自己在之后的日子里，不浑浑噩噩，抓住机会，不辜负自己来之前的愿景，尽快成长，努力学到更多东西。]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于鼻子]]></title>
    <url>%2F2018-03-23%2Fnosebleed%2F</url>
    <content type="text"><![CDATA[如果有一天我彻底停止更新了，只有一个可能 流鼻血而死。]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[三月小记]]></title>
    <url>%2F2018-03-16%2FMarch-Summary%2F</url>
    <content type="text"><![CDATA[很久没有更新博客，自然是因为上班。以前也看过很多博客，虽然写的很不错，但是后面就断更了，工作之后，确实很少时间花在这上面。 明天双休，放假前趁空写一下小记。 update: 增加了一些细节和感受，内容几乎增加了一倍。 之前提到，我来了头条，主要的工作是数据挖掘相关，没有想象中的高大上，更多的是实实在在的东西。 因为一些原因，现在同时在两个部门，一个偏技术，一个偏产品（因为保密协议，去掉了之前明确的部门）。 生活两周过去了，好像真的是“小猪佩奇身上纹，掌声送给社会人”，总的来说，从自己的精神状态上，已经早早的适应了，可南方来的身躯似乎并没有。 一开始来的太匆忙，没有预先租好房子，于是在宾馆住了三天。 这几天每一天都不平静。 第一天，到北京的时候已经是下午，打车赶到宾馆的时候扛着一个超大的行李箱外加两个满满的背包，没什么胃口，就提前冒着风去了一趟公司，回来之后就开始葛优躺。 哦对了，到了宾馆才发现因为选的是那一家最便宜的套餐，房间在负一楼，【入住北京地下室成就】达成。 第三天换了一家酒店，价格上去了，条件反而更差了，更恐怖的是，等我入职培训完回去的时候，发现暖气已经开了，可那天的温度将近20。没办法只拿打开空调吹冷风，本想着坚持一下就算了，但熬到1:00的时候实在受不了，跑到楼下找店老板，要求关一下暖气，得到的答复是，小区统一供暖，他们也管不了 摊手 第二天火速租好了房子，火速搬到了新屋子，但是再一次干了蠢事，天猫超市一日达买了被子，先是填错了地址，晚上下班打车30min拿到了东西，又发现买的是床单没有被子。 于是盖着被单睡了一晚，第二天毫无意外的感冒了，接着开始是炎症，加上北京的不讲理理24h干燥天气，每天无限流鼻血，感觉身体被掏空。 被鼻血支配的恐惧，工作都无法集中精神。 怎么说呢，一个人的孤独感，往往不在他刚开始孤独的时候产生，会随着时间逐渐滋生。 来到北京，中国首都，多少会有一些不自信，这一点和在武汉不同 —— 武汉只是一个普通的城市，而北京则显得高冷的多，无论是当初没有去到的那两所学校，还是长久以来的历史浸润，又或者是当代小说、影视剧对于这首城市的刻画，都会让人不自觉生出一丝畏惧。 这种畏惧，是细的，当你作为一个旅客的时候，你是无法感受到的。而当你短暂的居住下来，开始在这座城市谋求生存，这一点和在这里读书又有很大的差别。 其实有些矫情了。 但细腻的想，这些都是存在的。 工作对头条的印象目前还不错，扁平化管理，去除title，公司的食堂也确实很棒，每天最开心的时候就是供餐的时候了。 还有一个最大的感受就是，大部分人对于头条都是以一个批判的眼光去看待的，很客观，有问题会直接讲出来，但同时又很有归属感，这大概和我们是仍然是一个创业公司有关。 每个人都很有激情，当然，换一种手法就是很拼，经常加班。 这两周里面我也跟着自觉加班了一段时间，但是很惨的是，对我而言，效率并不高，原因是多方面的吧，和nica聊了几次之后也看得清楚很多，最重要的还是把手头的工作做好——尽最大努力做好，如果做的连自己都不能满意，那干嘛要做呢？又怎么去给被人看？ 说到这里，就要把之前养成的deadline之前赶东西的坏习惯改掉了，不然，对自己不好，对团队而言，更是灾难。 技术提升主要是Hive、Spark、Hadoop、Scala、常见的机器学习算法 这里更是不能忘记Excel啊，这个只能说是暂时的一个替代产品，把数据的最终结果（如分布图，数据量很小）导出excel中进行图表的绘制。 尾声这几天，常挂在嘴边的一句话就是：“故天将降大任于是人也，必先苦其心志，劳其筋骨，饿其体肤，空伐其身行，行弗乱其所为，所以动心忍性，曾益其所不能。” 激励自己，静下心来，一方面按时完成任务，另一方面积极提升自我。 另外！ 等抖音的这个分析项目做完之后，第一件事就是卸了它，这个app太消耗我时间了！ 这里要指出的是，这一天一直在聊的抖音时间管理提醒也即将上线。一个产品，想要真正走的远，要思考的绝不仅仅是提高DAU，当你拥有了一定的能力的时候，你必定要担负起一定的责任。 最后放一张我和头条六周年的照片，希望之后的日子，能够安心学习技术，为团队作出贡献。 接着回去放飞自我，草草记录。]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[今日头条大数据研发实习生]]></title>
    <url>%2F2018-02-13%2Ftoutiao-data-interview%2F</url>
    <content type="text"><![CDATA[先说明下情况，之前确定的入职部门因为re-org去掉了现在的职位，所以把我转到了另外一个部门：数据研发，但是那个部门表示需要重新面试（两轮），所以就有了这一篇文章。 好在有惊无险，顺利通过。 2018-02-23: 正式offer 一面项目经历依然是针对项目聊了一些相关的技术细节。此处不表。 算法 实现32进制的加法（要求尽量不采用10进制中转的方法） 实现空间复杂度O(1)的单链表反转 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859//第一种方法是：非递归方法/*struct ListNode &#123; int val; struct ListNode *next; ListNode(int x) : val(x), next(NULL) &#123; &#125;&#125;;*/class Solution &#123;public: ListNode* ReverseList(ListNode* pHead) &#123; if(pHead==NULL) return NULL;//注意程序鲁棒性 ListNode* pNode=pHead;//当前指针 ListNode* pReverseHead=NULL;//新链表的头指针 ListNode* pPrev=NULL;//当前指针的前一个结点 while(pNode!=NULL)&#123;//当前结点不为空时才执行 ListNode* pNext=pNode-&gt;next;//链断开之前一定要保存断开位置后边的结点 if(pNext==NULL)//当pNext为空时，说明当前结点为尾节点 pReverseHead=pNode; pNode-&gt;next=pPrev;//指针反转 pPrev=pNode; pNode=pNext; &#125; return pReverseHead; &#125;&#125; //第二种方法是：递归方法 /*struct ListNode &#123; int val; struct ListNode *next; ListNode(int x) : val(x), next(NULL) &#123; &#125;&#125;;*/class Solution &#123;public: ListNode* ReverseList(ListNode* pHead) &#123; //如果链表为空或者链表中只有一个元素 if(pHead==NULL||pHead-&gt;next==NULL) return pHead; //先反转后面的链表，走到链表的末端结点 ListNode* pReverseNode=ReverseList(pHead-&gt;next); //再将当前节点设置为后面节点的后续节点 pHead-&gt;next-&gt;next=pHead; pHead-&gt;next=NULL; return pReverseNode; &#125;&#125;; 二面面完之后大概几分钟，二面面试官出现，leader面，主要是一些宏观层面。 为什么不选择读研（来自之前的面试官记录），如何应对因为没有读研带来的知识深度不够的问题？ 对于Hadoop、Spark等大数据框架是否有了解？ 自己的学习轨迹是什么样的？（也就是技术栈的变更，这里其实聊了比较多） 如何接触到机器学习这个领域的？ 最近在读什么书？读的时候在关注什么？ 武汉的学校一般管的比较紧，是否有足够的时间实习？ 前两面结束，天已经黑透了（差不多17：开始），我也饿了将近两个多小时肚子，加上我在的房间没开空调，到了最后说话的时候甚至都在微微发抖，但是一时也管不了那么多，只想着快点结束。 后记其实这次的重心应该不是面试，而是面试前的一些心态变化。 自己被告知因为更换入职部门并且需要重新面试（也就是之前的offer失效，面试不通过即自动失去机会）的时候，一度很烦。也是这时候才发现自己是个很喜欢走提前量的人，有计划的感觉总是很舒服，加上拿到offer之后确实浪了有几天，一时有些找不回状态。讲道理写到这里其实就是发牢骚了，因为一开始的打算就是在武汉解决好offer的事情，然后回家好好浪，在家安心养生的时候，突然接到面试通知的时候还是有点错愕。 好在一贯的性格就是，什么坏事情，只要睡一觉就好了~ 总的来说，很感谢这个过程中的一些小伙伴，包括面试官、leader和HR，也感谢自己赶紧摆正了心态。 那么接下来，就期待新的旅程吧！ 参考 牛客网]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>今日头条</tag>
        <tag>数据平台</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2017 年度总结：时间去哪了]]></title>
    <url>%2F2018-02-04%2F2017-summary%2F</url>
    <content type="text"><![CDATA[2017 是很惨淡的一年，有很多不满意的地方，这里记录下来留作日后回顾、对比。 1.挣扎挣扎体现在很多方面。 在读研和直接工作之间摇摆不定 技术方向一再变动：iOS -&gt; 后端 -&gt; 机器学习 学院这些无聊透顶的课程偏偏会有很多很多的任务和签到 花旗杯一度想要放弃，但还是和队友们一起坚持到了决赛 在《英雄联盟》这款过气游戏上面花了很多时间，明知道是浪费时间还是乐此不疲 熬夜的坏习惯虽然有在改，但是偶尔还是会因为追剧、打游戏或者别的事情熬到很晚甚至通宵 其实，很多问题归结起来，是自制力不够。不能合理的分配自己的时间，在关键的部分投入的不够。 2.项目 精准教育教师端 - 前端后台 英特尔杯 - 高分卫星图飞机检索 精准教育拍照搜题 - OCR 花旗杯 - 网络文学IP价值评估及预测 3.时间轴如果从时间轴上记录应该是这样： 一月图书馆借书遭意外，欠款 600 +。 全盘记录下来发现，之前的日子似乎都被忘记了，什么事情也没有发生，或者说甚至连能记录的事情都没有发生。 七月 英特尔杯 比赛时间冲突，脱不开身，没有花时间做，欠静静一个道歉(ノへ￣、)捂脸。 八月杭州之行因为花旗不得已取消。 十月发小来一起过生日 十一月赴成都参加花旗杯决赛，结束之后逛吃了几天。 花旗杯决赛-三等奖 花旗历时数月（5月-11月），多次人员变动，主题历经多次商榷，中途还换了一次指导老师，甚至全队几次想要放弃，不敢说这些经历都是难得的，但对我来时都是考验和成长，让我充分认识到经验的重要性。 沟通 如何与队友良好的沟通，包括沟通的方式方法，意见相左时如何表达，有一些不友好的方式会打击到别人的积极性。 分工 很多时候实际并不总是跟着计划走，预先安排是一部分，及时调整又是另一部分。有队友过于忙碌无暇顾及比赛时拖慢进度时，如何合理安排人员分工（甚至让一些人承担多个角色） 十二月去上海参加 Google Developer Days，顺便游玩一番，可戳旧文 谷歌开发者大会小记。 4.追剧 《行尸走肉》 《行尸之惧》 《春风十里不如你》 《权利的游戏》 《白夜追凶》 《机智牢房生活》 《和平饭店》 强推 《越狱》 最后一季 《少狼》 最后一季 《9号秘事》 《黑镜》 《大猫》 纪录片 5.电影 《太阳照常升起》 《超级巨星》 《战狼 2》 《悟空传》 《速度与激情 8》 《神偷奶爸 3》 《美女与野兽》 《神奇动物在哪里》 《英伦对决》 《寻梦环游记》 《铁雨》 《缝纫机乐队》 《摔跤吧爸爸》 《看不见的客人》 《三块广告牌》 《敦刻尔克》 《天才枪手》 《小丑回魂》 《相亲相爱》 《春宵苦短，少女前进吧！》 《羞羞的铁拳》 《追龙》 《王牌特工 2：黄金圈》 《极限特工 3：终极回归》 《暴雪将至》 《大护法》 《三生三世十里桃花》 emmm 很后悔 《丛林》 《你的名字》 《请以你的名字呼唤我》 《我能说》 其实还有很多，因为是老电影，所以没去电影院看， 6.书 提到书才发现很惭愧，读的书很少。 《C++ Primer》 《Effective C++》 《More Effective C++》 《STL源码解析》 《深入理解计算机系统》 《高性能 MySQL》 《大话设计模式》 《机器学习》 周志华 《苏东坡传》 《李鸿章传》 《中国年度微型小说》 《刀锋下的外交 :李鸿章在1870-1901》 《中国年度微型小说》]]></content>
      <categories>
        <category>年度总结</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>项目</tag>
        <tag>电影</tag>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[今日头条数据挖掘实习生面试]]></title>
    <url>%2F2018-01-31%2Ftoutiao-interview-02%2F</url>
    <content type="text"><![CDATA[相同的招数对圣斗士是无效的 老规矩，先简单记录一下。 一、一面面试官：“我认真看了你的简历和随附的项目展示视频，工程实现能力还是很不错的，这一点我比较看好。” 主要问了关于项目：（网络文学IP评估及预测）的架构（scrapy + redis + mongodb），抓取数据的实例，如何进行存储和备份，项目中负责的部分，队伍如何组建等等。 当时做项目的时候为了简便，系统的设计做的比较粗糙，后来也重新审视了一下整个项目，提出了一些改进意见（项目结束之后）。 有一点比较有趣，我提到抓取百度指数，刚好面试官也做过这个，后来两个人交流了一下经验，我们采用的比较粗放的方式自然不能用，头条内部是抓取了百度指数移动端的接口，然后对加密方式做了破解。心疼百度一下好吧。 关于这个项目，还是要感谢当初的队友（谢添未出镜）。 可能会因为之前面过头条有上一个面试官评语的关系吧，后面接着聊了一些别的问题，不是很久。 面试题前面也说了，出自LeetCode 54题，写的很顺利。 二、二面据一面的面试官说，二面是他的leader，声音很好听（是的，二面又是个妹子）。 轮流自我介绍，介绍部门的情况，继续聊刚刚的项目：项目中遇到哪些问题、怎么解决的， 接着聊了一些人生规划，比如是否选择读研，之后的方向如何确定（图像、搜索、工程），如果进来之后发现岗位不喜欢会怎么处理。leader也很随和，甚至在我调侃了几句之后突然大笑：“我第一次碰到有人在面试里面开始黑母校哈哈哈”，聊到这里我以为都会这么轻松，但显然不是这样。 可能是自己放了大话说自己比较熟悉基础算法吧，leader开始问一些技术问题： 机器学习当中都有哪些常见的分类算法？各自适用于哪些场景？ 说一下对SVM的了解？ 决策树算法当中，ID3和CART算法的区别有哪些？ 用到的PageRank算法解释下？ 分别解释一下bagging/boosting/stacking是什么？它们有哪些区别？ 文本主题提取里面 LDA 基本原理？ 机器学习中，特征出现线性重复的时候如何处理？就常见的几种算法举例解释一下 后面还有一些记不太清了 面试官说了一句我很害怕的：“对于这几个问题了解的深度不够” 我本想算了，毕竟确实准备的不到位，想想争取了一下，跟面试官直接了当的说：“你说的这些我确实不太熟悉，很大一部分原因是我没有接触相关的项目，所以不够了解，我项目里面有三个项目，比如第一个物体跟踪，我就花了很多时间去研究，我可以从头到尾给你解释一下。” 然后我硬着头皮拉着面试官说了10min，从传统的检测方式到RCNN到Fast-RCNN再到Faster-RCNN，介绍了没总方法的总体思路和重要环节 —— 我知道面试官不熟悉这个，但还是强行说了，面试官也就只能一直点头。 说完解释了一下，大概意思就是，你看我说这个的目的就是告诉你，我也可以理解出深度（其实并不够深），只要我花心思去做。 接着又开始聊人生，你身边的人对你如何评价？自己觉得最大的优点和缺点是什么？ 优点：执行力强，认准了就全身心去做，积极准备，踊跃请教别人 缺点： 比较执着，自己有了想法并且认为可行的时候更希望说服别人参与进来，不想轻易的放弃的自己的idea 最后是提问环节。 结束以后问了下，通知说是 推荐实习offer 。 三、小结 需要系统的学习，零星的学习无法组成网络 更多的机器学习相关实践经验 有的时候敢于去说服别人 对于网上的面试题还是要积极的准备 遇到过的问题一定要解决掉]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>数据挖掘</tag>
        <tag>今日头条</tag>
        <tag>花旗杯</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python爬虫基础-01]]></title>
    <url>%2F2018-01-24%2Fspider-01%2F</url>
    <content type="text"><![CDATA[个人的一些【爬虫】复习摘要，无实际参考价值，一方面回顾，另一方面准备面试。 基本的爬虫工作原理（基础TCP/IP知识） 基本的http抓取工具：request（简单）、Scrapy（自定义程度高）、PySpider（简单，web可视化）、selenium（动态加载）、Cola（分布式） Bloom Filter（判重） 如果需要大规模网页抓取，你需要学习分布式爬虫的概念。其实没那么玄乎，你只要学会怎样维护一个所有集群机器能够有效分享的分布式队列就好。最简单的实现是python-rq rq和Scrapy的结合 darkrho/scrapy-redis 后续处理，网页析取(grangier/python-goose · GitHub)，代理池，存储(Mongodb) 数据分析 基础部分网络请求 User-Agent : 有些服务器或 Proxy 会通过该值来判断是否是浏览器发出的请求 Content-Type : 在使用 REST 接口时，服务器会检查该值，用来确定 HTTP Body 中的内容该怎样解析。 application/xml ： 在 XML RPC，如 RESTful/SOAP 调用时使用 application/json ： 在 JSON RPC 调用时使用 application/x-www-form-urlencoded ： 浏览器提交 Web 表单时使用 在使用服务器提供的 RESTful 或 SOAP 服务时， Content-Type 设置错误会导致服务器拒绝服务 另外，我们还有对付”反盗链”的方式，对付防盗链，服务器会识别headers中的referer是不是它自己，如果不是，有的服务器不会响应，所以我们还可以在headers中加入referer 爬虫代理原理：伪装本机IP 突破自身 IP 访问限制，访问一些平时不能访问的站点。 访问一些单位或团体内部资源，如使用教育网内地址段免费代理服务器，就可以用于对教育网开放的各类 FTP 下载上传，以及各类资料查询共享等服务。 提高访问速度，通常代理服务器都设置一个较大的硬盘缓冲区，当有外界的信息通过时，同时也将其保存到缓冲区中，当其他用户再访问相同的信息时， 则直接由缓冲区中取出信息，传给用户，以提高访问速度。 隐藏真实 IP，上网者也可以通过这种方法隐藏自己的 IP，免受攻击，对于爬虫来说，我们用代理就是为了隐藏自身 IP，防止自身的 IP 被封锁。 职位要求来自今日头条 职位诱惑：六险一金，弹性工作，免费三餐，租房补贴，带薪休假，休闲下午茶，健身瑜伽职位描述：职位职责：1、负责构建垂直类爬虫架构，智能抓取系统设计与研发（如抓取调度，多样化抓取，页面解析和结构化抽取，海量数据存储和读取等）；2、负责研究提升爬虫抓取效率和质量（如调权调度、分析预测、质量判断、封禁与反封禁研究等）；3、负责研究和分析目标网站，探索和研究高效的数据抓取解决方案；4、负责使用 OCR 工具识别图像数据（如验证码，加密后的图片数据）。 职位要求：1、本科及以上学历，良好的代码能力，扎实的数据结构和算法功底，有快速迭代、逐步优化的工程项目经验；2、有良好逻辑思维能力、沟通能力、团队合作精神、学习能力，抗压能力，对挑战性问题充满激情；3、熟悉 linux 使用，熟悉 shell/perl/python 等脚本语言，熟练掌握正则表达式，XPATH 等常用数据提取方法；4、有多线程、网络数据处理经验优先（如HTTP协议，AJAX，爬虫开发，浏览器内核开发，Web服务开发等）；5、有大规模分布式海量数据处理经验优先（如Hadoop/Hbase/Spark/Strom/Flink等）。 参考 链接：https://www.zhihu.com/question/20899988/answer/24923424 https://cuiqingcai.com]]></content>
      <categories>
        <category>学科</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机基础知识回顾-01]]></title>
    <url>%2F2018-01-24%2FComputer-Netwoking-01%2F</url>
    <content type="text"><![CDATA[个人的一些【计算机网络基础】复习摘要，内容来自网络，文末标注了大部分来源，并非原创。 计算机网络协议OSI（Open System Interconnection）七层协议制定统一的通信协议。 TCP/IP协议OSI的一个简化版本 IP地址分类 面向连接的可靠的TCP协议 建立连接三次握手 断开连接四次握手 URL（Uniform Resource Locator）统一资源定位符 URL的格式由三部分组成：①第一部分是协议(或称为服务方式)。②第二部分是存有该资源的主机IP地址(有时也包括端口号)。③第三部分是主机资源的具体地址，如目录和文件名等。 POST和GET请求 请求报文不同，请求方式不同，安全级别不同 幂等是指同一个请求方法执行多次和仅执行一次的效果完全相同。 根据http的设计，大家在看到get的时候，都期望这个请求对服务器没有修改，看到post的时候，都认为这对服务器产生了修改。 安全性： 对于POST来说，请求的报文却不会被记录，这些对于敏感数据来说，POST更安全一些。 常见的状态响应码 RESTful API设计 协议 域名 版本 路径 HTTP动词 过滤信息 状态码 错误处理 返回结果 Hypermedia API （即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。） Cookie、session和token 存在位置 Cookie一般有时效性，存在跨域问题 token不存在跨域问题 Cookie： 名称(key)、值(value)、有效域(domain)、路径(域的路径，一般设置为全局:”\”)、失效时间、安全标志(指定后，cookie只有在使用SSL连接时才发送到服务器(https)) 一个网站的网址组成包括协议名，子域名，主域名，端口号。比如 https://github.com/ ，其中https是协议名，www是子域名，github是主域名，端口号是80，当在在页面中从一个url请求数据时，如果这个url的协议名、子域名、主域名、端口号任意一个有一个不同，就会产生跨域问题。即使是在 http://localhost:80/ 页面请求 http://127.0.0.1:80/ 也会有跨域问题 参考 https://raw.githubusercontent.com/zqjflash/tcp-ip-protocal/master/tcp-ip-protocal.png https://www.zhihu.com/question/24002080/answer/150830722 https://cuiqingcai.com https://zhuanlan.zhihu.com/p/22536382 http://www.w3school.com.cn/tags/html_ref_httpmethods.asp https://www.zhihu.com/question/28586791 http://www.ruanyifeng.com/blog/2014/05/restful_api.html]]></content>
      <categories>
        <category>学科笔记</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>基础</tag>
        <tag>大学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[百度小米2018实习生面试面经]]></title>
    <url>%2F2018-01-23%2Fbaidu-xiaomi-interview%2F</url>
    <content type="text"><![CDATA[封面 说起来真的是很凄惨呢，百度的挂在了二面，小米还在等通知，但是表现不好，很大概率也会被拒。 1.25 update 已收到拒信 怎么说呢，选择了这条路，就要走下去吧。不得不说，这几次下来，对自己还是有一定打击。 有位学长说的其实蛮好：真正重要的不是面试技巧，是你真正做出来的东西，共勉。 百度推荐的部门是搜索推荐相关 一面本来要求去北京面试，和hr沟通之后面试官同意电话面，好感plus。 流程：1.自我介绍一五一十2.聊项目经历 面试官对我的主要项目（物体检测）不是很了解，另外两个做的并不深入，所以聊起来比较尬。 3.算法题 问题描述：无序数组array, 找到数组中两个数的最大差值, 且大数出现在小数之后，如：arr[i]-arr[j], 且 i&lt;j比如： array 是 [2, 3, 10, 6, 4, 8, 1]，最大差值是8（10-2） 这里 是一个时间复杂度O(n),空间复杂度O(1)的解法。 1) 记录当前访问过的数组中的最小值 min_val;2) 当前元素值arr[i] - min_val 和 max_diff作比较 若大于 max_diff , 则更新它的值 C++代码如下 12345678910111213141516171819202122#include &lt;iostream&gt;using namespace std;int maxDiff(int *arr, int n)&#123; int min_val = arr[0]; int max_diff = arr[1]-arr[0]; for(int i=1; i&lt;n; ++i) &#123; if(max_diff &lt;(arr[i]-min_val)) max_diff = arr[i] - min_val; min_val = arr[i]&lt;min_val?arr[i]:min_val; &#125; return max_diff;&#125;int main()&#123; int arr[] = &#123;2, 3, 10, 6, 4,8,1&#125;; cout&lt;&lt;maxDiff(arr, 7)&lt;&lt;endl;&#125; 4.机器学习基础 CNN中过拟合是如何产生的？ 训练过程中的梯度消失和梯度爆炸是如何产生的？应该如何解决？ 二面二面是一个女面试官，没有算法题，主要在聊OCR的项目，比较关注具体的实现和效果的提示，最后问了一些没有接触的知识。 详细介绍一个常见的传统学习算法 介绍了K-means的基本算法流程，提问部分问了如何选取k值和初始的k个点，什么时候结束训练过程 介绍一下常见的推荐算法？ 如何计算两段文本之间的相似度？ 应该是挂在了这里，面试官给我介绍了下他们的部分，主要是做搜索推荐，问到这里的时候比较尴尬，面试官问我是不是了解LR，但是当时听得不是很清楚，加上脑子短路，竟然一时没有想起来LR就是逻辑回归(Logistic Regression, LR)，之后又问了协同推荐的一些东西，之前了解的不多，有些尬。 update： 2018-08-13 再回头看是真的头铁，记得当时文本相似度的计算答的也是烂的一批。 小米项目相关 数据库的大量数据（百万级别）如何做存储优化？ 算法题三道算法题，现场手写。 顺序打印螺旋数组 最简单明了的方法，但是写起来相对比较复杂： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354public List&lt;Inter&gt; printList(int[][] arr)&#123; List&lt;Inter&gt; result = new ArrayList&lt;&gt;(); if((arr == null) || (arr.length == 0) || arr[0].length == 0)&#123; return result; &#125; int left = 0; int right = arr[0].length - 1; int top = 0; int bottom = arr.length - 1; while(true)&#123; // 向右遍历 for(int j = left; j &lt;= right; j++)&#123; result.add(arr[top][j]); &#125; top++; if(top &gt; bottom)&#123; break; &#125; // 向下 for(int i = top; i &lt;= bottom; i++)&#123; result.add(arr[i][right]); &#125; right--; if(left &gt; right)&#123; break; &#125; // 向左遍历 for(int j = right; j &gt;= left; j--)&#123; result.add(arr[bottom][j]); &#125; bottom--; if(top &gt; bottm)&#123; break; &#125; // 向上遍历 for(int i = bootm; j&gt;= top; i--)&#123; result.add(arr[i][left]); &#125; left++; if(left &gt; right)&#123; break; &#125; return result; &#125;&#125; 更简洁的Python代码： 12345678910111213141516class Solution: def printMatrix(self, matrix): res = [] while matrix: res += matrix.pop(0) if matrix and matrix[0]: for row in matrix: res.append(row.pop()) if matrix: res += matrix.pop()[::-1] if matrix and matrix[0]: for row in matrix[::-1]: res.append(row.pop(0)) return res 明白说了考察 代码实现 O(1)空间复杂度反转链表 很常规的一道 题目。 如何求解单向链表是否存在环、求取环的长度、求取环的入口、求取总链表的长度 是否存在环：可以用两个快慢指针，快指针每步走两格，慢指针每步走一格；环的长度：先用快慢指针找到交点，同时记录慢指针走的步数，让一个 基础 进程锁的种类 这里莫名其妙蒙圈了，只答出一个读写锁。 回来之后查了一些资料，似乎也有些不清楚，按照表现形式，常见的锁：读写锁（rwlock）、自旋锁(spinlock)、互斥锁(mutex)、顺序锁(seqlock)。 这里又要感慨一番，真的复习起来，要重新捡起来的东西实在是太多了，想要雨露均沾几乎是不可能的，只有在某一个方面表现得尤为突出才能做到瑕不掩瑜！ 讲讲C++和Java的多态（polymorphism） 多态 是面向对象编程语言的重要特性，它允许基类的指针或引用指向派生类的对象，而在具体访问时实现方法的动态绑定 C++主要基于虚函数和虚函数表实现（动态绑定），由此引申一系列诸如重载、重写、隐藏的比较绕口实际差别很大的东西——但总是有人会绕这些没有意义的概念，什么指针函数、函数指针，常量指针、指针常量。 说到这里，涉及到继承关系的时候，最好是把析构函数设置为虚函数，然后在子类中利用多态特性进行覆盖，这样在delete子类对象的时候可以调用每个子类对应的析构函数进行释放空间等工作。 上述两幅图均来自 博客 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include&lt;iostream&gt;using namespace std;//基类对象class Base&#123;public: //有virtual关键字，运行时多态 virtual void f(float x) &#123; cout&lt;&lt;"Base::f(float)"&lt;&lt; x &lt;&lt;endl; &#125; //无viratul关键字，不会发生运行时多态 void g(float x) &#123; cout&lt;&lt;"Base::g(float)"&lt;&lt; x &lt;&lt;endl; &#125; void h(float x) &#123; cout&lt;&lt;"Base::h(float)"&lt;&lt; x &lt;&lt;endl; &#125;&#125;;class Derived : public Base&#123;public: virtual void f(float x) &#123; cout&lt;&lt;"Derived::f(float)"&lt;&lt; x &lt;&lt;endl; //多态、覆盖 &#125; //子类与父类的函数同名，无virtual关键字，则为隐藏 void g(int x) &#123; cout&lt;&lt;"Derived::g(int)"&lt;&lt; x &lt;&lt;endl; //隐藏 &#125; void h(float x) &#123; cout&lt;&lt;"Derived::h(float)"&lt;&lt; x &lt;&lt;endl; //隐藏 &#125;&#125;;int main(void)&#123; Derived d; //子类 Base *pb = &amp;d; //基类指针指向子类 Derived *pd = &amp;d; //子类指针指向自己 // Good : behavior depends solely on type of the object pb-&gt;f(3.14f); // Derived::f(float) 3.14 调用子类，多态 pd-&gt;f(3.14f); // Derived::f(float) 3.14 调用子类 // Bad : behavior depends on type of the pointer pb-&gt;g(3.14f); // Base::g(float) 3.14 无多态，调用自己的 pd-&gt;g(3.14f); // Derived::g(int) 3 无多态，调用自己的 // Bad : behavior depends on type of the pointer pb-&gt;h(3.14f); // Base::h(float) 3.14 无多态，调用自己的 pd-&gt;h(3.14f); // Derived::h(float) 3.14 无多态，调用自己的 return 0;&#125; 代码引自 这里 讲讲对于python底层的了解 C++如何释放二维数组空间 123456//申请、释放二维数组 int **p = new int*[5]; for(int i=0; i&lt;5; ++i) delete [] p[i]; delete []p; return 0; 结语自己有个习惯，喜欢看别人的博客，平时查资料看到好的博客，都会进到主页参观一番，有时候一路翻下来，花很多时间，但总是乐此不疲。 一篇一篇，多数是技术博文，就像在和一个人面对对交流，看到一个人的成长。 当然，多数情况下，博主们都是和我一样，喜欢立一些 flag，鲜有能坚持下去的。 又刚好在微博看到一些关于碎片阅读的观点： 厚着脸皮说一句不谋而合，近期对这个越来越有感触，很多时候看博客都图 省事，但是没有系统的学习，琐碎的看一下碎片知识，其实很难形成一个整体，之后也要多加注意。 或者说，博客只能用于临时 备忘，不能希翼更多。博客上写的一些东西，多数是拾人牙慧（说的自然是我这样一类），不能过分依赖。 至于近期的面试，其实也是属于不得已。自己独立学习的时候总感觉方向不是那么明显，所以希望有面试来不断督促自己，有压力也许会好一点？ offer倒是其次，学习为主吧。 最后，似乎更完一篇文章最近的愧疚感有所减轻呢。长久的摸鱼，什么时候能有所改观呢…… 一个高度自律的人。 参考 http://blog.csdn.net/light_lj/article/details/49490261 封面 例图 多态在 Java 和 C++ 编程语言中的实现比较]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面经</tag>
        <tag>算法</tag>
        <tag>百度</tag>
        <tag>小米</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[今日头条-AI lab机器学习算法岗面试]]></title>
    <url>%2F2017-12-30%2Ftoutiao-interview%2F</url>
    <content type="text"><![CDATA[今日头条-AI lab一面，也是我第一次参加面试，时长近两个小时，很有含金量的一次面试，遗憾的是没有通过。事后来看，应该是初生牛犊不怕虎，很多东西掌握的不好，就贸然去尝试，不过也算了给了当头一棒，后面开始沉下心学习、准备。 流程如下 一、项目经历faster-rcnn 相关因为项目中用到faster-rcnn，所以聊了很多项目和论文细节的问题，多数记不太清楚了，靠印象记录几个。 rcnn 到 fast-rcnn 再到faster-rcnn的一些改进是什么？ faster-rcnn中如何自动选择负样本？ faster-rcnn采用的什么损失函数？ 传统的图像处理技术是否有了解？ 说一说SSD和YOLO 说说对caffe的了解？ 基础 完整解释CNN的流程，分别解释每一层的作用 卷积神经网络与传统的神经网络相比优点是什么？ 也就是卷积的作用是什么 说一说RNN和LSTM 你项目中用到了LDA，说一说你对于LDA的理解？ OCR tesseract-ocr 4.0 的原理是什么? LSTM在这里面是如何进行运用的 二、算法题 一维数组top k问题 杨氏矩阵top k问题 三、提问没问，或者说白问。 四、提醒自己1.简历打印出来，放在身边 五、体会试探性的投了今日头条的机器学习算法岗，事实证明我还是naive。很多东西不够连贯（没有形成一个整体的理解），部分内容理解的不到位或者不够深入，主要原因还是实践部分过少，单纯的理论知识肯定是不行的。 项目里面有部分核心环节用了一些开源框架和工具，不应该只是会用，应该去关注这些框架所涉及的具体算法和代码实现。 面试官问了一些项目更加深入or细节的信息，而这些往往都没有回答上来。 同时也暴露出来一个很大的问题，代码实现能力还是不够扎实，一方面是算法题刷的不够，另一方面就是将思路转换为代码实现的能力还是不够，之后应该多尝试动手，不能仅仅停留在理论层次。自己找一些实际的项目动手试一试，主动去接触实际的东西。 初高中常常有以考代练的说法，我想这大概是一种，只是一上来就练了某条，等级似乎有点高。 接下来的日子里，还是要着眼提升自己的实力。]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>今日头条</tag>
        <tag>AI lab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为什么深度学习需要使用GPU？]]></title>
    <url>%2F2017-12-17%2Ftwo-1080ti%2F</url>
    <content type="text"><![CDATA[总算是有了一个初级炼丹炉吧，虽然是实验室的233 希望自己能够善用炼丹炉，早日成为一名合格的炼丹师！ 后面针对GPU来整理一下相关的资料。 来填之前挖的坑了。 如何选购GPU 其实关于GPU，之前李沐有很好的科普帖： GPU 购买指南 这里摘录一部分：[1] GPU 的性能主要由以下三个参数构成： 计算能力。通常我们关心的是 32 位浮点计算能力。16 位浮点训练也开始流行，如果只做预测的话也可以用 8 位整数。 内存大小。当模型越大，或者训练时的批量越大时，所需要的 GPU 内存就越多。 内存带宽。只有当内存带宽足够时才能充分发挥计算能力。 对于大部分用户来说，只要考虑计算能力就可以了。GPU 内存尽量不小于 4GB。但如果 GPU 要同时显示图形界面，那么推荐的内存大小至少为 6GB。内存带宽通常相对固定，选择空间较小。 李沐： “1050ti，1080ti和titan xp性价比都不错” 为什么深度学习要用GPU1.多核并行：GPU最早是用于图形渲染、计算，多核并行提高渲染速度，NVIDIA有一个非常形象生动的视频： 2.计算类型简单统一：CPU和GPU之所以大不相同，是由于其设计目标的不同，它们分别针对了两种不同的应用场景。CPU需要很强的通用性来处理各种不同的数据类型，同时又要逻辑判断又会引入大量的分支跳转和中断的处理。这些都使得CPU的内部结构异常复杂。而GPU面对的则是类型高度统一的、相互无依赖的大规模数据和不需要被打断的纯净的计算环境。[4] 可参考下图的设计理念：[5] 部分机器学习算法，比如遗传算法，神经网络等，也具有这种分布式及局部独立的特性（e.g.比如说一条神经网络中的链路跟另一条链路之间是同时进行计算，而且相互之间没有依赖的），这种情况下可以采用大量小核心同时运算的方式来加快运算速度。[6] 参考 [1] 动手学深度学习 [2] 为什么GPU运算速度比CPU的运算速度快 [3] CPU和GPU的区别是什么 [4] 1.2CPU和GPU的设计区别 [5] NVIDIA: 什么是 GPU 加速计算？ [6] 为什么在部分机器学习中训练模型时使用GPU的效果比CPU更好？]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>显卡</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[谷歌开发者大会小记]]></title>
    <url>%2F2017-12-14%2Fgoogle-developer-days%2F</url>
    <content type="text"><![CDATA[说几点体会： 你竟然讲不好英文？和一些外籍工作人员沟通的时候很是费力，口语不好是硬伤，要加油啊233 接下来就是无脑堆图。 感谢武汉GDG的赞助]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>谷歌</tag>
        <tag>体会</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[无端回忆]]></title>
    <url>%2F2017-12-05%2FThe-happiest-tends-to-come-from-the-most-difficult-times%2F</url>
    <content type="text"><![CDATA[在基地睡了一会，醒来之后感觉脑子不是很清醒，出去买了瓶雪碧，路上在冷风中打开猛灌一口的时候（澳门屌丝上线了），突然就想到了高中时代。 总会觉得，那时候是受了点苦的。 但是人总会苦中作乐嘛，最苦的那时候，做出来的一些乐 ———— 深夜火锅+雪碧，让我怀念到现在。]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>回忆</tag>
        <tag>苦中作乐</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常出去走走]]></title>
    <url>%2F2017-12-05%2FWant-to-travel%2F</url>
    <content type="text"><![CDATA[谁没有想过环游世界之类的呢？ 大学前的一些小想法，似乎很多都放下了。 最近很糟糕的日子让我觉得，是的，你该出去走走了。 但很奇怪的是，前不久去了成都，在街头走了很久之后，发现自己累了，并没有看到自己想看的——事实上我并不知道自己想看到什么。 当然我知道所谓景点都是一样的，并不能期待那些景点给你带来什么。 一直很喜欢山山水水，也许大自然的一些东西更能给我激情。 那么下一次，就是某一个大山吧。 古人常说的游历山水，是不是也有这样的考量在里面？ 愿我在之后的日子里，能见到更多有意思的人、物。 做人最重要开心嘛~ 不愿矫情，难逃矫情Orz]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>日常</tag>
        <tag>山山水水</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[被懒惰困扰]]></title>
    <url>%2F2017-12-02%2Fbeaten-by-laziness%2F</url>
    <content type="text"><![CDATA[很长一段时间，效率都一直很低，这种情况已经持续很久了。 具体的表现就是每天醒来没有明确的目标，即便是前一天晚上制定了完善的计划，也会在第二天被一些小的意外或者自己的懒惰打断，从而继续懒惰下去。 懒惰，亦或者说是拖延症，让我整个人都很焦躁。 对，焦躁。 不愿意、不屑于做很多事情，但是实际做的事情又明明很low。 我还是会像以前一样宣扬“人生开心论”，也就是做人最重要开心，但是实际我很不开心。 很多时候会发现自己是不合群的，其中一个表现在于缺点，每个人都会有缺点，我当然一样，这并没有什么打不了的，但是我似乎已经习惯别人接受我的缺点而非自己去改变—— 尤其熟人。 我对于熟人的压榨可谓是过分，好朋友就更是如此，关系更好一点的就是离谱了。 所以通常我的朋友大都脾气很好，也只有很好才能和我相处。 但是有一件事情是这样，我并非不懂得很多事情，也不是无休止的索取。当我觉得你当了我一定时间的朋友之后，我就会开始珍惜，开始反馈，也就是说，只有和我做了相当久的朋友才会体会到我的一些帮助或者回馈？ 似乎聊远了，但也不是，因为这些都属于影响自己进度的一个很重要的部分。 情绪在我的工作进度上似乎占了很大的比例——就目前来看。 心情好，进度就相对较快，目标也显得明确。 我也觉得是在一个小地方呆久了的缘故，所以准备出去走走看，有机会就出去转一转。 比如之前的成都之行，再比如之后的魔都之旅，都很期待，希望一个简短的旅行让自己时刻保持新鲜感，对生活充满期待。 所以基地的人会说我，从四川回来之后就一直在笑。 出去走一走，心情开阔，自然就开心，再简单不过的道理。 再回到效率上来，总结来说，主要的原因大概是： 心情，有一些沟通上的问题，加上生活方便的一些不如意 事务繁杂，不愿意做一些无用 or 不甘兴趣的事情，但是又非得做 长期囿于一地，胸中的世界也窄了 当然，这一阵子也不尽是不开心，还是有着很多激动人心的事情，支撑着我。 希望自己能够一直开心的活下去，就像后门那个烧烤老板随口说的，“为了生存”。]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>懒惰</tag>
        <tag>思想惰性</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习面试基础知识 & 扩展-01]]></title>
    <url>%2F2017-10-09%2Fbasic-deep-learning-01%2F</url>
    <content type="text"><![CDATA[视频教程的总结和一些自行补充的内容，旨在尽可能的理解其原理。 训练、开发、测试集 Tips 训练/开发/测试集经验比例 6：3：1 当数据量超过百万时，测试集只需约1w（也就是不需要严格按照比例增长） 严格保证分层取样 偏差(Bias)、方差 (Variance)在忽略噪声的情况下，泛化误差可分解为偏差、方差两部分。 偏差：度量学习算法的期望预测与真实结果的偏离程度，也叫拟合能力。 方差：度量了同样大小的训练集的变动所导致的学习性能的变化，即刻画了数据扰动造成的影响。 —摘自《机器学习》，周志华 参考：Understanding the Bias-Variance Tradeoff 分类器 Train set error 1% 15% 15% 0.5% Dev set error 10% 16% 30% 1% status high variance high bias high bias &amp; high variance low bias &amp; low variance 偏差：模型的预测误差率（训练集中的准确率越大，偏差越大） 方差：模型的泛化能力（开发集中的表现和训练集的差距大小，差距越大，代表方差越大） high Bias 意味着模型的分类效果不好，high Variance 意味着模型往往过拟合，不能很好的泛化。 我们通常这样利用这两个参数调整我们的神经网络，其中部分内容会在本文的后面进一步探讨。 梯度消失与梯度爆炸其实梯度爆炸和梯度消失问题都是因为网络太深，网络权值更新不稳定造成的，本质上是因为梯度反向传播中的连乘效应。对于更普遍的梯度消失问题，可以考虑用ReLU激活函数取代sigmoid激活函数。另外，LSTM的结构设计也可以改善RNN中的梯度消失问题。 梯度爆炸的应对方案： 梯度裁剪（gradient clipping）：如果梯度的范数大于某个给定值，将梯度同比收缩 梯度消失的应对方案： 合理的初始化权重值。初始化权重，使每个神经元尽可能不要取极大或极小值，以躲开梯度消失的区域。 使用relu代替sigmoid和tanh作为激活函数。 使用其他结构的RNNs，比如长短时记忆网络（LTSM）和Gated Recurrent Unit（GRU），这是最行的做法。我们将在以后的文章中介绍这两种网络。 欠拟合和过拟合 简单分类器示例 上图从左到右分别是欠拟合、合适的拟合和过拟合三种情况。 过拟合过拟合是如何产生的？ 根本原因：参数太多，模型复杂度过高，同时数据相对较少，或噪声相对较多。 整个训练过程其实是模型复杂度和过拟合之间的一个权衡，如下图 如何应对过拟合？我之前的一篇译文提到过：译文 如何应对过拟合？结合前文中提到的偏差和方差，我们有以下经验： 也就是： 增大训练数据量 - 最有效的方案 进行特征筛选，减少特征数量 Cross Validation - 数据量不足的情况下常用 Early Stopping - 提早结束训练过程 正则化（regulation）- 主要是L1和L2正则化 采用 Dropout - 随机将某些神经元的权重初始化为零 如果是树模型可以采用剪枝 Cross Validation回到交叉验证，根据切分的方法不同，交叉验证分为下面三种： 简单交叉验证所谓的简单，是和其他交叉验证方法相对而言的。首先，我们随机的将样本数据分为两部分（比如： 70%的训练集，30%的测试集），然后用训练集来训练模型，在测试集上验证模型及参数。接着，我们再把样本打乱，重新选择训练集和测试集，继续训练数据和检验模型。最后我们选择损失函数评估最优的模型和参数。 S折交叉验证又称（S-Folder Cross Validation），和第一种方法不同，S折交叉验证会把样本数据随机的分成S份，每次随机的选择S-1份作为训练集，剩下的1份做测试集。当这一轮完成后，重新随机选择S-1份来训练数据。若干轮（小于S）之后，选择损失函数评估最优的模型和参数。 留一交叉验证 又称（Leave-one-out Cross Validation），它是第二种情况的特例，此时S等于样本数N，这样对于N个样本，每次选择N-1个样本来训练数据，留一个样本来验证模型预测的好坏。此方法主要用于样本量非常少的情况。 早停法（Early Stopping）为了获得性能良好的神经网络，网络定型过程中需要进行许多关于所用设置（超参数）的决策。超参数之一是定型周期（epoch）的数量：亦即应当完整遍历数据集多少次（一次为一个epoch）如果epoch数量太少，网络有可能发生欠拟合（即对于定型数据的学习不够充分）；如果epoch数量太多，则有可能发生过拟合（即网络对定型数据中的“噪声”而非信号拟合）。 早停法背后的原理其实不难理解： 将数据分为定型集和测试集 每个epoch结束后（或每N个epoch后）： 用测试集评估网络性能 如果网络性能表现优于此前最好的模型：保存当前这一epoch的网络副本 将测试性能最优的模型作为最终网络模型 最优模型是在垂直虚线的时间点保存下来的模型，即处理测试集时准确率最高的模型。 其中，停止条件可以是下面这三条 权重的更新低于某个阈值的时候 预测的错误率低于某个阈值 达到预设一定的迭代次数 正则化正则化 是结构风险最小化策略的实现，是在经验风险上加一个正则化项(regularizer)或惩罚项(penalty term)一般来说，监督学习可以看做最小化下面的目标函数： 作用: 英文是regulation，字面意思是调整修正，也就是调整上图中出现应对过拟合 常见种类: L0、L1、L2 L0范数 L0范数表示向量中所有非零元素的个数 定义： L1范数 L2范数 定义：L2范数是指向量各元素的平方和然后求平方根。我们让L2范数的规则项||W||2最小，可以使得W的每个元素都很小，都接近于0，但与L1范数不同，它不会让它等于0，而是接近于0。 L2范数如何减少过拟合？ 使部分神经节点w的权重降低为零，从而简化网络，将上图中图3中转换为图1，结果是variance降低，bias增加。 L1 / L2范式的区别下降速度 模型空间的限制这里的图例主要是假设参数只有两个，从而出现了圆形和椭圆求交集的情况 视频讲解： 2：30 优化问题：把 w 的解限制在黄色区域内，同时使得经验损失尽可能小。 这也导致L2相对较为稳定，L1可以产生更多稀疏解。 Dropout Dropout是指在模型训练时随机让网络某些隐含层节点的权重不工作，不工作的那些节点可以暂时认为不是网络结构的一部分，但是它的权重得保留下来（只是暂时不更新而已），因为下次样本输入时它可能又得工作了。 Experiment in Keras基于 CIFAR-10 dataset 的实验结果演示： 分析：dropout等于0.2的时候效果最佳代码：Github 示例演示代码演示100代码的简单神经网络代码：pycharm关于激活函数作用的直观解释：知乎回答：异或 可视化演示 链接：TensorFlow 参考资料 https://www.zhihu.com/question/20924039 http://blog.csdn.net/zouxy09/article/details/24971995 https://liam0205.me/2017/03/25/bias-variance-tradeoff/ http://scott.fortmann-roe.com/docs/BiasVariance.html 正则化方法：L1和L2 regularization、数据集扩增、dropout https://www.zhihu.com/question/26898675 http://www.cnblogs.com/pinard/p/5992719.html 梯度消失和梯度爆炸 LSTM如何来避免梯度弥散和梯度爆炸？]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[干净是最好的]]></title>
    <url>%2F2017-09-24%2Fclean-is-the-best%2F</url>
    <content type="text"><![CDATA[最近在配置一些常用环境的时候才体会到什么叫做干净的才是最好的。 你永远不知道什么会相互冲突。 这大概也是容器这一概念长盛不衰的原因。 可惜我到现在才慢慢意识到。 奉上 Google 生成的风格化照片： 《武大信部樱花》 健康最重要最近虽然坚持了几天早睡早起，但是效率仍然不是很高，加上 lol 入围赛已经开始，emmmm，还是在武汉… 堪忧堪忧 最近一日三餐不规律，加上今天晚上吃的东西太乱（水果、冰镇雪碧、鸡排、卤蛋）导致一直肚子痛，12点上床翻来覆去疼的睡不着觉。 警醒！ 按时吃饭、按时休息、勤加锻炼。 等待有时候也很有效我这个人属于急性子，很多时候等不来，火急火燎，遇到问题喜欢坚持，有时候看起来是效率高，但更多的时候，往往是等了一阵子问题的答案自己出来了，或者说我慢慢意识到了问题出在哪。 由此可见，有时候等待也不失为一个好办法。]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>樱花</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何通过视频教程“入门”深度学习？]]></title>
    <url>%2F2017-09-22%2Fhow-to-learn-deeplearning-by-watching-vedios%2F</url>
    <content type="text"><![CDATA[最近断断续续的在看一些深度学习相关的教学视频，当然我指的不是那些21天从入门到精通的那种，感觉效率始终不高，效果也不是很好，看到后面才开始有一点感觉，这里记录一下。 开始听不懂——正常最近去听课的时候一个老师讲了一个很尬的事情： 说是某一个学期开始的时候，他讲完第一次课，问下面的学生听懂了没有，学生说没有。他就很慌，回去之后反复思考问题出在哪。第二次课的时候他还是没想到什么好办法，就还是按照之前的样子继续上，讲的是新的内容，结束之后接着问学生听懂了没有。学生说听懂了。可据他自己说，第二节课的内容比第一节还要难一点。 你看着可能一脸懵逼，我当时也一样。后来他强行找了个理由，总结说是因为有个适应的过程，第一次不懂不要怕，继续听下去，讲课的时候一般会有简单的回顾，这时候往往能解决之前的问题。 我也就强行总结下：一开始不懂正常，慢慢就懂了。关键是接着听下去。 之前也看了几个视频（CS231n、吴恩达），但是都没坚持下来，也算是交了学费。 保持专注，尽快回来一开始看很多视频的时候，看了几个章节之后开始出现很多知识盲区，就想着很快把出现的新东西补起来，于是一般查一般看，但是很难把握查资料的深度，就很烦。 所以我的结论是查资料的时候查完立马回来看，不要被打断🙅 这里再安利一个很棒的教程：https://classroom.udacity.com/courses/ud730/lessons/6370362152 Google出品，值得一看，准备顺便出一个笔记。 keep focus!]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSAPP课程学习笔记-0]]></title>
    <url>%2F2017-09-20%2Fcsapp-notes-0%2F</url>
    <content type="text"><![CDATA[待更新 学习资源引用一个知乎回答： 学习这门课我觉得收获最大是写lab。这门课一共有6个lab。分别是： Data Lab：bit 运算与float的相关操作 Bomb Lab：阅读汇编破解密码 Attack Lab：Buffer Overflow 攻击 Cache Lab：实现一个cache simulator已经一个cache efficient的矩阵转置。 Shell Lab：用多进程实现一个简单的linux shell。主要是熟悉进程控制与同步。 Malloc Lab：自己写一个C语言的malloc函数。 Proxy Lab：写一个支持HTML的多线程Server。熟悉Unix网络编程与多线程的控制与同步。 从底层的角度来讲，特定条件下 switch语句和if else语句谁更高效？while循环和for循环哪个更高效？解释器构造实践相关的几个问题： Why are there so many programming languages? Why are there new programming languages? What is a good programming language?]]></content>
      <categories>
        <category>学科笔记</category>
      </categories>
      <tags>
        <tag>csapp</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo hexo + next主题深度优化]]></title>
    <url>%2F2017-09-20%2Fhexo-optimization-records%2F</url>
    <content type="text"><![CDATA[优化页面加载速度Chrome 开发者工具，查看页面加载速度，找到耗时最多的部分并想办法进行调整。 点击加载 Disqus为了避免墙内小伙伴一直处于加载状态，加了点击加载评论区。 参考：Hexo Next 主题点击加载 Disqus 照片流参考：这里 # 网站 HTTPS 化尴尬的是，部署成功之后又放弃了，因为发现添加HTTPS之后网站加载速度慢了好几倍，可能是我配置的有问题，于是决定先放弃，毕竟加载速度更重要。 这一部分也欢迎指点。 hexo-admin后台管理系统，Github pages操作不便，放弃之。 hexo-pdf可以查看我的 Flag专区-第一周 这一篇文章，查看示例。 end感谢众开源作者们👏]]></content>
      <categories>
        <category>开发笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>优化</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS上的好用软件和使用Tips]]></title>
    <url>%2F2017-09-17%2FmacOS-tips%2F</url>
    <content type="text"><![CDATA[1.软件篇日常高频使用的软件： iTerm：高颜值终端 Qbserve：记录软件使用频率 番茄土豆：番茄工作法 VScode：编码利器 IDEA：Java 开发必备 Typora：高颜值的 markdown 编辑软件，谁用谁爱 网易有道词典：查词必备 Alfred 3：聚焦搜索的高级版，口碑一直很高，不过对我来说，mac 自带搜索往往足够 iStat Menus：提供一些系统监控功能，例如网速显示等，很实用 Tencent Lemon：腾讯出品的垃圾清理软件，难得的良心产品 Navicat Premium：SQL 客户端，小项目用来可视化很方便 日历软件：日程提醒 2.Tips一些非常好用的功能： Mac 的触摸板的众多功能： 重按触摸板翻译：看文献时候非常方便 当你有多台苹果设备时一定不要忘记开启 Handoff（接力），可以十分方便的同步 Mac 和 iPhone 的剪切板内容 Airdrop(隔空投送)，多台苹果设备之间快速传递文件 // TODO 补充更多 macOS 使用技巧]]></content>
      <categories>
        <category>开发笔记</category>
      </categories>
      <tags>
        <tag>未完待续</tag>
        <tag>macOS</tag>
        <tag>奇淫巧技</tag>
        <tag>tips</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新学期的目标和计划]]></title>
    <url>%2F2017-09-04%2Fnew-term-new-goals%2F</url>
    <content type="text"><![CDATA[新学期的目标和计划 目标 &amp; 计划 深度学习、CV 方便有一个能拿的出手的项目 争取发一篇 paper(捂脸🤦‍♀️) 数据结构和算法再认真刷一刷 经常更新博客、Github 上保持 push 遇到好的想法就立即去实现！ 试着提高专业课到课率 和以前一样，骑着车去听一听有趣的课，去别的学校转一转 攒一点钱 稳重一点，不要总是冒冒失失 哦对，提高英雄联盟段位，练一练补刀，看一看攻略。]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
      <tags>
        <tag>计划</tag>
        <tag>目标</tag>
        <tag>学业</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[七夕的一些小感慨]]></title>
    <url>%2F2017-08-29%2F%E4%B8%83%E5%A4%95%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%84%9F%E6%85%A8%2F</url>
    <content type="text"><![CDATA[对于这几天的一个进度总结以及一些小感慨。 引子虽说标题写了七夕，但其实和七夕一点关系都没有，只是顺便记录一下时间。倒是七夕晚上出去吃火锅的时候很是尴尬，自己一个人兴致勃勃地跑出去，整个店基本都是双人，店长为了让我不是那么尴尬找了一圈才找到一个同时单人的位子。这里按下不表。 关于大三仿佛是突然意识到自己大三了，之后随之而来的就应该是实习、工作吧。 总是觉得自己并没有准备好，一方面还不很明确自己的技术方向 —— Java 后台？ CV ？ 另一方面对于基础没有十足的信心，老实讲自己对于笔试是有点虚的，尤其是数据结构和算法，之前也列举了一个近期的小目标，希望能在近期基于 python 实现一遍。 一次内推请一位学姐内推了商汤，等待了很久，内心也很纠结。自我感觉还没有准备好（很多东西没有看到位），但是又不甘错过这次机会，看起来就像是有人想要故意和我开一个玩笑，偏偏简历筛选结果也是一拖再拖，打扰学姐很多次请她帮忙查询进度，自己都觉得很尴尬。本身不是一个喜欢麻烦别人的人（其实大家都这样），就很气。 这几天的学习进度，只能用堪忧形容。 一些断断续续的学习吧，总算是聊胜于无。 这里还要提的是，最近才意识到一个问题，写博客是为了什么？ 为了分享？为了装X？为了某种程度上的社交？还是想着写一些没有营养的文章就可以提高自己的姿势水平？ 刚看到一篇别人的博客中写道，面试官对他说：“你广度有了，但是深度不够。” 这位博主在掘金已经有1w+的关注量，博文也是经常更。所以说，经常更新博客，顶多算是一个无关痛痒的小加分项，真正学到有用的东西，真正有钻研、深度才是关键。 以质量取胜！ 这也是为什么我会分多个地方写东西，简书博客、掘金专栏写干货，这里相当于自留田，什么都写，主要灌水（ 有关孤独？ 非 【非主流】 生理上一直失眠，一直头疼，晚上睡不好觉（表现是难以入睡），白天怎么也睡不够，偶尔醒着的时候状态也很差，学一会就想放弃，做点别的事情，这一点我也是很无奈；更骚的是精神上竟然又感觉到孤独，久违的孤独，原谅我这里用了烂大街的孤独一词。 可是大家都是孤独的不是么，很久以前写过“你永远不能将自己敞开给另一个人，使你全部被理解”这样的酸句子，到现在也是一样。 自己总是以一个游戏的心态在这个世界里生活。打个比方吧，你去玩一款单机游戏，一开始一切对于你来说都是未知的，你会有很多地图可以探索，很多剧情，你可以结交很多朋友，但是当你深信这只是一个游戏的时候，你再怎么也不能投入很多心思进去，到了某些时刻，当剧情不是那么吸引人的时候，你就会感到【孤独】。 我以为我只是一个人呆久了，所以这几天晚上都会出去散步，走在校园里，看到身边很多人，还是一样的感觉。感觉自己是在用上帝视角在看别人。 一对怪异的老人，奔跑的小孩，操着浓厚方言开心打着电话的长发女生，身边的行道树，远处的大楼，周围包着我的是一座城。 这座城不会去关心你的状态，只是看着。我一直都知道。但是这时候我希望有一个人望向我：”You are not alone.” 写到这里，感觉十分矫情，其实本意不是这样，只是想记录下来，也许这样可以帮助自己，让自己觉得生活多一点乐趣，未来多一点意义。 哦，讲一点开心的事情吧，囧终于和龙母啪啪啪了，画风突变 匿（]]></content>
      <tags>
        <tag>孤独</tag>
        <tag>感慨</tag>
        <tag>划水</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[近期计划]]></title>
    <url>%2F2017-08-25%2F%E8%BF%91%E6%9C%9F%E8%AE%A1%E5%88%92%2F</url>
    <content type="text"><![CDATA[近期颇感颓废，效率低下，特贴出计划，自勉。 计划分为长短期，每日总结。 面试准备（数据结构、机器学习） 编程语言（ C++ 、python） 项目相关 课程相关 机器学习 &amp; 深度学习 其它 待办 面试准备数据结构 链表 栈 &amp; 队列 树 &amp; 二叉树 图 排序 查找 参考资料 算法可视化：https://visualgo.net/en 编程语言 重新学习 C++：更新系列文章 basic-cpp 继续学习 python 的更多特性：更新系列文章 basic-python 机器学习 搞清楚原理，能自行推导，解释一些常见的问题，举例说明一些实际的应用，明白为什么这样 线性回归 逻辑回归 K-means KNN 决策树 SVM 朴素贝叶斯 LSTM 随机森林 卷积神经网络 CNN 学习书籍 参见近期文章 编程书单 项目相关 学习更多关于 Spring 的相关知识 页面流图 重点课程 参见近期文章 大三上课程安排 机器学习 &amp; 深度学习 Faster-RCNN CPU_ONLY 模式，争取近期出一个记录帖 读 Selective Search 源码 图像识别系列RCNN -&gt; SPPNET -&gt; Fast-RCNN -&gt; Faster-RCNN -&gt; yolo -&gt; SSD -&gt; R-FCN 撸一个完整的项目，实践出真实。 Object Tracking Staple Struck Kalman filter 滤波原理 其他 重读《月亮和六便士》 翻一翻《人间词话》 再读《我与地坛》 电影 《突袭2》 国产剧《春风十里不如你》 美剧《行尸之惧》 9.11续更 lol 一区上一下黄金？ 每天不超过两局 健身 跑步🏃 治好失眠… 好吧我知道不可能… 待办 翻译 ARKit 一文 飞机识别项目 Web 界面 演示视频 飞机识别项目 Github repo（扑街） requests 源码阅读]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>机器学习</tag>
        <tag>计划</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【译】如何应对CNN中的过拟合问题]]></title>
    <url>%2F2017-08-13%2F%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E5%BA%94%E5%AF%B9CNN%E4%B8%AD%E7%9A%84%E8%BF%87%E6%8B%9F%E5%90%88%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[掘金译文 深度学习系列3 - CNNs 以及应对过拟合的详细探讨什么是卷积、最大池化和 Dropout？ 这篇文章是深度学习系列中一篇文章。请查看#系列1和#系列2 欢迎来到本系列教程的第三部分的学习！这周我会讲解一些卷积神经网络（Convolutional Neural Network, CNN）的内容并且讨论如何解决欠拟合和过拟合。 一、卷积（Convolution）那么究竟什么是卷积呢？你可能还记得我之前的博客，我们使用了一个小的滤波器（Filter），并在整个图像上滑动这个滤波器。然后，将图像的像素值与滤波器中的像素值相乘。使用深度学习的优雅之处在于我们不必考虑这些滤波器应该是什么样的（神经网络会自动学习并选取最佳的滤波器）。通过随机梯度下降（Stohastic Gradient Descent,SGD），网络能够自主学习从而达到最优滤波器效果。滤波器被随机初始化，并且位置不变。这意味着他们可以在图像中找到任何物体。同时，该模型还能学习到是在这个图像的哪个位置找到这个物体。 零填充（Zero Padding）是应用此滤波器时的有用工具。这些都是在图像周围的零像素的额外边框 —— 这允许我们在将滤镜滑过图像时捕获图像的边缘。你可能想知道滤波器应该多大，研究表明，较小的滤波器通常表现更好。在这个例子当中，我们使用大小为 3x3 的滤波器。 当我们将这些滤波器依次滑过图像时，我们基本上创建了另一个图像。因此，如果我们的原始图像是 30x 30 ，则带有12个滤镜的卷积层的输出将为 30x30x12 。现在我们有一个张量，它基本上是一个超过 2 维的矩阵。现在你也就知道 TensorFlow 的名字从何而来。 在每个卷积层（或多个）之后，我们通常就得到了最大池化（Max pooling）层。这个层会减少图像中的像素数量。例如，我们可以从图像中取出一个正方形然后用这个正方形里面像素的最大值代替这个正方形。 得益于最大池化，我们的滤波器可以探索图像的较大部分。另外，由于像素损失，我们通常会增加使用最大池化后的滤波器数量。理论上来说，每个模型架构都是可行的并且为你的的问题提供一个很好的解决方案。然而，一些架构比其他架构要快得多。一个很差的架构可能需要超过你剩余生命的时间来得出结果。因此，考虑你的模型的架构以及我们为什么使用最大池并改变所使用的滤波器的数量是有意义的。为了在 CNN 上完成这个部分，这个页面提供了一个很好的视频，可以将发生在 CNN 内部的事情可视化。 二、欠拟合 vs. 过拟合你如何知道你的模型是否欠拟合？ 如果你的验证集的准确度高于训练集，那就是模型欠拟合。此外，如果整个模型表现得不好，也会被称为欠拟合。例如，使用线性模型进行图像识别通常会出现欠拟合的结果。也有可能是 Dropout（Dropout）的原因导致你在深层神经网络中遇到欠拟合的情况。Dropout 在模型训练时随机将部分激活函数设置为零（让网络某些隐含层节点的权重不工作），以避免过拟合。这种情况一般不会发生在验证/测试集的预测中，如果发生，你可以移除 Dropout来解决。如果模型现在出现大规模的过拟合，你可以开始添加小批量的 Dropout。 通用法则：从过度拟合模型开始，然后采取措施消除过拟合。 当你的模型过度适合训练集时，就会发生过拟合。那么模型将难以泛化从而无法识别不在训练集中的新例子。例如，你的模型只能识别你的训练集中的特定图像，而不是通用模型，同时你在训练集上的准确性会高于验证/测试集。那么我们可以通过哪些方法来减少过拟合呢？ 减少过拟合的步骤 添加更多数据 使用数据增强 使用泛化性能更佳的模型结构 添加正规化（多数情况下是 Dropout，L1 / L2正则化也有可能） 降低模型复杂性。 第一步当然是采集更多的数据。但是，在大多数情况下，你是做不到这一点的。这里我们先假定你采集到了所有的数据。下一步是数据增强：这也是我们一直推荐使用的方法。 数据增强包括随机旋转图像、放大图像、添加颜色滤波器等等。 数据增加只适用于训练集而不是验证/测试集。检查你是不是使用了过多的数据增强十分有效。例如，如果你那一只猫的图片放大太多，猫的特征就不再可见了，模型也就不会通过这些图像的训练中获得更好的效果。下面让我们来探索一下数据增强！ 对于 Fast AI 课程的学习者：请注意教材中使用 “width_zoom_range” 作为数据扩充参数之一。但是，这个选项在 Keras 中不再可用。 现在我们来看看执行数据增强后的图像。所有的“猫”仍然能够被清楚地识别出来。 第三步是使用泛化性能更佳的模型结构。然而，更重要的是第四步：增加正则化。三个最受欢迎的选项是：Dropout，L1 正则化和 L2 正则化。我之前提到过，在深入的学习中，大部分情况下你看到的都是 Dropout 。Dropout 在训练中删除随机的激活样本（使其为零）。在 Vgg 模型中，这仅适用于模型末端的完全连接的层。然而，它也可以应用于卷积层。要注意的是，Dropout 会导致信息丢失。如果你在第一层失去了一些信息，那么整个网络就会丢失这些信息。因此，一个好的做法是第一层使用较低的Dropout，然后逐渐增加。第五个也是最后一个选择是降低网络的复杂性。实际上，在大多数情况下，各种形式的正规化足以应付过拟合。 左边是原来的神经网络，右边是采用 Dropout 后的网络 三、批量归一化（Batch Normalization ）最后，我们来讨论批量归一化。这是你永远都需要做的事情！批量归一化是一个相对较新的概念，因此在 Vgg 模型中尚未实现。 如果你对机器学习有所了解，你一定听过标准化模型输入。批量归一化加强了这一步。批量归一化在每个卷积层之后添加“归一化层”。这使得模型在训练中收敛得更快，因此也允许你使用更高的学习率。 简单地标准化每个激活层中的权重不起作用。随机梯度下降非常顽固。如果使得其中一个比重非常高，那么下一次训练它就会简单地重复这个过程。通过批量归一化，模型可以在每次训练中调整所有的权重而非仅仅只是一个权重。 四、MNIST 数字识别MNIST手写数字数据集是机器学习中最着名的数据集之一。数据集也是一个检验我们所学 CNN 知识的很好的方式。Kaggle也承载了 MNIST 数据集。这段我很快写出的代码，在这个数据集上的准确度为96.8％。 import pandas as pd from sklearn.ensemble import RandomForestClassifier train = pd.read_csv(&apos;train_digits.csv&apos;) test = pd.read_csv(&apos;test_digits.csv&apos;) X = train.drop(&apos;label&apos;, axis=1) y = train[&apos;label&apos;] rfc = RandomForestClassifier(n_estimators=300) pred = rfc.fit(X, y).predict(test) 然而，配备深层 CNN 可以达到 99.7％ 的效果。本周我将尝试将 CNN 应用到这个数据集上，希望我在下周可以报告最新的准确率并且讨论我所遇到的问题。 如果你喜欢这篇文章，欢迎推荐它以便其他人可以看到它。您还可以按照此配置文件跟上我在 fast AI 课程中的进度。到时候见！ 译者注： 翻译本文的时候，我事先查阅了一些资料以保证对于原文有更好的理解，但是由于个人水平有限等等原因，有些地方表达的不甚清楚，同时还添加了一定的辅助参考信息以更好的说明问题。若读者在译文中发现问题，欢迎随时与我联系或提 issue。 掘金翻译计划 是一个翻译优质互联网技术文章的社区，文章来源为 掘金 上的英文分享文章。内容覆盖 Android、iOS、React、前端、后端、产品、设计 等领域，想要查看更多优质译文请持续关注 掘金翻译计划。 原文地址：Deep Learning-3-more-on-cnns-handling-overfitting 原文作者：Rutger Ruizendaal 译文出自：掘金翻译计划 本文永久链接：https://github.com/xitu/gold-miner/blob/master/TODO/deep-learning-3-more-on-cnns-handling-overfitting.md 译者：曹真 校对者：Lilei &amp;&amp; changkun]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>神经网络</tag>
        <tag>CNN</tag>
        <tag>过拟合</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决了一个困扰三天的bug]]></title>
    <url>%2F2017-08-02%2F%E8%A7%A3%E5%86%B3%E4%BA%86%E4%B8%80%E4%B8%AA%E5%9B%B0%E6%89%B0%E4%B8%89%E5%A4%A9%E7%9A%84bug%2F</url>
    <content type="text"><![CDATA[描述：Spring Boot中 hibernate 延迟加载 | 懒加载（lazy loading）造成序列化失败 明日填坑 过了好几天才来填，很难过，因为当时解决的时候没有立即记录，现在我对着电脑发呆，想了十分钟记不起这个bug到底是什么。 可啪。 于是决定记录新遇到的一个问题。 一、Spring hibernate 懒实例化Spring Boot中 hibernate 延迟加载 | 懒加载（lazy loading）造成序列化失败 问题描述背景很简单，一个家长（Guardian）对应多个孩子（Student） 首先在家长bean里定义 List&lt;Student&gt; students ，接着通过guardian对象的guardian.getStudents()获取对应的学生对象，按理说没有任何问题 Guardian.java 家长bean 12345678@Entity@Table(name = "Guardian")public class Guardian &#123; @OneToMany private List&lt;Student&gt; students; //学生列表&#125; GuardianController.java 1234567@ApiOperation(value = "孩子列表") @GetMapping(value = "/children") public List&lt;Student&gt; children(HttpServletRequest request) throws ServletException &#123; Guardian guardian = userService.currentGuardian(request); return guardian.getStudents(); &#125; 在IDEA本地运行的时候接口正常: 但是奇怪的是部署到服务器Tomcat上之后接口报错： 输出如下： 12345678&#123; &quot;timestamp&quot;: 1501826190599, &quot;status&quot;: 500, &quot;error&quot;: &quot;Internal Server Error&quot;, &quot;exception&quot;: &quot;org.springframework.http.converter.HttpMessageNotWritableException&quot;, &quot;message&quot;: &quot;Could not write content: could not extract ResultSet (through reference chain: org.sklse.lab.bean.ResultModel[\&quot;content\&quot;]-&gt;org.hibernate.collection.internal.PersistentBag[0]-&gt;org.sklse.lab.bean.Student[\&quot;submittedHomeworks\&quot;]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: could not extract ResultSet (through reference chain: org.sklse.lab.bean.ResultModel[\&quot;content\&quot;]-&gt;org.hibernate.collection.internal.PersistentBag[0]-&gt;org.sklse.lab.bean.Student[\&quot;submittedHomeworks\&quot;])&quot;, &quot;path&quot;: &quot;/edu/guardian/children&quot;&#125; 解决方案一番debug之后很是头疼，后来请教了一位长者，指出可能是懒实例化的问题，于是查找到解决方案，在Spring Boot的application.properties配置项添加： 1spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true 于是问题顺利解决 思考 这个例子当中的guardian.getStudents()是延迟加载的，最开始的studentList其实放的是 Hibernate 的 PersistentBag ，这个对象是不可以序列化的。 待补充细节 二、Tomcat缓存问题本文链接：http://hellogod.cn/2017-08-02/解决了一个困扰三天的bug/]]></content>
      <categories>
        <category>开发笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>开发笔记</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[即将步入大三的学长给CS专业新生的一些建议]]></title>
    <url>%2F2017-07-29%2F%E5%8D%B3%E5%B0%86%E6%AD%A5%E5%85%A5%E5%A4%A7%E4%B8%89%E7%9A%84%E5%AD%A6%E9%95%BF%E7%BB%99CS%E4%B8%93%E4%B8%9A%E6%96%B0%E7%94%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE%2F</url>
    <content type="text"><![CDATA[2018-06-27 更新： 这些东西，现在再看会觉得幼稚可笑，本想已删了之，还是觉得保留，写这些本来就是为了记录嘛，也算是记录当时的一些幼稚可爱心情。 前言作为一个过来人，想根据自己的一些经历，给后来人一些实在的建议，希望自己踩过的坑，你们能有所了解，虽然这并不意味着你们就可以跳过去。 预警：这篇文章读起来会有点乱。 正文整篇文章分成以下三个部分： 1.引子 2.四点建议 3.总结 你可以在博客的左上方查看目录 1. 引子这不会是一篇面面俱到的文章，也不是一篇你读完就会Up Up然后浑身鸡血的文章，不过我倒是希望，有一天你经历一件事情的时候，会想到：“哎，话说当时我是不是有看过某人写过这个balabala来着？” 前戏结束。 2. 建议Part A. 你确定读这个专业吗？ 未来的方向是什么？首先考虑自己的大致方向，注意我是说考虑而不是决定，你一开始决定根本不算什么，你在之后的日子里有很大的概率改变决定。 是否确定读这个专业，或者说走相关的路线 （因为很多人并非第一志愿进到这个专业 摊手┑(￣Д ￣)┍） 这关系着你是不是要准备转专业事宜，如果确定不读，请趁早准备转专业，大一刷高绩点，至少在武大转别的专业很简单。 如果你凑巧确定读下去，考虑一下未来所走的路线： 1.留学 通常代表着要刷GPA，准备托福、GRE之类的语言考试 2.保研 or 考研 绩点要高，多去参加一些保研加分的比赛——前提是能拿奖 推荐互联网+、中国软件杯、英特尔杯 3.本科毕业直接工作 这一个看起来最为轻松，基本没什么要求，不要挂科，按时毕业（当然，很高的GPA依然会给你带来很大的好处，所以我依然建议你好好学习开设的大学课程） Part B. 关于学业我应该怎么做从上面的一些介绍你可以看出来，大学没有多数人想的那么轻松————可以过上不用学习散漫自由的生活。 如果你想不被比下去，你依然要学习，听起来像废话。 敲黑板 总结起来：好好听课，好好写作业，好好考试，保持高绩点！ Part C. 专业技能专业技能 这一块是我想重点强调也是最重要的部分。 基本分为两个方向： 研究（Research） 做一些带有科研性质的工作 工程 （Software Engineering） 简单来说就是写代码，但其实远不止写代码 前者建议找机会进一个有声望一点的实验室，进去之后多读paper多看代码，可以少接工程类项目。后者基本就是多刷点项目，多看点技术类的知名书籍：供参考，提升设计和抽象能力。 我强烈建议你参加一些技术类的社团，在武大，你可以尝试【自强技术中心】、【微软俱乐部】、【天行】之类的技术中心，当然这几个只是我个人了解到的一些，可能还有更多更优秀的，你可以询问一些友好的学长学姐们获取更多信息。 我本人接触过一段时间的自强iOS组，但是待的时间不长，后来因为一些其他的事情没有继续待下去 后来反而因为一些16级的学弟学妹了解了更多，他们会在大一收到派发的一些技术任务，偶尔有一些人会过来和我讨论，很遗憾的是大部分情况下我都没有给到很足够的帮助。但是可以看得出来，他们比大一的我要厉害很多很多，我也很佩服他们。 这里po一下自己的经历 1.大一懵逼一年，结束的时候连基本的C++操作链表都不会写,很是惭愧 2.大一下的开始学着写代码，在实验室按照老师要求做项目。上来就是Objective-C，当时基本上就是边学边做。有位学长帮了自己很多忙，手把手教如何善用搜索引擎，怎么debug……! 学长今年毕业，走之前一直想请他吃顿饭，但是不知怎么遇见几次都没说出来，唔，就先祝@子豪学长未来一帆风顺 3.接着大一的暑假实训，组队做了一个童年小游戏：欢乐打飞机 大家一起玩的很开心，开始感觉写代码很有成就感————毕竟第一次写出一个自己（我们）的小游戏，虽然是用了cocos2d-x引擎 = = 这个是当时的小游戏Keynote传送门（前面有广告好像）： 以及Github：https://github.com/LJ147/HappyPlane 这个repo是之后提交的，要说明的是，花时间学习一下git是很有必要的。 我曾经见过研究生还不会使用基本git操作的，了解仅限于点击下载 *-master 文件的，希望你能掌握这些必备技能————在适当的时候。 一些基础且使用的编程素养，在课堂上可能不会讲解，你去要去多了解，可以合理使用知乎之类的平台了解一些总结类的图谱学习路线，之后你还会了解到 Google + Stack Overflow 的工作模式，另外多多向身边的人虚心请教。 一些基础的Linux操作，掌握一种脚本语言，基本的http相关知识、如何在国内访问Google等等都会是你的加分项或者说必需项。 Attention：这里我提到了一些陌生的名词，你不需要感到任何惊慌，只要按照正常的线路走下去，你一定会接触到这些，只要在恰当的时间，花上一定的时间去了解、掌握即可。 4.大二开始主动学习一些东西。 自己作为一个普通人的情况是这样： A. 大二刘峰老师的Java实验课程，虽然只有0.5学分，但是自己花了很多心思在上面，助教们@文可 @郑啸宇的几次实验，让我找到了高中时候刷题的那种快感，会为了一点Extra Credict去加班，要知道我之前的很多作业都是直接抄的（这一点你们千万别学，只要平时认真听课写作业，期末就不会慌，如果你做到了以后一定会回来感谢我的） B. 之前和队友接了一个项目，做一些简单的Java后台和前端开发。最后还是决定在一位老师的实验室学习一些初级的机器学习、深度学习，还是希望赶上ai这一波车。 C. 参加过一些有趣的小比赛如武汉大学建模大赛、网页设计大赛，现在在努力尝试花旗杯、英特尔杯等。 建议大家之后确定自己想从事的具体方向之后，多看看相应的岗位招聘要求，“按照要求”提升对应的能力应该不会错的对吧 总结：大二开始要试着去找目标、找方向，多尝试几种总归是没有坏处的 Part D. 兴趣和生活前面提到自己在大一的这一年过得很懵，但是不得不提这一年玩的很开心，加了很多兴趣类的社团，每天玩的不亦乐乎，认识了很多有意思的朋友。 多参加一些有意思的活动，多运动和锻炼，按时吃饭睡觉，我觉得ok。 3. 总结 最后想说的是，我其实就是一个很普通的人，很普通的学长，在很普通的武大国软，很普通的disco我们普通的摇。 等等！ 等等等等！ 你在干嘛？ 好好好 回归正题，只是因为写到这里的时候随机到这首歌（ 不说整个行业有多少牛人，单是我们学院就有很多人轻松秒杀我，所以按道理我是没有资格分享这些经验的————既不是绩点大神，也不是代码大佬。 哇，不知不觉竟然以菜鸡的身份竟然吹了一整篇，汗颜汗颜。真是应了那句 唔，写下这些，是想从一个CS专业普通过来人的角度，给后面的人一些参考，希望他们能够更加优秀，对于之后要接触的东西有一个提前一点的了解，不至于像我刚进校的时候那么迷茫。当然迷茫也不见得是坏事啦~ 如果你有任何问题，欢迎与我随时联系，我的邮箱是：ajaxThen@gmail.com，我的微信是：还是不放了… 哈哈哈哈，微商既视感 不过如果能帮到一些人，就很开心了。]]></content>
      <categories>
        <category>大学总结</category>
      </categories>
      <tags>
        <tag>建议</tag>
        <tag>经验之谈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[音乐和电影]]></title>
    <url>%2F2017-07-29%2F%E9%9F%B3%E4%B9%90%E5%92%8C%E7%94%B5%E5%BD%B1%2F</url>
    <content type="text"><![CDATA[喵喵喵，今天似乎没什么可以写的，但是还是想保持每天写点东西，于是准备推几首音乐。没错就是这样… 虽然这几个似乎看起来不是很搭~ 首先是一首很清的歌：《初恋旧爱新欢》，看歌名就知道很好听啊，所以试试看吧 接着是一首很奇怪的歌：《自挂东南枝》，曲风也很奇怪，总之高考生慎入（呸，才没有高中生看你博客！不对，是没人看你博客！） 最后是最爱的的一个版本：李宗盛的《漂洋过海来看你》 这个要附上歌词 为你我用了半年的积蓄飘洋过海的来看你为了这次相聚我连见面时的呼吸都曾反复练习言语从来没能将我的情意表达千万分之一为了这个遗憾我在夜里想了又想不肯睡去记忆它总是慢慢的累积在我心中无法抹去为了你的承诺我在最绝望的时候都忍着不哭泣陌生的城市啊娃娃《漂洋过海来看你》简谱娃娃《漂洋过海来看你》简谱熟悉的角落里也曾彼此安慰也曾相拥叹息不管将会面对什么样的结局在漫天风沙里 望着你远去我竟悲伤得不能自己多盼能送君千里直到山穷水尽一生和你相依为你我用了半年的积蓄飘洋过海的来看你为了这次相聚我连见面时的呼吸都曾反复练习言语从来没能将我的情意表达千万分之一为了这个遗憾我在夜里想了又想不肯睡去记忆它总是慢慢的累积在我心中无法抹去为了你的承诺我在最绝望的时候都忍着不哭泣陌生的城市啊熟悉的角落里也曾彼此安慰也曾相拥叹息不管将会面对什么样的结局在漫天风沙里 望着你远去我竟悲伤的不能自已多盼能送君千里直到山穷水尽一生和你相依陌生的城市啊熟悉的角落里也曾彼此安慰也曾相拥叹息不管将会面对什么样的结局在漫天风沙里 望着你远去我竟悲伤的不能自已多盼能送君千里直到山穷水尽一生和你相依陌生的城市啊熟悉的角落里也曾彼此安慰也曾相拥叹息不管将会面对什么样的结局在漫天风沙里 望着你远去我竟悲伤的不能自已多盼能送君千里直到山穷水尽一生和你相依]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>日记</tag>
        <tag>音乐</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[01-《UNIX高级环境编程》全书精华集锦（更新中）]]></title>
    <url>%2F2017-07-26%2F%E3%80%9001%E3%80%91%E3%80%8AUNIX%E9%AB%98%E7%BA%A7%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A8%8B%E3%80%8B%E5%85%A8%E4%B9%A6%E7%B2%BE%E5%8D%8E%E9%9B%86%E9%94%A6%2F</url>
    <content type="text"><![CDATA[众所周知，Linux系列知识极其重要，公司面试、实际开发都需要用到。最近看了一些资料之后，发觉自己很多地方没有掌握到位，于是开始逐一查阅，顺便整理了这个懒人版供大家参考。 1 引子 每个需要详细了解问题下面👇需要的信息都给出了相应的参考链接，有些还配上了实际操作，相信你认真看完本文之后对于UNIX操作系统基础能有一个更加清晰的认识。 2 正文（1）什么是操作系统？什么是UNIX操作系统？什么是Linux操作系统？它们之间的关系是怎样的？ 操作系统:控制计算机硬件和软件资源，对作业进行合理的调度，以供用户方便使用的一组软件的集合。 UNIX操作系统，是一个强大的多用户、多任务操作系统，支持多种处理器架构，按照操作系统的分类，属于分时操作系统。 Linux，即GNU/Linux，是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。 Linux继承了Unix以网络为核心的设计思想，它能运行主要的UNIX工具软件、应用程序和网络协议。 （2）UNIX操作系统有哪些典型的分支？Linux，Mac OS X，BSD系列与Solaris ##（3）什么是Shell？ 内置变量$$、$*、$@、$?、$#的具体含义是什么？ shell是一个命令语言解释器，是用户和UNIX内核直接的接口，它拥有自己内建的shell命令集，shell也能被系统中其他应用程序所调用。用户在提示符下输入的命令都由shell先解释然后传给UNIX核心。 $$ 是shell脚本运行的当前进程ID号 $* 是以一个单字符串显示所有向shell脚本传递的参数 $@ 是传递给shell脚本的所有参数列表 $? 显示最后命令的退出状态，0表示没有错误，其他表示有错误 $# 是传给脚本的参数个数 ##（4）常用的Shell命令 如ls、cd、dd、pwd、ps、cp、chown、chmod、mkdir等的具体用法。 Unix常用命令： http://kimi.it/23.html ls 列出目录下的文件 cd 改变当前目录 dd 用指定大小的块拷贝一个文件，并在拷贝的同时进行指定的转换(cc已被用来代表CComplier) pwd 查看当前工作目录 ps显示系统中当前运行的进程状态 cp 复制文件 chown 更换所有者 mkdir 创建一个目录 chmod 改变文件访问权限 ##（5）什么是内部命令？什么是外部命令？ 它们的区别是什么？ 这篇文章里面还提到了hash缓存表的存在，例子也很好，值得一看。linux的命令分为内部命令和外部命令 内部命令在系统启动时就调入内存，是常驻内存的，所以执行效率高。外部命令是系统的软件功能，用户需要时才从硬盘中读入内存。 内部命令：内部命令被构建在shell之中。当执行shell命令时，内部命令的执行速度非常快。这是因为没有其他的进程因为执行这条命令而被创建。比如说，当我们执行“cd”命令时，没有进程被创建。在执行过程中只是简单的改变当前的目录。 外部命令：外部命令并没有被构建在shell中。这些可执行的外部命令保存在一个独立的文件当中。当一个外部命令被执行时，一个新的进程即被创建同时命令被执行。比如说，当我们执行“cat”（通常被保存在/usr/bin目录下）命令时，然后/usr/bin/cat被执行。 ##（6）什么是C语言的头文件？ 有哪些是操作系统提供的头文件？哪些是C语言的标准头文件？ 头文件作为一种包含功能函数、数据接口声明的载体文件，主要用于保存程序的声明。C语言的标准头文件：ISOＣ标准定义的头文件操作系统提供的头文件：POSIX标准定义的头文件 ##（7）C语言程序的基本结构是怎样的？ 编译器怎样搜索头文件？ 顺序结构,选择结构,循环结构 C语言，使用include指令，包含头文件，但又细分两种形式：１、形式一：#include “file1” gcc先在当前目录（指包含本条#include指令的源文件所在的目录）寻找file1，如果找不到，继续在由-iquote选项（如果有的话）指定的目录中寻找file1。 例如，在文件/usr/include/sys/stat.h中，包含指令#include “types.h”，那么gcc先在/usr/include/sys目录下寻找types.h文件。嗯，在该目录下，确实存在一个types.h的文 件。现假设我们把这个文件移动到另一个目录：mv /usr/include/sys/types.h /bar/foo/，我们在编译时，可以通过-iquote选项，在不改变stat.h的情况下，正常编译（当然，通常不建议这样做）：gcc -iquote /bar/foo -I/usr/include/sys *.o２、形式二：#include gcc按照以下顺序查找file2：-Idir1 -Idir2 …/usr/local/includelibdir/gcc///include/usr//include/usr/include第 一行中，-Idir1 -Idir2 … 是用户通过gcc的-I选项指定的目录。值得一提的是，放在/usr/local/include/下的头文件也会被gcc自动的检索，这与/usr /local/lib/目录下的库处理方式是不一样的。 ##（8）怎样利用gcc编译源文件？ gcc的-o、-e、-static、-Wall等选项的具体含义是什么？怎样使用？ -c 用来告诉编译器编译源代码但不要执行链接，输出结果为对象文件。文件默认名与源码文件名相同，只是将其后缀变为 .o-o 制定目标名称,缺省的时候,gcc 编译出来的文件是a.out-E 使用-E 选项，执行预处理工作-static 此选项将禁止使用动态库，所以，编译出来的东西，一般都很大，也不需要什么动态连接库，就可以运行-Wall 生成所有警告信息-S 生成汇编代码 深入理解：GCC编程四个过程:预处理-编译-汇编-链接 http://wiki.ubuntu.org.cn/Compiling_Cpp ##（9）什么是动态链接库？ 什么是静态链接库？怎样用静态链接的方式编译C程序？ 静态库是在链接阶段被链接的，所以生成的可执行文件就不受库的影响了，即使库被删除了，程序依然可以成功运行。有别于静态库，动态库的链接是在程序执行的时候被链接的。所以，即使程序编译完，库仍须保留在系统上，以供程序运行时调用。 gcc -static ##（10）什么是文件系统？ UNIX的文件系统有什么特点？有哪些具体的文件类型？ 文件系统是操作系统用于明确存储设备（常见的是磁盘，也有基于NAND Flash的固态硬盘）或分区上的文件的方法和数据结构；即在存储设备上组织文件的方法。Unix可以把一个能随机存取的存储介质（如：硬盘、软盘和光盘）上的存储空间划分成一致多个区域，每个区域都可以像独立的物理设备一样单独进行管理和数 据存取，这样的存储区域，即是逻辑设备。在逻辑设备上按照一定的格式进行划分，就构成了逻辑文件系统，简称文件系统。 普通文件 这种文件包含了某种形式的数据,这些数据无论是文件还是二进制对于 UNIX 内核而言都是一样的。对普通文件内容的解释有处理该文件的应用程序进行。 目录文件 目录文件包含了其他文件的名字以及指向与这些文件有关信息的指针。对一个目录文件具有读权限的任一进程都可以读取该目录的内容,但是只有内核才能直接写目录文件。 块特殊文件 这种文件类型提供对设备带缓冲的访问,每次访问以固定长度为单位进行。 字符特殊文件 这种文件类型提供对设备不带缓冲的访问,每次访问长度可变。系统中的所有设备要么是字符特殊文件,要么是块特殊文件。 FIFO 这种类型文件用于进程间通信。也称为命名管道(namedpipe)。 套接字(socket) 这种文件类型用于进程间的网络通信。 符号链接(symbolic link) 这种文件类型指向另一个文件。 ##（11）什么是文件的访问权限？ 使用chmod命令怎样改变访问权限？chmod 0777是什么意思？ 在linux中的每一个文件或目录都包含有访问权限，这些访问权限决定了谁能访问和如何访问这些文件和目录chmod [mode] 文件名(其中mode可用二进制数表示)u ：目录或者文件的当前的用户g ：目录或者文件的当前的群组o ：除了目录或者文件的当前用户或群组之外的用户或者群组 ##（12）怎样解读ls -l 命令显示的文件信息？ 目录或文件的访问权限：http://www.lampweb.org/linux/2/6.html 12$ ls -l sobsrc. tgz-rw-r--r-- 1 root root 483997 Ju1 l5 17:3l sobsrc. tgz r代表只读，w代表写，x代表可执行，-代表空许可。注意这里共有10个位置。第一个字符指定了文件类型。在通常意义上，一个目录也是一个文件。如果第一个字符是横线，表示是一个非目录的文件。如果是d，表示是一个目录。 ##（13）什么是管道？什么是文件重定向？dup()、dup2()函数怎样使用？ 管道:UNIX操作系统进程间通信的一种方式，一个进程的输出直接传递到另一个进程作为输入 linux shell数据重定向（输入重定向与输出重定向）详细分析 二者都用来复制打开的文件描述符，复制成功后和复制源共享同一个文件表。 12int dup (int filedes);int dup2 (int filedes, int filedes2); 两函数的返回值：若成功则返回新的文件描述符，若出错则返回-1由dup返回的新的文件描述符一定是当前可用文件描述符中的最小数值。用dup2则可以用filedes2参数指定新的描述符的数值。如果filedes2已经打开，则先将其关闭。若filedes等于filedes2，则dup2返回filedes，而不关闭它。 ##（14）什么是文件的静态属性和动态属性（文件描述符属性）？ 在文件描述符属性中，哪些是由进程维护的？哪些是由内核维护的？ 图解 理解具体情况，需要了解由内核维护的3个数据结构： 进程级文件描述符表(file descriptor table) 系统级打开文件表(open file table) 文件系统i-node表(i-node table) 这3个数据结构之间的关系如下图所示： 内核使用三种数据结构表示打开的文件,分别是文件描述符表、文件表和 V 节点表。 (1) 每个进程在进程表中都有一个记录项,记录项中包含有一张打开文件描述符表,每个描述符占用一项。与每个文件描述符相关联的是: (a) 文件描述符标志。 (b) 指向一个文件表项的指针。 (2) 内核为所有打开文件维持一张文件表。每个文件表项包含: (a) 文件状态标志(读、写、添写、同步和非阻塞等)。 (b) 当前文件偏移量。 (c) 指向该文件 V 节点表项的指针。 (3) 每个打开文件(或设备)都有一个 v 节点(v-node)结构。v 节点包含了文件类型和对此文件进行各种操作的函数的指针。v 节点还包含了从磁盘读取的 i 节点(i-node)的信息,i 节点信息包含了文件的所有者、文件长度、文件所在的设备、指向文件的实际数据块在磁盘上的所在位置的指针等。 参考链接：Linux文件描述符 ##（15）什么是会话（Session）、进程组？它们之间有什么关系？ (1) 会话是一个或多个进程组的集合。 (2) 进程组是一个或多个进程的集合，通常它们与一组作业相关联，可以接受来自同一终端的各种信号。每个进程组都有唯一的进程组ID(整数，也可以存放在pid_t类型中)。 每个进程组都有一个组长进程，组长进程的标识是进程组ID等于其进程ID。进程调用setsid函数创建一个新的会话，该进程会变成新会话的会话首进程，该进程也成为一个新进程组的组长进程。如果此调用进程已经是一个进程组的组长，则此函数返回出错。 (3)一个会话可以包含多个进程组，一个会话对应一个控制终端。 ##（16）父进程和子进程之间是什么关系？怎样在父子进程之间共享文件描述符？ （1）由fork创建的新进程被称为子进程（child process）。 该函数被调用一次，但返回两次。两次返回的区别是子进程的返回值是0，而父进程的返回值则是新进程（子进程）的进程 id。将子进程id返回给父进程的理由是：因为一个进程的子进程可以多于一个，没有一个函数使一个进程可以获得其所有子进程的进程id。对子进程来说，之所以fork返回0给它，是因为它随时可以调用getpid()来获取自己的pid；也可以调用getppid()来获取父进程的id。(进程id 0总是由交换进程使用，所以一个子进程的进程id不可能为0 )。 fork之后，操作系统会复制一个与父进程完全相同的子进程，虽说是父子关系，但是在操作系统看来，他们更像兄弟关系，这2个进程共享代码空间，但是数据空间是互相独立的，子进程数据空间中的内容是父进程的完整拷贝，指令指针也完全相同，子进程拥有父进程当前运行到的位置（两进程的程序计数器pc值相同，也就是说，子进程是从fork返回处开始执行的），但有一点不同，如果fork成功，子进程中fork的返回值是0，父进程中fork的返回值是子进程的进程号，如果fork不成功，父进程会返回错误。可以这样想象，2个进程一直同时运行，而且步调一致，在fork之后，他们分别作不同的工作，也就是分岔了。 （2）父子进程共享文件描述符的条件：在fork之前打开文件。 如何共享文件描述符：父子进程共享文件描述符- 洋羽翔 父子进程关系：fork出的子进程和父进程- 晴天的专栏- 博客频道- CSDN.NET 未完待续 本博客将长期更新维护。 个人主页]]></content>
      <categories>
        <category>学科笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>整理</tag>
        <tag>陈刚</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python定期爬取GitHub上每日流行项目]]></title>
    <url>%2F2017-06-26%2Fpython%E5%AE%9A%E6%9C%9F%E7%88%AC%E5%8F%96GitHub%E4%B8%8A%E6%AF%8F%E6%97%A5%E6%B5%81%E8%A1%8C%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[介绍一个在GitHub上看到的通用的python爬虫，难度不大，是一个蛮好玩的点，顺便总结一下python爬虫的一些需要注意的点。先上链接：github源码 项目简介大家可以看一下这个网站 https://github.com/trending 随时关注最新的技术动向，永远是一个程序员应该做到的，但我们不能做到每天去查看，于是就诞生了这个repo（更正为原作者写了这个repo），我们将爬虫挂在Linux服务器上，定期爬取并且推送到自己的repo上，只要有时间，就可以看到之前的所有热门项目。 顺便说一句这样是不是还可以刷一波GitHub commit 代码po在了最后面 关于python的私人总结使用python开发爬虫的时候需要注意哪些？ 区分python版本 python 2.x 3.x 差别很大，如果遇到就编译通不过，及早意识到进行修正还好，若是语法差别不大却没有意识到，有时候会给自己惹来很大的麻烦 关注几种易于混淆的数据类型 Tuples Lists Dictionary Json需要格外关注这几种类型之间的转换，我们知道python是一种弱数据类型语言，但不代表着它的数据类型可以混用，反而，正因为弱化了声明，才让有些操作更加容易出错，这时候我们需要做的，就是仔细阅读文档，熟悉不同的用法。 推荐文档：Tuples, Lists, and Dictionaries 注意合理使用第三方类库 python相对于java等语言，最大的优势就在于其具有很大规模的封装良好的类库，可以让我们使用短短的几行代码，实现很多功能。这里列举几个常用的库和框架： virtualenv 创建独立 Python 环境的工具。 Beautiful Soup 提供一些简单的、python式的函数用来处理导航、搜索、修改分析树等功能 简单的说就是解析网页 Scrapy 强大的爬虫框架Scrapy限于篇幅，放几个链接大家自己进去看哪些 Python 库让你相见恨晚？Python 常用的标准库以及第三方库有哪些？ 代码下面是注释版代码，python2.7 用了requests PyQuery等几个类库代码写的比较明确了，就没有过多注释 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879 #!/usr/local/bin/python2.7 # coding:utf-8import datetimeimport codecsimport requestsimport osimport timefrom pyquery import PyQuery as pq #git操作 推送到远程repodef git_add_commit_push(date, filename): cmd_git_add = 'git add .' cmd_git_commit = 'git commit -m "&#123;date&#125;"'.format(date=date) cmd_git_push = 'git push -u origin master' os.system(cmd_git_add) os.system(cmd_git_commit) os.system(cmd_git_push)def createMarkdown(date, filename): with open(filename, 'w') as f: f.write("###" + date + "\n")def scrape(language, filename): HEADERS = &#123; 'User-Agent' : 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.7; rv:11.0) Gecko/20100101 Firefox/11.0', 'Accept' : 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'Accept-Encoding' : 'gzip,deflate,sdch', 'Accept-Language' : 'zh-CN,zh;q=0.8' &#125; url = 'https://github.com/trending/&#123;language&#125;'.format(language=language) r = requests.get(url, headers=HEADERS) assert r.status_code == 200 # print(r.encoding) d = pq(r.content) items = d('ol.repo-list li') # codecs to solve the problem utf-8 codec like chinese with codecs.open(filename, "a", "utf-8") as f: f.write('\n##&#123;language&#125;\n'.format(language=language)) for item in items: i = pq(item) title = i("h3 a").text() owner = i("span.prefix").text() description = i("p.col-9").text() url = i("h3 a").attr("href") url = "https://github.com" + url # ownerImg = i("p.repo-list-meta a img").attr("src") # print(ownerImg) f.write(u"* [&#123;title&#125;](&#123;url&#125;):&#123;description&#125;\n".format(title=title, url=url, description=description)) #定时爬取对应语言的并写入到markdown文本中def job(): strdate = datetime.datetime.now().strftime('%Y-%m-%d') filename = '&#123;date&#125;.md'.format(date=strdate) # create markdown file createMarkdown(strdate, filename) # write markdown scrape('python', filename) scrape('swift', filename) scrape('javascript', filename) scrape('go', filename) scrape('Objective-C', filename) scrape('Java', filename) scrape('C++', filename) scrape('C#', filename) # git add commit push git_add_commit_push(strdate, filename) #主函数if __name__ == '__main__': while True: job() time.sleep(12 * 60 * 60) 扩展及埋坑 下集预告这里分享几个python相关的重要链接，看了一定会有收获（尤其是前两者），而且很大，没效果你回来打我（匿 下面准备把oschina一个类似的东西一块爬一下，push到repo里 接下来准备写一个爬取学校教务系统验证码并训练识别的文章，敬请期待。 资源汇总：python框架、类库、软件和资源汇总repo 爬虫集合：各种python爬虫集合 python爬虫教程: 静觅 崔庆才的个人博客 python学习路线: 知乎：如何入门 Python 爬虫? 原repo go语言版本: github-trending python版本: github-trending 欢迎各位在评论区批评指正 若是觉得码字不易，也可以赞赏啊Orz 个人主页]]></content>
      <categories>
        <category>开发笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浅析iOS中的堆与栈]]></title>
    <url>%2F2017-06-24%2Fstack-and-heap-in-iOS-development%2F</url>
    <content type="text"><![CDATA[本文永久更新地址：http://hellogod.cn/stack-and-heap-in-iOS-development/ 学习Objective-C的时候，很明显的一点感受就是这门语言和C++非常接近（这不废话吗QAQ）。虽然苹果爸爸对于底层的保护做的很好（封闭），让我们对于底层实现方式了解的不是很透彻，但还是能了解一二，相信对于之后的深入开发也很有帮助。 下面是之前做的一个关于iOS中堆栈的小演示。 顺便安利一发之前授课老师安利的小册子：《高质量 C++/C 编程指南》，可谓短小精悍。 主要讲解了C++中的一些核心问题，一些经常容易出现错误但又经常被忽略的地方。 十分推荐下载PDF反复阅读，同时请注意版权问题。]]></content>
      <categories>
        <category>学科笔记</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Objective-C基础知识点总结（一）]]></title>
    <url>%2F2017-06-23%2FObjective-C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[长文，建议跳跃选择性阅读，大约10min可以读完全文。 1.目录 1.个人学习建议 2.知识点整理 3.下集预告 iOS这一行，都过了这么多年，还是水分很足，没有几个愿意安安心心查资料写东西的。虽说博客都是互相抄，但是起码其他行业抄的最开始的人是对的，但是这一行因为中文资料少（是的，到现在中文资料也不完善），所以出现很多粗制滥造的，这里经过笔者校验之后分享一些相关知识。 个人建议： 入门视频首选是斯坦福CS193P课程 iOS10, Xcode8 ,Swift 3 - Youtube，白胡子老爷爷在这一行可以称得上是元老，之前还想出一个针对这个视频教程的学习笔记，后来给鸽了；这里链接放了YouTube上的最新视频，墙内的朋友也可以自行百度其他资源，我这里也存了一份百度云(16年的版本iOS9)，需要的可以在评论留下邮箱（某资源论坛既视感？？？）。 入门教材Programming in Objective-C 6th edition（英文版），这里附上教材PDF下载链接，没有具体考证链接合法性，经济允许建议支持正版。 项目实战，大学生的话去实验室找一个项目做一做，大概几个月也就熟了（最初级的那种），这里还要感谢当初带我的学长@子豪学长——是一个很让人佩服的学长。社会人士自学的话可以在在github、码云上面多找找完整的客户端试试看。 下面是学习OC时对于一些知识点的总结，资料来源互联网，权当学习笔记，参考的资料尽量附上原文链接。 2.重要知识点总结其实下面的每一个点都可以单独行文，这里摘录其中较为重要的部分，同时添加链接供读者深度查看。之后可能单独领出深究，这里先埋坑。 2.1 继承关系OC中的继承属于单继承，这一点和Java类似。 在Objective-C中super是指向直接父类的指针 而self是指向本身的指针，self就相当于java中的this指针。 在Objectiv-C中几乎所有的类都是继承自NSObject类，NSObject类中存在大量功能强大的方法。这里不再赘述，详情可查看 Objective-C中的继承和多态 2.2 MVC设计模式iOS开发——MVC详解&amp;Swift＋OC 2.3 block这里搬运一下 block定义12345678910111213141516struct Block_descriptor &#123; unsigned long int reserved; unsigned long int size; void (*copy)(void *dst, void *src); void (*dispose)(void *);&#125;;struct Block_layout &#123; void *isa; int flags; int reserved; void (*invoke)(void *, ...); struct Block_descriptor *descriptor; /* Imported variables. */&#125;; 有人认为OC中block 本质应该是一个函数指针加上一个对应捕获上下文变量的内存块（结构体或者类）。建议参考：知乎：OC中， block（块）的本质是什么？ 2.4 静态变量、静态常量、全局变量staticstatic修饰的变量必须放在@implementation外面或方法中，它只在程序启动初始化一次。 1static int num; constconst修饰的变量是不可变的，如果需要定义一个时间间隔的静态常量，就可以使用const修饰。 1static const NSTimeInterval LMJTimeDuration = 0.5; 如果试图修改TimeDuration编译器则会报错。 如果我们定义一个字符串类型的静态常量就要注意了，这两种写法是一样的，而且是可以修改的。12static NSString const * LMJName = @"iOS开发者公会";static const NSString * LMJName = @"iOS开发者公会"; 这两种写法cons修饰的是 LMJName,是指针指向符，也就是说此时指向内存地址是不可变的，而内存保存的内容时可变的。所以我们应该这样写： 1static NSString * const LMJName = @"iOS开发者公会"; 当我们定义一个对象类型常量的时候，要将const修饰符放到*指针指向符后面。 externextern修饰的变量，是一个全局变量。 extern NSString * LMJName = @”iOS开发者公会;extern修饰的变量也可以添加const进行修饰： extern NSString * const LMJName = @”iOS开发者公会;此时全局变量只能被初始化一次extern定义的全局常量的用法和宏定义类似，但是还是有本质上的不同的。 extern定义的全局常量更不容易在程序中被无意窜改。 OC中的全局变量 与 static iOS定义静态变量、静态常量、全局变量 浅析Objective-C中的堆与栈（PDF版） 2.5 NSObject ,Id, instancetype NSObject NSObject确定对象类型是继承于NSObject。很常用。 id 可以指向任意类型的objcetive-c的对象，声明的对象具有运行时的特性。并不一定是NSObject对象。对于一些不能进行类型检查或者不想检查的地方，可以使用id，经常会声明delegate为id类型，在运行的时候载使用respondToSelector:检查。 instancetype stack overflow上面所说：“Use instancetype whenever it’s appropriate, which is whenever aclass returns an instance of that same class.”在instancetype有效的情况下，应该尽量去使用instancetype。 id数据类型，是一种通用的对象类型。也就是说，它可以用来存储属于任何类的对象。当以这种方式在一个变量中存储不同类型的对象时，在程序执行的期间，这种数据类型的真正优势就出现了。 instancetype和id的区别如下（ARC和MRC的讲解部分放在后面的2.7中）: 区别1: 在ARC(Auto Reference Count)环境下: instancetype用来在编译期确定实例的类型,而使用id的话,编译器不检查类型, 运行时检查类型. 在MRC(Manual Reference Count)环境下: instancetype和id一样,不做具体类型检查 区别2: id可以作为方法的参数,但instancetype不可以 instancetype只适用于初始化方法和便利构造器的返回值类型 2.6 Copy, strong, retain 先说copy和strong的区别，这里摘录一个例子。 在定义一个类的property时候，为property选择strong还是copy特别注意和研究明白的，如果property是NSString或者NSArray及其子类的时候，最好选择使用copy属性修饰。 为什么呢？这是为了防止赋值给它的是可变的数据，如果可变的数据发生了变化，那么该property也会发生变化。 代码示例 还是结合代码来说明这个情况12345678910111213141516171819@interface Person : NSObject@property (strong, nonatomic) NSArray *bookArray1;@property (copy, nonatomic) NSArray *bookArray2;@end@implementation Person//省略setter方法@end//Person调用main()&#123; NSMutableArray *books = [@[@"book1"] mutableCopy]; Person *person = [[Person alloc] init]; person.bookArray1 = books; person.bookArray2 = books; [books addObject:@"book2"]; NSLog(@"bookArray1:%@",person.bookArray1); NSLog(@"bookArray2:%@",person.bookArray2);&#125; 我们看到，使用strong修饰的person.bookArray1输出是[book1,book2]，而使用copy修饰的person.bookArray2输出是[book1]。这下可以看出来区别了吧。 备注：使用strong，则person.bookArray1与可变数组books 指向同一块内存区域 ，books内容改变，导致person.bookArray1的内容改变，因为两者是同一个东西；而使用copy，person.bookArray2在赋值之前，将books内容复制，创建一个 新的内存区域，所以两者不是一回事，books的改变不会导致person.bookArray2的改变。 总结起来，其实@property的参数还有很多，主要分为四类： 1、内存管理 retain ： release旧值，retain新值assign ：直接复制（缺省值，适用于非OC对象类型）copy ： release旧值，copy新值 2、读写属性，是否要生成set方法 readaonly ：只读，只生成getter的声明和实现readwrite ：可读可写，生成setter和getter的生命和实现（缺省值） 3、多线程管理 nonatomic ：性能高，不加锁，线程不安全（建议使用，开发常写）atomic：性能低，加锁，线程安全（缺省值） 4、setter和getter方法的名称 @property (setter = setXxx: ,getter = xxx) int weight;一般使用在BOOL类型的成员变量 getter = isXxx Objective-C属性修饰符strong和copy的区别 2.7 Manually reference Counting和Automatic Reference Counting 1.MRC 手动管理内存(Manual Reference Counting) 先看一个例子： NSNumber对象myInt被设置为整数100，并且程序输出显示它的初始计数为1。然后，使用addObject：方法将该对象添加到数据myArr中。引用计数变成2.将对象添加到任何类型的集合都会使该对象的引用次数增加。这意味着，如果随后释放了添加的对象，那么数组中仍然保存这该对象的有效引用，对象不会释放。 接下来，将myInt赋值给变量myInt2.要注意这个操作并没有使myInt对象的引用次数增加，这会给以后造成潜在的麻烦。例如，如果对myInt的引用次数减少到0，并且它占用的空间被释放，那么myInt2将拥有无效的引用对象（将myInt赋值给myInt2的操作并没有复制实际的对象，只是指向myInt在内存中位置的指针）。 然后通过代码再来直观的感受一下。123456789101112131415161718192021222324int main(int argc, const char * argv[]) &#123; @autoreleasepool &#123; // 只要创建一个对象默认引用计数器的值就是1 Person *p = [[Person alloc] init]; NSLog(@"retainCount = %lu", [p retainCount]); // 1 // 只要给对象发送一个retain消息, 对象的引用计数器就会+1 [p retain]; NSLog(@"retainCount = %lu", [p retainCount]); // 2 // 通过指针变量p,给p指向的对象发送一条release消息 // 只要对象接收到release消息, 引用计数器就会-1 // 只要一个对象的引用计数器为0, 系统就会释放对象 [p release]; // 需要注意的是: release并不代表销毁\回收对象, 仅仅是计数器-1 NSLog(@"retainCount = %lu", [p retainCount]); // 1 [p release]; // 0 NSLog(@"--------"); &#125;// [p setAge:20]; // 此时对象已经被释放 return 0;&#125; MRC内存原则1234567891.需要引用时，+1；不需要引用了，-1；2.谁创建，谁release；3.谁retain，谁release；4.只要调用了alloc，必须有release(autorelease)5.成员变量的set方法中需要注意的：基本数据不用管，对象数据需要注意。 2.自动释放池（Automatic Reference Counting）autorelease是一种支持引用计数的内存管理方式，只要给对象发送一条autorelease消息，会将对象放到一个自动释放池中，当自动释放池被销毁时，会对池子里面的所有对象做一次release操作 使用autorelease有什么好处呢 不用再关心对象释放的时间不用再关心什么时候调用release autorelease的原理实质上是什么？ autorelease实际上只是把对release的调用延迟了，对于每一个autorelease，系统只是把该对象放入了当前的autorelease pool中,当该pool被释放时,该pool中的所有对象会被调用release。 OC知识–彻底理解内存管理(MRC、ARC) OC基本语法总结（四）——内存管理MRC和ARC 2.8 auto、const和volatile待补充… 2.9 alloc, init, dealloc, release,new ,retain简单地说，alloc分配内存空间，init对该对象进行初始化，这些方法若没有重写方法则默认继承自父类。通常来讲，new = alloc + initObjective-C的对象在使用完成之后不会自动销毁，需要执行dealloc来释放空间（销毁），否则内存泄露。下面是一个简单的例子。12345ClassA *obj1 = [[ClassA alloc] init];[obj1 hello]; //输出hello[obj1 dealloc]; Objective-C采用了引用计数(ref count或者retain count)。对象的内部保存一个数字，表示被引用的次数。例如，某个对象被两个指针所指向（引用）那么它的retain count为2。需要销毁对象的时候，不直接调用dealloc，而是调用release。release会让retain count减1，只有retain count等于0，系统才会调用dealloc真正销毁这个对象。 Objective-C指针赋值时，retain count不会自动增加，需要手动retain。 12345678ClassA *obj1 = [[ClassA alloc] init]; //retain count = 1ClassA *obj2 = obj1; //retain count = 1[obj2 retain]; //retain count = 2[obj1 hello]; //输出hello[obj1 release]; //retain count = 2 – 1 = 1[obj2 hello]; //输出hello[obj2 release]; //retain count = 0，对象被销毁 Objective-C 内存管理——你需要知道的一切 Objective-C内存管理教程和原理剖析（一） 2.10 文件操作待补充… 2.11 分类和协议待补充… 2.12 NSString， NSNumber，NSArray，NSDictionary， NSSet 类的主要方法待补充… 2.13 CocoaCocoa是一种支持应用程序提供丰富用户体验的框架，它实际上由两个框架组成： Foundation框架 Application Kit (或AppKit)框架 : 提供与窗口、按钮、列表等相关的类。 core Data 补充： 内核以设备驱动程序的形式提供与硬件的底层通信。它负责管理系统资源，包括调度要执行的程序、管理内存和电源，以及执行基本的I/O操作。 核心服务提供的支持比它上面层次更加底层或更加“核心”。例如，这里提供对集合、网络、 调试、文件管理、文件夹、内存管理、线程、时间和电源的管理。应用程序服务层包含对打印和图形呈现的支持，包括Quartz、OpenGL和Quicktime。 Cocoa层直接位于应用程序层之下。正如图所示，Cocoa包括Foundation禾口AppKit框架0 Foundation框架提供的类用于处理集合、字符串、内存管理、文件系统‘存档等。AppKit框架提供的类用于管理视图、窗口、文档和让Mac OS X闻名于世的多信息用户界面。 Cocoa框架用于Mac OS X桌面与笔记本电脑的应用程序开发，而Cocoa Touch框架用于 iPhone与ipod Touch的应用程序开发。Cocoa和Cocoa Touch都有Foundation框架。然而在Cocoa Touch下，UIKit代替了 AppKit框架，以便为很多相同类型的对象提供支持，比如窗口、视图、按钮、文本域等。另外，Cocoa Touch还提供使用加速器（它与GPS和WiFi信号一样都能跟綜你的位置）的类和触摸式界面， 并且去掉了不需要的类，比如支持打印的类。 4.前文也提到，本文提到的每一个点都可以单独行文，这里只是做一个浅显的介绍，后期会结合示例代码做一些更加深入探讨。 欢迎指正批评与交流，本博客将长期更新维护。 个人主页 未完待续…]]></content>
      <categories>
        <category>开发笔记</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[02-《UNIX高级环境编程》全书精华集锦]]></title>
    <url>%2F2017-05-14%2F%E3%80%9002%E3%80%91%E3%80%8AUNIX%E9%AB%98%E7%BA%A7%E7%8E%AF%E5%A2%83%E7%BC%96%E7%A8%8B%E3%80%8B%E5%85%A8%E4%B9%A6%E7%B2%BE%E5%8D%8E%E9%9B%86%E9%94%A6%2F</url>
    <content type="text"><![CDATA[众所周知，Linux系列知识极其重要，公司面试、实际开发都需要用到。最近看了一些资料之后，发觉自己很多地方没有掌握到位，于是开始逐一查阅，顺便整理了这个懒人版供大家参考。 1 引子 每个需要详细了解问题下面👇需要的信息都给出了相应的参考链接，有些还配上了实际操作，相信你认真看完本文之后对于UNIX操作系统基础能有一个更加清晰的认识。 2 正文（17）在一个进程中，文件描述符的增长规律是怎样的？例如，如果已经有0、1、2、6这样几个文件描述符，那么用open()返回的下一个文件描述符是什么？ （1）由open和openat函数返回的文件描述符一定是最小的未用描述符数值（2）3（3）详细链接： Linux中的文件描述符与打开文件之间的关系 ##（18）什么是process id？父进程和子进程的pid之间有什么关系？ （通常子进程的pid要大于父进程的pid） process id:进程标识符，unix系统中用来唯一标识每个进程，是一个非负整数。 子进程总是可以调用getppid来获得父进程的pid,父进程在调用fork函数时可以获得子进程的pid. ##（19）什么是C语言程序的入口函数？在C Startup Routine（start.S）中接受的main函数原型是什么？ Main函数。（当内核执行C程序时，在调用main前先调用一个特殊的启动例程，可执行程序文件将此启动例程设置为程序的起始地址。启动例程从内核取得* 命令行参数和环境变量值，然后为按上述方式调用main函数做好安排。） Int main(int argc, char * argv[1]),argc是命令行参数的数目，argv是指向参数的各个指针所构成的数组。 ##（20）什么是系统调用？什么是C语言库函数？它们之间有什么区别和联系？ linux系统调用和库函数调用的区别 系统调用（system call），指运行在用户空间的应用程序向操作系统内核请求某些服务的调用过程。 系统调用提供了用户程序与操作系统之间的接口。一般来说，系统调用都在内核态执行。由于系统调用不考虑平台差异性，由内核直接提供，因而移植性较差（几乎无移植性）。 库函数（library function），是由用户或组织自己开发的，具有一定功能的函数集合，一般具有较好平台移植性，通过库文件（静态库或动态库）向程序员提供功能性调用。程序员无需关心平台差异，由库来屏蔽平台差异性。 系统调用实际上就是指最底层的一个调用，在linux程序设计里面就是底层调用的意思。面向的是硬件。而库函数调用则面向的是应用开发的，相当于应用程序的api. 采用这样的方式有很多种原因，第一：双缓冲技术的实现。第二，可移植性。第三，底层调用本身的一些性能方面的缺陷。第四：让api也可以有了级别和专门的工作面向。 ##（21）什么是inode？里面存放什么信息？文件的文件名存放在哪里？ inode(index node)就是索引节点，它用来存放档案及目录的基本信息，包含时间、档名、使用者及群组等。inode信息就存储在磁盘的某个分区上inode 包含文件的元信息，具体来说有以下内容： 文件的字节数 文件拥有者的 User ID 文件的 Group ID 文件的读、写、执行权限 文件的时间戳，共有三个：ctime 指 inode 上一次变动的时间，mtime 指文件内容上一 次变动的时间，atime 指文件上一次打开的时间。 链接数，即有多少文件名指向这个 inode 文件数据 block 的位置可以用 stat 命令，查看某个文件的 inode 信息： stat example.txt 总之，除了文件名以外的所有文件信息，都存在 inode 之中。 如下图所示，文件名存在于目录块中。 *应@恒大大的小迷妹°添加： Linux 中文件名存在哪儿 ##（22）C程序的内存布局是怎样的？从低地址到高地址依次存放哪些段？ 正文段：由CPU执行的机器指令部分。初始化数据段：程序中需明确地赋初值的变量。非初始化数据段：在程序开始执行之前，内核将此段中的数据初始化为０或空指针。栈：自动变量以及每次函数调用时所需保存的信息都存放在此段中。堆：通常在堆中进行动态存储分配。从低地址到高地址依次存放正文，初始化的数据，未初始化的数据（bss），堆，栈。参考链接： C语言中内存分布及程序运行中(BSS段、数据段、代码段、堆栈） https://wongxingjun.github.io/2015/07/25/C程序的内存布局/ C语言中的内存布局 ##（23）怎样利用fork()、exec()、waitpid()来创建和控制进程？ 1.fork 函数调用一次,但返回两次。两次返回的唯一区别是:子进程返回值为 0,而父进程的返回值是新子进程的进程 ID。fork 函数返回之后,子进程和父进程都各自继续执行 fork 调用之后的指令。子进程是父进程的副本。例如,子进程获得了父进程数据空间、堆和栈的副本。2.当进程调用一种 exec 函数时,该进程执行的程序完全替换为新程序,而新程序则从其 main 函数开始执行。调用 exec 并没有创建新进程,所以进程 ID 没有改变,exec 只是用一个新的程序替换了当前进程的正文、数据、堆和栈段。 waitpid 函数通过 pid 参数来控制父进程希望获取特定进程的终止状态信息,• pid==-1:等待任一子进程,与 wait 函数等效。• pid&gt;0:等待其进程 ID 与 pid 相等的子进程。• pid==0:等待其组 ID 等于调用进程组 ID 的任一子进程。(我们这里不学习进程组)• pid&lt;-1:等待其组 ID 等于 pid 绝对值的任一子进程。waitpid 函数返回终止子进程的进程 ID。如果指定的进程或进程组不存在,或者参数 pid 指定的进程不是调用进程的子进程则都将出错。 ##（24）什么是孤儿进程、什么是僵尸进程？它们有什么特点？怎样避免产生过多僵尸进程？ 孤儿进程：在其父进程执行完成或被终止后仍继续运行的一类进程。这些孤儿进程将被init进程(进程号为1)所收养，并由init进程对它们完成状态收集工作。僵尸进程：在UNIX术语中，一个已经终止、但是其父进程尚未对其进行善后处理（获取终止子进程的有关信息、释放它仍占用的资源）的进程。1.终止进程的父进程调用wait和waitpid2.两次调用fork()来使新创建的子进程变成孤儿进程，从而直接被1号进程收养。 ##（25）什么是前台进程？什么是后台进程？一个会话有几个前台进程组和几个后台进程组？ 前台进程：用户使用的有控制终端的进程。后台进程：也称守护进程，是运行在后台的一种特殊进程。独立于控制终端并且周期性地执行某种任务或者等待处理某些发生的事件。一个会话中包含一个前台进程组，一个或多个后台进程组。 ##（26）C程序如何退出并返回操作系统？exit()函数和_exit()/_Exit()函数的差别在哪里？ 进程的终止方式有 8 种,其中 5 种为正常终止,它们是 从 main 返回。 调用 exit。 调用_exit 或_Exit。 最后一个线程从其启动例程返回。 最后一个线程调用pthread_exit。另外三种为异常终止方式,它们是 调用 abort。 接到一个信号并终止。 最后一个线程对取消请求做出响应。这三个函数用于正常终止一个程序:_exit 和_Exit 立即进入内核,exit 则先执行一些清理处理(包括调用执行各终止处理程序,关闭所有标准 I/O 流等),然后进入内核。 ##（27）exec函数族包含哪些具体的函数？其中execve是系统调用，其它都是普通函数。 UNIX 提供了 6 种不同的 exec 函数供我们使用。它们的原型如下所示,1234567#include &lt;unistd.h&gt;int execl(const char *pathname, const char *arg0, ... /* (char *)0 */);int execv(const char *pathname, char *const argv[]);int execle(const char *pathname, const char *arg0, ... /* (char *)0, char *const envp[] */);int execve(const char *pathname, char *const argv[], char *const envp[]);int execlp(const char *filename, const char *arg0, ... /* (char *)0 */);int execvp(cosnt char *filename, char *const argv[]); 6个函数的返回值:若出错则返回-1,若成功则没有返回值可能很多人会觉得这六个函数太难记了。但是,我们仔细观察会发现,这六个函数的命名是有一些规律的。• 含有 l 和 v 的 exec 函数的参数表传递方式是不同的。• 含有 e 结尾的 exec 函数会传递一个环境变量列表。• 含有 p 结尾的 exec 函数取的是新程序的文件名作为参数,而其他exec 函数取的是新程序的路径。 ##（28）什么是信号？SIGINT、SIGSTOP、SIGHUP、SIGALARM、SIGQUIT等信号是如何产生的？缺省的处理动作是什么？ 在计算机科学中,信号是 Unix、类 Unix 以及其他 POSIX 兼容的操作系统中进程间通讯的一种有限制的方式。它是一种异步的通知机制,用来提醒进程一个事件已经发生。当一个信号发送给一个进程,操作系统中断了进程正常的控制流程,此时,任何非原子操作都将被中断。如果进程定义了信号的处理函数,那么它将被执行,否则就执行默认的处理函数。SIGALRM 是闹钟信号,当由 alarm 函数设置的计时器超时后产生此信号。进程的信号屏蔽字复原为调用信号处理屏蔽字之前。SIGQUIT，当用户在终端上按退出键（一般是Ctrl+\）时，中断驱动程序产生此信号，并发送给前台进程组中的所有进程。SIGSTOP，作业控制信号，用以停止一个进程，当用户在终端上按挂起键（一般是Ctrl+Z）时，终端驱动程序产生此信号。SIGHUP，如果终端接口检测到一个连接断开，则将此信号送给与该终端相关的控制进程（会话首进程）。SIGINT，当用户按中断键（一般是Delete或Ctrl+C）时，终端驱动程序产生此信号并发送至前台进程组中的每一个进程。 ##（29）什么是硬链接和软链接（符号链接）？读取软连接的函数是什么？（readlink） 硬链接：通过 i 节点链接使多个目录项指向同一个文件的这种链接类型。符号链接：对一个文件的间接指针，一般用于将一个文件或整个目录结构移到文件系统中的另一个位置。readlink 函数打开符号链接本身,并读取该链接中的内容(不是该链接所引用的文件的内容)。（#include &lt;unistd.h&gt;ssize_t readlink(const char restrict pathname, char restrict buf, size_t bufsize);返回值:若成功则返回读到的字节数,若出错则返回-1。如果此函数成功执行,则返回读入 buf 的字节数。在 buf 中返回的符号链接的内容不以 null 字符终止。） ##（30）函数link()和unlink()的作用是什么？什么时候文件占用的磁盘空间才会真正被释放掉？（两个条件） Link():创建一个指向现有文件的链接；unlink删除一个现有的目录项。打开文件的进程个数为0；文件的链接计数为0。 ##（31）什么是可重入函数？怎样判断一个函数是不是可重入函数？ 什么是可重入函数和不可重入函数(转) - Parry Nee - 博客园 一个可重入的函数简单来说，就是：可以被中断的函数。就是说，你可以在这个函数执行的任何时候中断他的运行，在任务调度下去执行另外一段代 码而不会出现什么错误。而不可重入的函数由于使用了一些系统资源，比如全局变量区，中断向量表等等，所以他如果被中断的话，可能出现问题，所以这类函数是 不能运行在多任务环境下的。 基本上下面的函数是不可重入的（1）函数体内使用了静态的数据结构；（2）函数体内调用了malloc()或者free()函数；（3）函数体内调用了标准I/O函数。 ##（32）什么是带缓冲的输出和不带缓冲的输出？当父进程的输出缓冲区还未清空时，调用fork创建子进程，会出现什么情况？ 不带缓冲的输出：在用户的进程中对这这类的函数不会自动缓冲，每次执行就要进行一次系统调用，针对文件描述符操作。 带缓冲的输出：在系统调用的上一层多加了一个缓冲区，针对流来操作。 如果标准输出连接到终端设备，则它是行缓冲的，否则它是全缓冲的。即以交互方式运行时，只得到父进程中printf输出的行一次，原因是标准输出缓冲区由换行符冲洗。但是当将标准输出重定向到一个文件时，却得到printf输出两次，原因是在fork之前调用了一次printf，但当调用fork时，该行数据仍在缓冲区中，然后在将父进程数据空间复制到子进程中时，该缓冲区数据也被复制到子进程中，此时父进程和子进程各自有了该行内容的缓冲区。 ##（33）要求详细掌握用法的函数包括：fork、waitpid、execlp、open、read、write、lseek、close、malloc、free等。 ##（34）源码：fork和printf相结合产生不同输出的源代码（forkflush.c）、用getpwnam演示的可重入函数的源代码（reentrant.c）、创建/打开/读/写文件的源代码（rwex.c等）。 3.写在最后：欢迎大家指正批评与交流，本博客将长期更新维护 Github ：https://github.com/LJ147个人主页]]></content>
      <categories>
        <category>学科笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>整理</tag>
        <tag>陈刚</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大二才明白的一些事情，我多希望你能看到最后]]></title>
    <url>%2F2017-05-05%2F%E5%A4%A7%E4%BA%8C%E6%89%8D%E6%98%8E%E7%99%BD%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B%E6%83%85%EF%BC%8C%E6%88%91%E5%A4%9A%E5%B8%8C%E6%9C%9B%E4%BD%A0%E8%83%BD%E7%9C%8B%E5%88%B0%E6%9C%80%E5%90%8E%2F</url>
    <content type="text"><![CDATA[一些所谓人生经验，其实是个人总结。 2018-06-27 更新： 这些东西，现在再看会觉得幼稚可笑，本想已删了之，还是觉得保留，写这些本来就是为了记录嘛，也算是记录当时的一些幼稚可爱心情。 大二明白的一些事情 人有差异，你不能强求每个人和你想的一样、吃的一样、玩的一样、笑点一样，学会接受并适应差异的存在，这一点，我学习了很久 一般而言，钱永远不是最大的问题，所以不要把这个东西看的太重，但同时我建议你试着赚钱，这样以后你就知道，在以后的日子里，遇到传单的时候尽量腾出一只手去接着 交一群真心朋友，大一的时候加入了院里的一个学生部门，遇见了一群很有趣很投缘的人。有段时间，每天凌晨2、3点钟，都能看到我们疯狂水群吹比。那段时光，真的开心。 广交朋友，不论好坏，这会让你接触到很多书本上永远接触的事情 勇于尝试，喜欢就去尝试。你甚至可以试着让自己忙的想停下来。有段时间我忙的连玩游戏的时间都没有，但那段时间我觉得很充实，很满足。 别放弃读书，高中时候抢着时间读的闲书 ，不要停下来。金庸和古龙的小说，到大学里才扫了个遍。我看书，其实有点陶渊明的意思，说白了就是看的快，尤其是看的舒畅的书，看的更是快，恨不得一口气把全部的内容都读完，好看看作者到底都写了些什么 告诉你学习好很重要的才是真正想你好的人 不要相信读书无用、绩点无用论 不要用眼过度 保护好自己的眼睛 不长时间使用电脑等电子设备 别近视 多打球多锻炼 腹肌永远是加分项 大一可以懵懂 可以浪 但不要过分（挂科） 在合适的时候 当你真的觉得可能遇到对的人的时候 不要犹豫 这时候一定不要怂 图书馆和健身房永远是你最应该出现的地方 沟通能力 很重要 多鼓励别人 学生干部也很重要 入党、和老师的关系（我不是鼓励人阿谀奉承，而是保持起码的关系，毕竟别人如果甚至都不认识你，那他凭什么帮你？） 学会谦虚 学会尊敬别人 发现别人的优点，千万不要轻易看轻一个人。 一味淘宝、追剧、打游戏给不了你美好的大学生活 就在今天，学院一位素未谋面的大四学长，从教学楼的6楼纵身一跃，永远离开了我们。 我不想去揣测学长遇到了什么、心里如何想，为何做出这样的决定，因为当我看见，他的亲生父亲来到事故现场，忍了再忍之后终于放声号啕大哭的时候，一切别的事情都显得没那么重要。 上面的16条是我最近一直在想的东西，断断续续写了很多，这里一起放出来，可我突然觉得，似乎没有那么重要了。 只希望大家能记住第1条： 永远珍惜生命，永远。 为这位学长默哀。]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>日记</tag>
        <tag>无病呻吟</tag>
        <tag>矫情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java后台系统开发必看知识图谱-学习路线]]></title>
    <url>%2F2017-04-05%2FJava%E5%90%8E%E5%8F%B0%E7%B3%BB%E7%BB%9F%E5%BC%80%E5%8F%91%E5%BF%85%E7%9C%8B%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%2F</url>
    <content type="text"><![CDATA[java后台开发知识图谱 &amp; 高频技术汇总 1.引言：学习一个新的技术时，其实不在于跟着某个教程敲出了几行、几百行代码，这样你最多只能知其然而不知其所以然，进步缓慢且深度有限，最重要的是一开始就对整个学习路线有宏观、简洁的认识，确定大的学习方向，这样才能事半功倍。 我们经常会遇到这样的情况： 一开始学习一门新技术的时候，面对着很多很多陌生的名词，无从下手，一度想要放弃。本文首先会给出关于java后台开发和前端适配的一些建议学习路线，接着简单解释一些应用到的高频技术，帮助大家理解和学习，算是一个入门篇。 2.Java后台开发知识一览1、后端 WEB服务器：Weblogic、Tomcat、WebSphere、JBoss、Jetty 核心框架：Spring Framework 分布式服务框架 Dubbo（感谢@浅浅浅丿忧伤指正） 安全框架：Apache Shiro 视图框架：Spring MVC 服务端验证：Hibernate + Validator 布局框架：SiteMesh 工作流引擎：Activiti 任务调度：Spring Task + Quartz 持久层框架： MyBatis + MyBatis-Plus 数据库连接池：Alibaba Druid 缓存框架：Ehcache 、Redis 日志管理：SLF4J 、Log4j 会话管理：Spring-Session 工具类：Apache Commons、Jackson 、Xstream、Dozer 、POI 消息队列： ActiveMQ 云存储：阿里云 OSS 腾讯云 COS 七牛云 版本管理： git（推荐） svn 2、前端 JS框架：jQuery 1.9。 前端框架：Angular JS + Bootstrap + Jquery CSS框架：Twitter Bootstrap 2.3.1 客户端验证：JQuery Validation Plugin 1.11。 富文本在线编辑：CKEditor 在线文件管理：CKFinder 动态页签：Jerichotab 手机端框架：Jingle 数据表格：jqGrid 对话框：jQuery jBox 下拉选择框：jQuery Select2 树结构控件：jQuery zTree 日期控件： My97DatePicker 3.高频技术（可大致浏览，作为目录查看） Spring 每个模块的功能如下： 核心容器：核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 BeanFactory，它是工厂模式的实现。 Spring 上下文：Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。 Spring AOP：通过配置管理特性，Spring AOP 模块直接将面向方面的编程功能集成到了 Spring 框架中。 Spring DAO：JDBC DAO 抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数据库供应商抛出的错误消息。异常层次结构简化了错误处理。 Spring ORM：Spring 框架插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结构。 Spring Web 模块：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文。所以，Spring 框架支持与 Jakarta Struts 的集成。 Spring MVC 框架：MVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。参考链接：https://www.ibm.com/developerworks/cn/java/wa-spring1/ RESTful风格 MybatisMyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以对配置和原生Map使用简单的 XML 或注解，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。 Hibernate 参考链接：Hibernate官网 RedisRedis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。特点： 1.Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。 2.Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。 3.Redis支持数据的备份，即master-slave模式的数据备份。参考链接：Redis官网 Zookeeper Zookeeper 分布式服务框架是 Apache Hadoop 的一个子项目，它主要是用来解决分布式应用中经常遇到的一些数据管理问题，如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等等。 DUBBODUBBO是一个分布式服务框架，致力于提供高性能和透明化的RPC远程服务调用方案，是阿里巴巴SOA服务化治理方案的核心框架，每天为2,000+个服务提供3,000,000,000+次访问量支持，并被广泛应用于阿里巴巴集团的各成员站点。参考链接：DUBBO官网教程 4.写在最后：欢迎指正批评与交流，本博客将长期更新维护： 个人主页]]></content>
      <categories>
        <category>开发笔记</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>Java</tag>
        <tag>后台</tag>
        <tag>图谱</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS最佳入门教程【斯坦福大学CS193P课程】学习笔记（1）]]></title>
    <url>%2F2017-03-06%2FiOS%E6%9C%80%E4%BD%B3%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%E3%80%90%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6CS193P%E8%AF%BE%E7%A8%8B%E3%80%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89%2F</url>
    <content type="text"><![CDATA[斯坦福大学CS193P课程的全部代码以及学习中遇到的问题 本系列文章主要内容： 【斯坦福大学CS193P课程】的全部代码（分章节） 记录学习此课程中遇到的一些问题 分享该课程的高清视频&amp;pdf资源（文尾） 1.一位大神对于这门课程的大力推荐之前确实是看的这白胡子爷爷的这一系列视频入门，现在刚好重新回顾记录一下。 2.源代码部分： 因为涉及到storyboard的相关操作，所以将项目打包放在了文尾 本章节功能：iOS版本的支持加减乘除、一元二元运算的计算器 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146 CalculatorBrain.swift//// CalculatorBrain.swift// Calculator//// Created by Alex LJ on 2017/3/5.// Copyright © 2017年 Stanford University. All rights reserved.//import Foundationenum Optional&lt;T&gt;&#123; case None case Some(T)&#125;func multiply(op1:Double,op2:Double)-&gt;Double&#123; return op1*op2&#125;class CalculatorBrain&#123; private var accumulator = 0.0 func setOperand(operand:Double) &#123; accumulator = operand &#125; //操作类型 重点掌握这里的Swift特性 简易和类型推断 private var operations :Dictionary&lt;String,Operation&gt; = [ "π":Operation.Constant(M_PI),//M_PI "e":Operation.Constant(M_E), //M_E "±":Operation.UnaryOperation(&#123; -$0 &#125;), //minus "√":Operation.UnaryOperation(sqrt), //sqrt "cos": Operation.UnaryOperation(cos), //cos "×":Operation.BinaryOperation(&#123; $0 * $1 &#125;), "÷":Operation.BinaryOperation(&#123; $0 / $1 &#125;), "+":Operation.BinaryOperation(&#123; $0 + $1 &#125;), "−":Operation.BinaryOperation(&#123; $0 - $1 &#125;) ] enum Operation&#123; case Constant(Double) //常数 case UnaryOperation((Double)-&gt;Double) //单操作符 函数作为一个参数传值 case BinaryOperation((Double,Double)-&gt;Double) //双操作数 case Equals //等于 &#125; //执行运算操作 func performOperand(sympol:String)&#123; if let operation = operations[sympol]&#123; switch operation &#123; case .Constant(let value):accumulator = value case .UnaryOperation(let function): accumulator = function(accumulator) case .BinaryOperation(let function): excutePendingBinaryOperation() pending = PendingBinaryOperationInfo(binaryFunction: function, firstOperand: accumulator) case .Equals: excutePendingBinaryOperation() &#125; &#125; &#125; private func excutePendingBinaryOperation()&#123; if pending != nil &#123; accumulator = pending!.binaryFunction(pending!.firstOperand,accumulator) pending = nil &#125; &#125; private var pending: PendingBinaryOperationInfo? private struct PendingBinaryOperationInfo&#123; var binaryFunction:(Double,Double)-&gt;Double var firstOperand:Double &#125; //运算结果 var result: Double&#123; get&#123; return accumulator &#125; &#125;&#125;``` ViewController.swift``` swift //// ViewController.swift// Calculator//// Created by Alex LJ on 2017/3/4.// Copyright © 2017年 Stanford University. All rights reserved.//import UIKitclass ViewController: UIViewController &#123; //显示框 @IBOutlet private weak var display: UILabel! var userIsInTheMiddleOfTyping = false //点击数字后的执行函数 @IBAction private func touchDigit(_ sender: UIButton) &#123; let digit = sender.currentTitle! if userIsInTheMiddleOfTyping &#123; let textCurrentlyInDisplay = display.text! display.text = textCurrentlyInDisplay + digit &#125;else&#123; display.text = digit &#125; userIsInTheMiddleOfTyping = true &#125; //展示数值 private var disPlayValue:Double&#123; get&#123; return Double(display.text!)! &#125; set&#123; display.text = String(newValue) &#125; &#125; //brain实例 private var brain = CalculatorBrain() //执行 @IBAction private func performOperation(_ sender: UIButton) &#123; if userIsInTheMiddleOfTyping&#123; brain.setOperand(operand: disPlayValue) userIsInTheMiddleOfTyping = false &#125; if let mathmathicalSymbol = sender.currentTitle&#123; brain.performOperand( sympol: mathmathicalSymbol) &#125; disPlayValue = brain.result &#125; &#125; 3.遇到的困难 UI使用自适配时选择的一些处理需要十分仔细，极其容易出错，唯一的办法大概就是仔细重复观看视频。 4.完整项目地址打包下载方式 本章节代码链接: https://pan.baidu.com/s/1hsFoF5q 密码: ap7i 参考：1. 唐巧公众号文章原文2. Apple斯坦福大学CS193P课程（需梯子 不然很慢） 行文仓促，多有不足之处，若有错误、不当之处，还请斧正。 个人主页]]></content>
      <categories>
        <category>开发笔记</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
</search>
